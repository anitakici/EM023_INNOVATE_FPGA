
em023_mucilage.elf:     file format elf32-littlenios2
em023_mucilage.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020224

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00004280 memsz 0x00004280 flags r-x
    LOAD off    0x000052a0 vaddr 0x000242a0 paddr 0x00024584 align 2**12
         filesz 0x000002e4 memsz 0x000002e4 flags rw-
    LOAD off    0x00005868 vaddr 0x00024868 paddr 0x00024868 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003c48  00020224  00020224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000434  00023e6c  00023e6c  00004e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e4  000242a0  00024584  000052a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  00024868  00024868  00005868  2**2
                  ALLOC, SMALL_DATA
  6 .nios_system_shared_memory 00000000  00002000  00002000  00005584  2**0
                  CONTENTS
  7 .nios_system_onchip_memory2 00000000  00024988  00024988  00005584  2**0
                  CONTENTS
  8 .comment      0000002d  00000000  00000000  00005584  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000768  00000000  00000000  000055b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_info   0000a607  00000000  00000000  00005d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000039c9  00000000  00000000  00010327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   00005176  00000000  00000000  00013cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_frame  00000fdc  00000000  00000000  00018e68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00002407  00000000  00000000  00019e44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00001cf2  00000000  00000000  0001c24b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_alt_sim_info 00000040  00000000  00000000  0001df40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000340  00000000  00000000  0001df80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .thread_model 00000003  00000000  00000000  00020284  2**0
                  CONTENTS, READONLY
 19 .cpu          00000016  00000000  00000000  00020287  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0002029d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0002029e  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0002029f  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000202a3  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000202a7  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000015  00000000  00000000  000202ab  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000015  00000000  00000000  000202c0  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000015  00000000  00000000  000202d5  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  000202ea  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000025  00000000  00000000  000202f2  2**0
                  CONTENTS, READONLY
 30 .jdi          0000fb5a  00000000  00000000  00020317  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020224 l    d  .text	00000000 .text
00023e6c l    d  .rodata	00000000 .rodata
000242a0 l    d  .rwdata	00000000 .rwdata
00024868 l    d  .bss	00000000 .bss
00002000 l    d  .nios_system_shared_memory	00000000 .nios_system_shared_memory
00024988 l    d  .nios_system_onchip_memory2	00000000 .nios_system_onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 c:/Users/kedic/Desktop/em023_mucilage/software/em023_mucilage_bsp//obj/HAL/src/crt0.o
0002025c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 I2C_core.c
00000000 l    df *ABS*	00000000 I2C_tests.c
00000000 l    df *ABS*	00000000 water_sensor.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00021d4c l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
000242a0 l     O .rwdata	000000e4 impure_data
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
000224a0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00022638 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00022778 l     F .text	00000034 alt_dev_reg
00024384 l     O .rwdata	0000002c nios_system_jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00022a78 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00022cd0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00022e08 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00022e34 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00023298 l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000233e8 l     F .text	0000003c alt_get_errno
00023424 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00024884 g     O .bss	00000004 alt_instruction_exception_handler
00021c88 g     F .text	00000018 putchar
0002258c g     F .text	0000007c alt_main
00021ca0 g     F .text	00000080 _puts_r
00024888 g     O .bss	00000100 alt_irq
000205d4 g     F .text	00000068 ACK_check
00024584 g       *ABS*	00000000 __flash_rwdata_start
00020548 g     F .text	0000008c ACK_single_check
00002000 g       *ABS*	00000000 __alt_mem_nios_system_shared_memory
00021c38 g     F .text	00000048 printf
000218b8 g     F .text	00000100 Water_I2C_write
0002063c g     F .text	00000250 OC_I2C_Write
00021b6c g     F .text	00000070 .hidden __fixsfsi
0002387c g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000000c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00024868 g     O .bss	00000004 errno
00020000 g       *ABS*	00000000 __alt_mem_nios_system_onchip_memory2
00024870 g     O .bss	00000004 alt_argv
0002c558 g       *ABS*	00000000 _gp
00022608 g     F .text	00000030 usleep
000243d8 g     O .rwdata	00000180 alt_fd_list
00021c80 g     F .text	00000008 _putchar_r
000238a0 g     F .text	00000090 alt_find_dev
00020360 g     F .text	00000154 oc_i2c_init_ex
0002336c g     F .text	0000007c alt_io_redirect
00023e6c g       *ABS*	00000000 __DTOR_END__
00021d20 g     F .text	00000010 puts
00023af0 g     F .text	00000098 alt_exception_cause_generated_bad_addr
000228f8 g     F .text	000000ec altera_avalon_jtag_uart_read
00021bfc g     F .text	0000003c _printf_r
00021aac g     F .text	00000064 .hidden __udivsi3
00024570 g     O .rwdata	00000004 alt_max_fd
00021440 g     F .text	000000f8 Water_I2C_init
00024558 g     O .rwdata	00000004 _global_impure_ptr
00024988 g       *ABS*	00000000 __bss_end
000231b0 g     F .text	000000e8 alt_iic_isr_register
00023774 g     F .text	00000108 alt_tick
00023164 g     F .text	0000004c alt_ic_irq_enabled
00020d38 g     F .text	00000270 OC_I2CL_Write
000236d0 g     F .text	000000a4 alt_alarm_stop
00024878 g     O .bss	00000004 alt_irq_active
0002088c g     F .text	00000064 ACK_judge_for_read
000200fc g     F .exceptions	000000c8 alt_irq_handler
000243b0 g     O .rwdata	00000028 alt_dev_null
00020260 g     F .text	00000054 Write32_Data
0002180c g     F .text	000000ac Water_I2C_read
00022de8 g     F .text	00000020 alt_dcache_flush_all
00024584 g       *ABS*	00000000 __ram_rwdata_end
00024568 g     O .rwdata	00000008 alt_dev_list
00022674 g     F .text	00000104 write
000223d4 g     F .text	00000054 _putc_r
000242a0 g       *ABS*	00000000 __ram_rodata_end
00021b10 g     F .text	0000005c .hidden __umodsi3
00024988 g       *ABS*	00000000 end
00021538 g     F .text	000001f8 myI2CReadWrite
000201c4 g     F .exceptions	00000060 alt_instruction_exception_entry
00023e6c g       *ABS*	00000000 __CTOR_LIST__
00040000 g       *ABS*	00000000 __alt_stack_pointer
00022af4 g     F .text	00000084 alt_avalon_timer_sc_init
000229e4 g     F .text	00000094 altera_avalon_jtag_uart_write
00021db8 g     F .text	0000050c ___vfprintf_internal_r
00023d08 g     F .text	0000012c __call_exitprocs
00020224 g     F .text	0000003c _start
0002487c g     O .bss	00000004 _alt_tick_rate
00024880 g     O .bss	00000004 _alt_nticks
000227e8 g     F .text	00000050 alt_sys_init
00023bec g     F .text	0000011c __register_exitproc
00022478 g     F .text	00000028 .hidden __mulsi3
000242a0 g       *ABS*	00000000 __ram_rwdata_start
00023e6c g       *ABS*	00000000 __ram_rodata_start
00022838 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00023a38 g     F .text	000000b8 alt_get_fd
00022b78 g     F .text	00000158 alt_busy_sleep
00023bbc g     F .text	00000030 memcmp
00024988 g       *ABS*	00000000 __alt_stack_base
00020308 g     F .text	00000058 oc_i2c_init
00023930 g     F .text	00000108 alt_find_file
00022e70 g     F .text	000000a8 alt_dev_llist_insert
000222dc g     F .text	000000a8 __sfvwrite_small_dev
00024868 g       *ABS*	00000000 __bss_start
00021bdc g     F .text	00000020 memset
0002129c g     F .text	000001a4 main
00024874 g     O .bss	00000004 alt_envp
00022898 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00024574 g     O .rwdata	00000004 alt_errno
00022384 g     F .text	00000050 putc
000219b8 g     F .text	00000080 .hidden __divsi3
000204b4 g     F .text	00000094 oc_i2c_uninit
00023e6c g       *ABS*	00000000 __CTOR_END__
00023e6c g       *ABS*	00000000 __flash_rodata_start
00023e6c g       *ABS*	00000000 __DTOR_LIST__
000227ac g     F .text	0000003c alt_irq_init
00023660 g     F .text	00000070 alt_release_fd
00021730 g     F .text	000000dc Water_I2C_start
00023b88 g     F .text	00000014 atexit
00022428 g     F .text	00000050 _write_r
0002455c g     O .rwdata	00000004 _impure_ptr
0002486c g     O .bss	00000004 alt_argc
00022f7c g     F .text	00000064 _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
00024560 g     O .rwdata	00000008 alt_fs_list
000202b4 g     F .text	00000054 Read32_Data
000208f0 g     F .text	000001f0 OC_I2C_Read
00020020 g       *ABS*	00000000 __ram_exceptions_start
00023000 g     F .text	00000050 alt_ic_isr_register
00024584 g       *ABS*	00000000 _edata
00024988 g       *ABS*	00000000 _end
00020224 g       *ABS*	00000000 __ram_exceptions_end
000230d8 g     F .text	0000008c alt_ic_irq_disable
00020bf0 g     F .text	00000148 OC_I2C_Read_Continue
00023b9c g     F .text	00000020 exit
00021a38 g     F .text	00000074 .hidden __modsi3
00040000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00020fa8 g     F .text	000002f4 OC_I2CL_Read
00023e34 g     F .text	00000038 _exit
00021d30 g     F .text	0000001c strlen
00023500 g     F .text	00000160 open
00022fe0 g     F .text	00000020 alt_icache_flush_all
00024578 g     O .rwdata	00000004 alt_priority_mask
00023050 g     F .text	00000088 alt_ic_irq_enable
00020ae0 g     F .text	00000110 OC_I2C_Write_Addr
000222c4 g     F .text	00000018 __vfprintf_internal
0002457c g     O .rwdata	00000008 alt_alarm_list
00022f18 g     F .text	00000064 _do_ctors
00022d0c g     F .text	000000dc close
00022508 g     F .text	00000084 alt_load



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08408914 	ori	at,at,548
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201c40 	call	201c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffc15 	stw	r2,-16(fp)

  return active;
   20118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0ffff17 	ldw	r3,-4(fp)
   20130:	e0bffe17 	ldw	r2,-8(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001126 	beq	r2,zero,20180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	e0bffd17 	ldw	r2,-12(fp)
   20140:	100690fa 	slli	r3,r2,3
   20144:	008000b4 	movhi	r2,2
   20148:	1885883a 	add	r2,r3,r2
   2014c:	10d22217 	ldw	r3,18568(r2)
   20150:	e0bffd17 	ldw	r2,-12(fp)
   20154:	100890fa 	slli	r4,r2,3
   20158:	008000b4 	movhi	r2,2
   2015c:	2085883a 	add	r2,r4,r2
   20160:	10922317 	ldw	r2,18572(r2)
   20164:	1009883a 	mov	r4,r2
   20168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   2016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
   20170:	0005313a 	rdctl	r2,ipending
   20174:	e0bffb15 	stw	r2,-20(fp)
  return active;
   20178:	e0bffb17 	ldw	r2,-20(fp)
   2017c:	00000706 	br	2019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
   20180:	e0bffe17 	ldw	r2,-8(fp)
   20184:	1085883a 	add	r2,r2,r2
   20188:	e0bffe15 	stw	r2,-8(fp)
      i++;
   2018c:	e0bffd17 	ldw	r2,-12(fp)
   20190:	10800044 	addi	r2,r2,1
   20194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
   20198:	003fe406 	br	2012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
   2019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   201a0:	e0bfff17 	ldw	r2,-4(fp)
   201a4:	103fde1e 	bne	r2,zero,20120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201a8:	0001883a 	nop
}
   201ac:	0001883a 	nop
   201b0:	e037883a 	mov	sp,fp
   201b4:	dfc00117 	ldw	ra,4(sp)
   201b8:	df000017 	ldw	fp,0(sp)
   201bc:	dec00204 	addi	sp,sp,8
   201c0:	f800283a 	ret

000201c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201c4:	defffb04 	addi	sp,sp,-20
   201c8:	dfc00415 	stw	ra,16(sp)
   201cc:	df000315 	stw	fp,12(sp)
   201d0:	df000304 	addi	fp,sp,12
   201d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   201d8:	00bfffc4 	movi	r2,-1
   201dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
   201e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   201e4:	d0a0cb17 	ldw	r2,-31956(gp)
   201e8:	10000726 	beq	r2,zero,20208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   201ec:	d0a0cb17 	ldw	r2,-31956(gp)
   201f0:	e0ffff17 	ldw	r3,-4(fp)
   201f4:	e1bffe17 	ldw	r6,-8(fp)
   201f8:	e17ffd17 	ldw	r5,-12(fp)
   201fc:	1809883a 	mov	r4,r3
   20200:	103ee83a 	callr	r2
   20204:	00000206 	br	20210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   2020c:	0005883a 	mov	r2,zero
}
   20210:	e037883a 	mov	sp,fp
   20214:	dfc00117 	ldw	ra,4(sp)
   20218:	df000017 	ldw	fp,0(sp)
   2021c:	dec00204 	addi	sp,sp,8
   20220:	f800283a 	ret

Disassembly of section .text:

00020224 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20224:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
   20228:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   2022c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   20230:	d6b15614 	ori	gp,gp,50520
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20234:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20238:	10921a14 	ori	r2,r2,18536

    movhi r3, %hi(__bss_end)
   2023c:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   20240:	18d26214 	ori	r3,r3,18824

    beq r2, r3, 1f
   20244:	10c00326 	beq	r2,r3,20254 <_start+0x30>

0:
    stw zero, (r2)
   20248:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   2024c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   20250:	10fffd36 	bltu	r2,r3,20248 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20254:	00225080 	call	22508 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20258:	002258c0 	call	2258c <alt_main>

0002025c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   2025c:	003fff06 	br	2025c <alt_after_alt_main>

00020260 <Write32_Data>:
#define SLEEP_TIME 250  //us
#define ACK_SLEEP_TIME 250 //us
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data) {
   20260:	defffb04 	addi	sp,sp,-20
   20264:	df000415 	stw	fp,16(sp)
   20268:	df000404 	addi	fp,sp,16
   2026c:	e13ffe15 	stw	r4,-8(fp)
   20270:	e17ffd15 	stw	r5,-12(fp)
   20274:	e1bffc15 	stw	r6,-16(fp)
	bool bPass;
	IOWR(base_address, offset_address, Data);
   20278:	e0bffd17 	ldw	r2,-12(fp)
   2027c:	100490ba 	slli	r2,r2,2
   20280:	1007883a 	mov	r3,r2
   20284:	e0bffe17 	ldw	r2,-8(fp)
   20288:	1885883a 	add	r2,r3,r2
   2028c:	1007883a 	mov	r3,r2
   20290:	e0bffc17 	ldw	r2,-16(fp)
   20294:	18800035 	stwio	r2,0(r3)
	bPass = TRUE;
   20298:	00800044 	movi	r2,1
   2029c:	e0bfffc5 	stb	r2,-1(fp)
	return bPass;
   202a0:	e0bfffc3 	ldbu	r2,-1(fp)
}
   202a4:	e037883a 	mov	sp,fp
   202a8:	df000017 	ldw	fp,0(sp)
   202ac:	dec00104 	addi	sp,sp,4
   202b0:	f800283a 	ret

000202b4 <Read32_Data>:

bool Read32_Data(alt_32 base_address, alt_32 offset_address, alt_32 *pData32) {
   202b4:	defffb04 	addi	sp,sp,-20
   202b8:	df000415 	stw	fp,16(sp)
   202bc:	df000404 	addi	fp,sp,16
   202c0:	e13ffe15 	stw	r4,-8(fp)
   202c4:	e17ffd15 	stw	r5,-12(fp)
   202c8:	e1bffc15 	stw	r6,-16(fp)
	bool bPass;
	*pData32 = IORD(base_address, offset_address);
   202cc:	e0bffd17 	ldw	r2,-12(fp)
   202d0:	100490ba 	slli	r2,r2,2
   202d4:	1007883a 	mov	r3,r2
   202d8:	e0bffe17 	ldw	r2,-8(fp)
   202dc:	1885883a 	add	r2,r3,r2
   202e0:	10c00037 	ldwio	r3,0(r2)
   202e4:	e0bffc17 	ldw	r2,-16(fp)
   202e8:	10c00015 	stw	r3,0(r2)
	bPass = TRUE;
   202ec:	00800044 	movi	r2,1
   202f0:	e0bfffc5 	stb	r2,-1(fp)
	return bPass;
   202f4:	e0bfffc3 	ldbu	r2,-1(fp)
}
   202f8:	e037883a 	mov	sp,fp
   202fc:	df000017 	ldw	fp,0(sp)
   20300:	dec00104 	addi	sp,sp,4
   20304:	f800283a 	ret

00020308 <oc_i2c_init>:

bool oc_i2c_init(alt_32 i2c_base) {
   20308:	defffa04 	addi	sp,sp,-24
   2030c:	dfc00515 	stw	ra,20(sp)
   20310:	df000415 	stw	fp,16(sp)
   20314:	df000404 	addi	fp,sp,16
   20318:	e13ffc15 	stw	r4,-16(fp)
	bool bSuccess;
	const alt_32 ref_clk = 50 * 1000 * 1000; // 50MHz
   2031c:	0080bef4 	movhi	r2,763
   20320:	10bc2004 	addi	r2,r2,-3968
   20324:	e0bfff15 	stw	r2,-4(fp)
	const alt_32 i2c_clk = 400 * 1000; // 400KHz
   20328:	008001b4 	movhi	r2,6
   2032c:	1086a004 	addi	r2,r2,6784
   20330:	e0bffe15 	stw	r2,-8(fp)

	bSuccess = oc_i2c_init_ex(i2c_base, ref_clk, i2c_clk);
   20334:	e1bffe17 	ldw	r6,-8(fp)
   20338:	e17fff17 	ldw	r5,-4(fp)
   2033c:	e13ffc17 	ldw	r4,-16(fp)
   20340:	00203600 	call	20360 <oc_i2c_init_ex>
   20344:	e0bffdc5 	stb	r2,-9(fp)

	return bSuccess;
   20348:	e0bffdc3 	ldbu	r2,-9(fp)
}
   2034c:	e037883a 	mov	sp,fp
   20350:	dfc00117 	ldw	ra,4(sp)
   20354:	df000017 	ldw	fp,0(sp)
   20358:	dec00204 	addi	sp,sp,8
   2035c:	f800283a 	ret

00020360 <oc_i2c_init_ex>:

bool oc_i2c_init_ex(alt_32 i2c_base, alt_32 ref_clk, alt_32 i2c_clk) {
   20360:	defff704 	addi	sp,sp,-36
   20364:	dfc00815 	stw	ra,32(sp)
   20368:	df000715 	stw	fp,28(sp)
   2036c:	df000704 	addi	fp,sp,28
   20370:	e13ffb15 	stw	r4,-20(fp)
   20374:	e17ffa15 	stw	r5,-24(fp)
   20378:	e1bff915 	stw	r6,-28(fp)
	bool bSuccess = TRUE;
   2037c:	00800044 	movi	r2,1
   20380:	e0bfffc5 	stb	r2,-1(fp)
	alt_32 read_data;
	alt_32 prescale;
	alt_u8 prescale_high;
	alt_u8 prescale_low;
	const alt_u8 ControlValue = 0x80;
   20384:	00bfe004 	movi	r2,-128
   20388:	e0bfff85 	stb	r2,-2(fp)

	// I2c sysclock =50M hz
	// i2c scl max 400k
	//scl =sysclock/(prescale*5)
	prescale = (ref_clk / (5 * i2c_clk)) - 1;
   2038c:	e0fff917 	ldw	r3,-28(fp)
   20390:	1805883a 	mov	r2,r3
   20394:	100490ba 	slli	r2,r2,2
   20398:	10c5883a 	add	r2,r2,r3
   2039c:	100b883a 	mov	r5,r2
   203a0:	e13ffa17 	ldw	r4,-24(fp)
   203a4:	00219b80 	call	219b8 <__divsi3>
   203a8:	10bfffc4 	addi	r2,r2,-1
   203ac:	e0bffe15 	stw	r2,-8(fp)
	prescale_low = prescale & 0xFF;
   203b0:	e0bffe17 	ldw	r2,-8(fp)
   203b4:	e0bffdc5 	stb	r2,-9(fp)
	prescale_high = (prescale >> 8) & 0xFF;
   203b8:	e0bffe17 	ldw	r2,-8(fp)
   203bc:	1005d23a 	srai	r2,r2,8
   203c0:	e0bffd85 	stb	r2,-10(fp)

	IOWR(i2c_base, 0, prescale_low);	//write low byte of  prescale (reg 0)
   203c4:	e0bffb17 	ldw	r2,-20(fp)
   203c8:	e0fffdc3 	ldbu	r3,-9(fp)
   203cc:	10c00035 	stwio	r3,0(r2)
	IOWR(i2c_base, 1, prescale_high);	//write high byte of prescale (reg 1)
   203d0:	e0bffb17 	ldw	r2,-20(fp)
   203d4:	10800104 	addi	r2,r2,4
   203d8:	1007883a 	mov	r3,r2
   203dc:	e0bffd83 	ldbu	r2,-10(fp)
   203e0:	18800035 	stwio	r2,0(r3)

	//enable the I2C core, but disable the IRQ
	IOWR(i2c_base, 2, ControlValue);
   203e4:	e0bffb17 	ldw	r2,-20(fp)
   203e8:	10800204 	addi	r2,r2,8
   203ec:	1007883a 	mov	r3,r2
   203f0:	e0bfff83 	ldbu	r2,-2(fp)
   203f4:	18800035 	stwio	r2,0(r3)

	// check prescale low byte
	if (bSuccess) {
   203f8:	e0bfffc3 	ldbu	r2,-1(fp)
   203fc:	10000826 	beq	r2,zero,20420 <oc_i2c_init_ex+0xc0>
		read_data = IORD(i2c_base, 0);
   20400:	e0bffb17 	ldw	r2,-20(fp)
   20404:	10800037 	ldwio	r2,0(r2)
   20408:	e0bffc15 	stw	r2,-16(fp)
		if ((read_data & 0x00ff) != prescale_low) {
   2040c:	e0bffc17 	ldw	r2,-16(fp)
   20410:	10c03fcc 	andi	r3,r2,255
   20414:	e0bffdc3 	ldbu	r2,-9(fp)
   20418:	18800126 	beq	r3,r2,20420 <oc_i2c_init_ex+0xc0>
			bSuccess = FALSE;
   2041c:	e03fffc5 	stb	zero,-1(fp)
		}
	}

	// check prescale high byte
	if (bSuccess) {
   20420:	e0bfffc3 	ldbu	r2,-1(fp)
   20424:	10000926 	beq	r2,zero,2044c <oc_i2c_init_ex+0xec>
		read_data = IORD(i2c_base, 1);
   20428:	e0bffb17 	ldw	r2,-20(fp)
   2042c:	10800104 	addi	r2,r2,4
   20430:	10800037 	ldwio	r2,0(r2)
   20434:	e0bffc15 	stw	r2,-16(fp)
		if ((read_data & 0x00ff) != prescale_high) {
   20438:	e0bffc17 	ldw	r2,-16(fp)
   2043c:	10c03fcc 	andi	r3,r2,255
   20440:	e0bffd83 	ldbu	r2,-10(fp)
   20444:	18800126 	beq	r3,r2,2044c <oc_i2c_init_ex+0xec>
			bSuccess = FALSE;
   20448:	e03fffc5 	stb	zero,-1(fp)
		}
	}

	// check control
	if (bSuccess) {
   2044c:	e0bfffc3 	ldbu	r2,-1(fp)
   20450:	10000926 	beq	r2,zero,20478 <oc_i2c_init_ex+0x118>
		read_data = IORD(i2c_base, 2);
   20454:	e0bffb17 	ldw	r2,-20(fp)
   20458:	10800204 	addi	r2,r2,8
   2045c:	10800037 	ldwio	r2,0(r2)
   20460:	e0bffc15 	stw	r2,-16(fp)
		if ((read_data & 0x00ff) != ControlValue) {
   20464:	e0bffc17 	ldw	r2,-16(fp)
   20468:	10c03fcc 	andi	r3,r2,255
   2046c:	e0bfff83 	ldbu	r2,-2(fp)
   20470:	18800126 	beq	r3,r2,20478 <oc_i2c_init_ex+0x118>
			bSuccess = FALSE;
   20474:	e03fffc5 	stb	zero,-1(fp)
		}
	}

	if (bSuccess)
   20478:	e0bfffc3 	ldbu	r2,-1(fp)
   2047c:	10000426 	beq	r2,zero,20490 <oc_i2c_init_ex+0x130>
		printf("\nI2C core is enabled! \r\n");
   20480:	010000b4 	movhi	r4,2
   20484:	210f9b04 	addi	r4,r4,15980
   20488:	0021d200 	call	21d20 <puts>
   2048c:	00000306 	br	2049c <oc_i2c_init_ex+0x13c>
	else
		printf("\nI2C core is not enabled successfully! \r\n");
   20490:	010000b4 	movhi	r4,2
   20494:	210fa104 	addi	r4,r4,16004
   20498:	0021d200 	call	21d20 <puts>

	return bSuccess;
   2049c:	e0bfffc3 	ldbu	r2,-1(fp)

}
   204a0:	e037883a 	mov	sp,fp
   204a4:	dfc00117 	ldw	ra,4(sp)
   204a8:	df000017 	ldw	fp,0(sp)
   204ac:	dec00204 	addi	sp,sp,8
   204b0:	f800283a 	ret

000204b4 <oc_i2c_uninit>:

bool oc_i2c_uninit(alt_32 i2c_base) {
   204b4:	defffb04 	addi	sp,sp,-20
   204b8:	dfc00415 	stw	ra,16(sp)
   204bc:	df000315 	stw	fp,12(sp)
   204c0:	df000304 	addi	fp,sp,12
   204c4:	e13ffd15 	stw	r4,-12(fp)
	bool bSuccess = TRUE;
   204c8:	00800044 	movi	r2,1
   204cc:	e0bfffc5 	stb	r2,-1(fp)
	alt_32 read_data;
	const alt_u8 ControlValue = 0x00;
   204d0:	e03fff85 	stb	zero,-2(fp)

	IOWR(i2c_base, 2, ControlValue);
   204d4:	e0bffd17 	ldw	r2,-12(fp)
   204d8:	10800204 	addi	r2,r2,8
   204dc:	1007883a 	mov	r3,r2
   204e0:	e0bfff83 	ldbu	r2,-2(fp)
   204e4:	18800035 	stwio	r2,0(r3)
	read_data = IORD(i2c_base, 2);
   204e8:	e0bffd17 	ldw	r2,-12(fp)
   204ec:	10800204 	addi	r2,r2,8
   204f0:	10800037 	ldwio	r2,0(r2)
   204f4:	e0bffe15 	stw	r2,-8(fp)
	if ((read_data & 0x00ff) != ControlValue) {
   204f8:	e0bffe17 	ldw	r2,-8(fp)
   204fc:	10c03fcc 	andi	r3,r2,255
   20500:	e0bfff83 	ldbu	r2,-2(fp)
   20504:	18800126 	beq	r3,r2,2050c <oc_i2c_uninit+0x58>
		bSuccess = FALSE;
   20508:	e03fffc5 	stb	zero,-1(fp)
	}

	if (bSuccess)
   2050c:	e0bfffc3 	ldbu	r2,-1(fp)
   20510:	10000426 	beq	r2,zero,20524 <oc_i2c_uninit+0x70>
		printf("\nI2C core  is disabled! \r\n");
   20514:	010000b4 	movhi	r4,2
   20518:	210fac04 	addi	r4,r4,16048
   2051c:	0021d200 	call	21d20 <puts>
   20520:	00000306 	br	20530 <oc_i2c_uninit+0x7c>
	else
		printf("\nI2C core is failed to disable! \r\n");
   20524:	010000b4 	movhi	r4,2
   20528:	210fb304 	addi	r4,r4,16076
   2052c:	0021d200 	call	21d20 <puts>

	return bSuccess;
   20530:	e0bfffc3 	ldbu	r2,-1(fp)

}
   20534:	e037883a 	mov	sp,fp
   20538:	dfc00117 	ldw	ra,4(sp)
   2053c:	df000017 	ldw	fp,0(sp)
   20540:	dec00204 	addi	sp,sp,8
   20544:	f800283a 	ret

00020548 <ACK_single_check>:

bool ACK_single_check(alt_32 i2c_base) {
   20548:	defffb04 	addi	sp,sp,-20
   2054c:	dfc00415 	stw	ra,16(sp)
   20550:	df000315 	stw	fp,12(sp)
   20554:	df000304 	addi	fp,sp,12
   20558:	e13ffd15 	stw	r4,-12(fp)
	bool bSuccess = TRUE;
   2055c:	00800044 	movi	r2,1
   20560:	e0bfffc5 	stb	r2,-1(fp)
	alt_32 read_data;

	usleep(ACK_SLEEP_TIME);
   20564:	01003e84 	movi	r4,250
   20568:	00226080 	call	22608 <usleep>
	read_data = IORD(i2c_base, 4);
   2056c:	e0bffd17 	ldw	r2,-12(fp)
   20570:	10800404 	addi	r2,r2,16
   20574:	10800037 	ldwio	r2,0(r2)
   20578:	e0bffe15 	stw	r2,-8(fp)
	if (read_data & 0x02)
   2057c:	e0bffe17 	ldw	r2,-8(fp)
   20580:	1080008c 	andi	r2,r2,2
   20584:	10000126 	beq	r2,zero,2058c <ACK_single_check+0x44>
		bSuccess = FALSE;
   20588:	e03fffc5 	stb	zero,-1(fp)
	if (bSuccess) {
   2058c:	e0bfffc3 	ldbu	r2,-1(fp)
   20590:	10000a26 	beq	r2,zero,205bc <ACK_single_check+0x74>
		usleep(ACK_SLEEP_TIME);
   20594:	01003e84 	movi	r4,250
   20598:	00226080 	call	22608 <usleep>
		read_data = IORD(i2c_base, 4);
   2059c:	e0bffd17 	ldw	r2,-12(fp)
   205a0:	10800404 	addi	r2,r2,16
   205a4:	10800037 	ldwio	r2,0(r2)
   205a8:	e0bffe15 	stw	r2,-8(fp)
		if (read_data & 0x80)
   205ac:	e0bffe17 	ldw	r2,-8(fp)
   205b0:	1080200c 	andi	r2,r2,128
   205b4:	10000126 	beq	r2,zero,205bc <ACK_single_check+0x74>
			bSuccess = FALSE;
   205b8:	e03fffc5 	stb	zero,-1(fp)
	}
	return bSuccess;
   205bc:	e0bfffc3 	ldbu	r2,-1(fp)
}
   205c0:	e037883a 	mov	sp,fp
   205c4:	dfc00117 	ldw	ra,4(sp)
   205c8:	df000017 	ldw	fp,0(sp)
   205cc:	dec00204 	addi	sp,sp,8
   205d0:	f800283a 	ret

000205d4 <ACK_check>:

bool ACK_check(alt_32 i2c_base) {
   205d4:	defffb04 	addi	sp,sp,-20
   205d8:	dfc00415 	stw	ra,16(sp)
   205dc:	df000315 	stw	fp,12(sp)
   205e0:	df000304 	addi	fp,sp,12
   205e4:	e13ffd15 	stw	r4,-12(fp)
	bool bSuccess = FALSE;
   205e8:	e03fffc5 	stb	zero,-1(fp)
	int i = 0;
   205ec:	e03ffe15 	stw	zero,-8(fp)

	while (!bSuccess && i++ < 10) {
   205f0:	00000306 	br	20600 <ACK_check+0x2c>
		bSuccess = ACK_single_check(i2c_base);
   205f4:	e13ffd17 	ldw	r4,-12(fp)
   205f8:	00205480 	call	20548 <ACK_single_check>
   205fc:	e0bfffc5 	stb	r2,-1(fp)
	while (!bSuccess && i++ < 10) {
   20600:	e0bfffc3 	ldbu	r2,-1(fp)
   20604:	1080005c 	xori	r2,r2,1
   20608:	10803fcc 	andi	r2,r2,255
   2060c:	10000526 	beq	r2,zero,20624 <ACK_check+0x50>
   20610:	e0bffe17 	ldw	r2,-8(fp)
   20614:	10c00044 	addi	r3,r2,1
   20618:	e0fffe15 	stw	r3,-8(fp)
   2061c:	10800290 	cmplti	r2,r2,10
   20620:	103ff41e 	bne	r2,zero,205f4 <ACK_check+0x20>
		//  if (!bSuccess)
		//	printf("no ack2 !!!!!!!!!!!!!!!!!!!!, i=%d\r\n", i);

	}

	return bSuccess;
   20624:	e0bfffc3 	ldbu	r2,-1(fp)
}
   20628:	e037883a 	mov	sp,fp
   2062c:	dfc00117 	ldw	ra,4(sp)
   20630:	df000017 	ldw	fp,0(sp)
   20634:	dec00204 	addi	sp,sp,8
   20638:	f800283a 	ret

0002063c <OC_I2C_Write>:

bool OC_I2C_Write(alt_32 i2c_base, alt_u8 device_address, alt_u8 sub_address,
		alt_u8 *pData, int nWriteLength) {
   2063c:	defff904 	addi	sp,sp,-28
   20640:	dfc00615 	stw	ra,24(sp)
   20644:	df000515 	stw	fp,20(sp)
   20648:	df000504 	addi	fp,sp,20
   2064c:	e13ffe15 	stw	r4,-8(fp)
   20650:	2805883a 	mov	r2,r5
   20654:	3007883a 	mov	r3,r6
   20658:	e1fffb15 	stw	r7,-20(fp)
   2065c:	e0bffd05 	stb	r2,-12(fp)
   20660:	1805883a 	mov	r2,r3
   20664:	e0bffc05 	stb	r2,-16(fp)
	//DWORD reg_data = 0x0;
	int i;

	//set the tx reg audio chip dev address with write bit
	if (!Write32_Data(i2c_base, 3, device_address)) {
   20668:	e0bffd03 	ldbu	r2,-12(fp)
   2066c:	100d883a 	mov	r6,r2
   20670:	014000c4 	movi	r5,3
   20674:	e13ffe17 	ldw	r4,-8(fp)
   20678:	00202600 	call	20260 <Write32_Data>
   2067c:	1080005c 	xori	r2,r2,1
   20680:	10803fcc 	andi	r2,r2,255
   20684:	10000526 	beq	r2,zero,2069c <OC_I2C_Write+0x60>
		printf("OC_I2C_Write error[0]\r\n");
   20688:	010000b4 	movhi	r4,2
   2068c:	210fbc04 	addi	r4,r4,16112
   20690:	0021d200 	call	21d20 <puts>
		return FALSE;
   20694:	0005883a 	mov	r2,zero
   20698:	00007706 	br	20878 <OC_I2C_Write+0x23c>
	}
	//set STA and WR bits(bit7 and bit4)
	if (!Write32_Data(i2c_base, 4, 0x90)) {
   2069c:	01802404 	movi	r6,144
   206a0:	01400104 	movi	r5,4
   206a4:	e13ffe17 	ldw	r4,-8(fp)
   206a8:	00202600 	call	20260 <Write32_Data>
   206ac:	1080005c 	xori	r2,r2,1
   206b0:	10803fcc 	andi	r2,r2,255
   206b4:	10000526 	beq	r2,zero,206cc <OC_I2C_Write+0x90>
		printf("OC_I2C_Write error[1]\r\n");
   206b8:	010000b4 	movhi	r4,2
   206bc:	210fc204 	addi	r4,r4,16136
   206c0:	0021d200 	call	21d20 <puts>
		return FALSE;
   206c4:	0005883a 	mov	r2,zero
   206c8:	00006b06 	br	20878 <OC_I2C_Write+0x23c>
	}

	//wait TIP bit go to 0 to end Tx
	if (!ACK_check(i2c_base)) {
   206cc:	e13ffe17 	ldw	r4,-8(fp)
   206d0:	00205d40 	call	205d4 <ACK_check>
   206d4:	1080005c 	xori	r2,r2,1
   206d8:	10803fcc 	andi	r2,r2,255
   206dc:	10000526 	beq	r2,zero,206f4 <OC_I2C_Write+0xb8>
		printf("OC_I2C_Write error[2]\r\n");
   206e0:	010000b4 	movhi	r4,2
   206e4:	210fc804 	addi	r4,r4,16160
   206e8:	0021d200 	call	21d20 <puts>
		return FALSE;
   206ec:	0005883a 	mov	r2,zero
   206f0:	00006106 	br	20878 <OC_I2C_Write+0x23c>
	}
	// printf("\n receive ACK-device address! \n");

	//set the txr reg data with reg address + 1 data MSB
	if (!Write32_Data(i2c_base, 3, sub_address)) {
   206f4:	e0bffc03 	ldbu	r2,-16(fp)
   206f8:	100d883a 	mov	r6,r2
   206fc:	014000c4 	movi	r5,3
   20700:	e13ffe17 	ldw	r4,-8(fp)
   20704:	00202600 	call	20260 <Write32_Data>
   20708:	1080005c 	xori	r2,r2,1
   2070c:	10803fcc 	andi	r2,r2,255
   20710:	10000526 	beq	r2,zero,20728 <OC_I2C_Write+0xec>
		printf("OC_I2C_Write error[3]\r\n");
   20714:	010000b4 	movhi	r4,2
   20718:	210fce04 	addi	r4,r4,16184
   2071c:	0021d200 	call	21d20 <puts>
		return FALSE;
   20720:	0005883a 	mov	r2,zero
   20724:	00005406 	br	20878 <OC_I2C_Write+0x23c>
	}

	//set WR bits(bit4)
	if (!Write32_Data(i2c_base, 4, 0x10)) {
   20728:	01800404 	movi	r6,16
   2072c:	01400104 	movi	r5,4
   20730:	e13ffe17 	ldw	r4,-8(fp)
   20734:	00202600 	call	20260 <Write32_Data>
   20738:	1080005c 	xori	r2,r2,1
   2073c:	10803fcc 	andi	r2,r2,255
   20740:	10000526 	beq	r2,zero,20758 <OC_I2C_Write+0x11c>
		printf("OC_I2C_Write error[4]\r\n");
   20744:	010000b4 	movhi	r4,2
   20748:	210fd404 	addi	r4,r4,16208
   2074c:	0021d200 	call	21d20 <puts>
		return FALSE;
   20750:	0005883a 	mov	r2,zero
   20754:	00004806 	br	20878 <OC_I2C_Write+0x23c>
	}

	//wait TIP bit go to 0 to end Tx
	if (!ACK_check(i2c_base)) {
   20758:	e13ffe17 	ldw	r4,-8(fp)
   2075c:	00205d40 	call	205d4 <ACK_check>
   20760:	1080005c 	xori	r2,r2,1
   20764:	10803fcc 	andi	r2,r2,255
   20768:	10000526 	beq	r2,zero,20780 <OC_I2C_Write+0x144>
		printf("OC_I2C_Write error[5]\r\n");
   2076c:	010000b4 	movhi	r4,2
   20770:	210fda04 	addi	r4,r4,16232
   20774:	0021d200 	call	21d20 <puts>
		return FALSE;
   20778:	0005883a 	mov	r2,zero
   2077c:	00003e06 	br	20878 <OC_I2C_Write+0x23c>
	}
	//  printf("\n receive ACK-reg address! \n");

#if 1
//        for( i=nWriteLength-1;i>=0;i--){
	for (i = 0; i < nWriteLength; i++) {
   20780:	e03fff15 	stw	zero,-4(fp)
   20784:	00002a06 	br	20830 <OC_I2C_Write+0x1f4>
		//set the txr reg data with the data
		if (!Write32_Data(i2c_base, 3, *(pData + i))) {
   20788:	e0bfff17 	ldw	r2,-4(fp)
   2078c:	e0fffb17 	ldw	r3,-20(fp)
   20790:	1885883a 	add	r2,r3,r2
   20794:	10800003 	ldbu	r2,0(r2)
   20798:	10803fcc 	andi	r2,r2,255
   2079c:	100d883a 	mov	r6,r2
   207a0:	014000c4 	movi	r5,3
   207a4:	e13ffe17 	ldw	r4,-8(fp)
   207a8:	00202600 	call	20260 <Write32_Data>
   207ac:	1080005c 	xori	r2,r2,1
   207b0:	10803fcc 	andi	r2,r2,255
   207b4:	10000526 	beq	r2,zero,207cc <OC_I2C_Write+0x190>
			printf("OC_I2C_Write error[6]\r\n");
   207b8:	010000b4 	movhi	r4,2
   207bc:	210fe004 	addi	r4,r4,16256
   207c0:	0021d200 	call	21d20 <puts>
			return FALSE;
   207c4:	0005883a 	mov	r2,zero
   207c8:	00002b06 	br	20878 <OC_I2C_Write+0x23c>
		}

		//set STO and WR bits(bit7 and bit4)
		if (!Write32_Data(i2c_base, 4, 0x10)) {
   207cc:	01800404 	movi	r6,16
   207d0:	01400104 	movi	r5,4
   207d4:	e13ffe17 	ldw	r4,-8(fp)
   207d8:	00202600 	call	20260 <Write32_Data>
   207dc:	1080005c 	xori	r2,r2,1
   207e0:	10803fcc 	andi	r2,r2,255
   207e4:	10000526 	beq	r2,zero,207fc <OC_I2C_Write+0x1c0>
			printf("OC_I2C_Write error[7]\r\n");
   207e8:	010000b4 	movhi	r4,2
   207ec:	210fe604 	addi	r4,r4,16280
   207f0:	0021d200 	call	21d20 <puts>
			return FALSE;
   207f4:	0005883a 	mov	r2,zero
   207f8:	00001f06 	br	20878 <OC_I2C_Write+0x23c>
		}

		//wait TIP bit go to 0 to end Tx
		if (!ACK_check(i2c_base)) {
   207fc:	e13ffe17 	ldw	r4,-8(fp)
   20800:	00205d40 	call	205d4 <ACK_check>
   20804:	1080005c 	xori	r2,r2,1
   20808:	10803fcc 	andi	r2,r2,255
   2080c:	10000526 	beq	r2,zero,20824 <OC_I2C_Write+0x1e8>
			printf("OC_I2C_Write error[8]\r\n");
   20810:	010000b4 	movhi	r4,2
   20814:	210fec04 	addi	r4,r4,16304
   20818:	0021d200 	call	21d20 <puts>
			return FALSE;
   2081c:	0005883a 	mov	r2,zero
   20820:	00001506 	br	20878 <OC_I2C_Write+0x23c>
	for (i = 0; i < nWriteLength; i++) {
   20824:	e0bfff17 	ldw	r2,-4(fp)
   20828:	10800044 	addi	r2,r2,1
   2082c:	e0bfff15 	stw	r2,-4(fp)
   20830:	e0ffff17 	ldw	r3,-4(fp)
   20834:	e0800217 	ldw	r2,8(fp)
   20838:	18bfd316 	blt	r3,r2,20788 <OC_I2C_Write+0x14c>
	//wait TIP bit go to 0 to end Tx
	if(!ACK_check( i2c_base))
	return false;
#endif

	if (!Write32_Data(i2c_base, 4, 0x40)) {
   2083c:	01801004 	movi	r6,64
   20840:	01400104 	movi	r5,4
   20844:	e13ffe17 	ldw	r4,-8(fp)
   20848:	00202600 	call	20260 <Write32_Data>
   2084c:	1080005c 	xori	r2,r2,1
   20850:	10803fcc 	andi	r2,r2,255
   20854:	10000526 	beq	r2,zero,2086c <OC_I2C_Write+0x230>
		printf("OC_I2C_Write error[9]\r\n");
   20858:	010000b4 	movhi	r4,2
   2085c:	210ff204 	addi	r4,r4,16328
   20860:	0021d200 	call	21d20 <puts>
		return FALSE;
   20864:	0005883a 	mov	r2,zero
   20868:	00000306 	br	20878 <OC_I2C_Write+0x23c>
	}
	//Sleep(10);
	//OS_msleep(1);
	usleep(SLEEP_TIME);
   2086c:	01003e84 	movi	r4,250
   20870:	00226080 	call	22608 <usleep>

	// printf("\n receive ACK-data! \n");

	return TRUE;
   20874:	00800044 	movi	r2,1

}
   20878:	e037883a 	mov	sp,fp
   2087c:	dfc00117 	ldw	ra,4(sp)
   20880:	df000017 	ldw	fp,0(sp)
   20884:	dec00204 	addi	sp,sp,8
   20888:	f800283a 	ret

0002088c <ACK_judge_for_read>:

bool ACK_judge_for_read(alt_32 i2c_base) {
   2088c:	defffb04 	addi	sp,sp,-20
   20890:	dfc00415 	stw	ra,16(sp)
   20894:	df000315 	stw	fp,12(sp)
   20898:	df000304 	addi	fp,sp,12
   2089c:	e13ffd15 	stw	r4,-12(fp)
	bool bSuccess;
	alt_32 this_data;

	// OS_msleep( SLEEP_TIME );
	usleep(ACK_SLEEP_TIME);
   208a0:	01003e84 	movi	r4,250
   208a4:	00226080 	call	22608 <usleep>
	//   while(this_data & 0x02)
//   {
//      this_data =  Read32_Data ( hPCIe, i2c_base, 4);
//   }
	bSuccess = Read32_Data(i2c_base, 4, &this_data);
   208a8:	e0bffe04 	addi	r2,fp,-8
   208ac:	100d883a 	mov	r6,r2
   208b0:	01400104 	movi	r5,4
   208b4:	e13ffd17 	ldw	r4,-12(fp)
   208b8:	00202b40 	call	202b4 <Read32_Data>
   208bc:	e0bfffc5 	stb	r2,-1(fp)
	if (bSuccess) {
   208c0:	e0bfffc3 	ldbu	r2,-1(fp)
   208c4:	10000426 	beq	r2,zero,208d8 <ACK_judge_for_read+0x4c>
		if (this_data & 0x02)
   208c8:	e0bffe17 	ldw	r2,-8(fp)
   208cc:	1080008c 	andi	r2,r2,2
   208d0:	10000126 	beq	r2,zero,208d8 <ACK_judge_for_read+0x4c>
			bSuccess = FALSE;
   208d4:	e03fffc5 	stb	zero,-1(fp)
	}
	//wait the rx ACK signal 0-valid

	return bSuccess;
   208d8:	e0bfffc3 	ldbu	r2,-1(fp)

}
   208dc:	e037883a 	mov	sp,fp
   208e0:	dfc00117 	ldw	ra,4(sp)
   208e4:	df000017 	ldw	fp,0(sp)
   208e8:	dec00204 	addi	sp,sp,8
   208ec:	f800283a 	ret

000208f0 <OC_I2C_Read>:

bool OC_I2C_Read(alt_32 i2c_base, alt_u8 device_address, alt_u8 sub_address,
		alt_u8 *pData8, int nReadLength) {
   208f0:	defff804 	addi	sp,sp,-32
   208f4:	dfc00715 	stw	ra,28(sp)
   208f8:	df000615 	stw	fp,24(sp)
   208fc:	df000604 	addi	fp,sp,24
   20900:	e13ffd15 	stw	r4,-12(fp)
   20904:	2805883a 	mov	r2,r5
   20908:	3007883a 	mov	r3,r6
   2090c:	e1fffa15 	stw	r7,-24(fp)
   20910:	e0bffc05 	stb	r2,-16(fp)
   20914:	1805883a 	mov	r2,r3
   20918:	e0bffb05 	stb	r2,-20(fp)
	//BYTE data = 0x0;
	alt_32 Data32;
	int i;

	//set the tx reg audio chip dev address with write bit
	IOWR(i2c_base, 3, device_address);
   2091c:	e0bffd17 	ldw	r2,-12(fp)
   20920:	10800304 	addi	r2,r2,12
   20924:	1007883a 	mov	r3,r2
   20928:	e0bffc03 	ldbu	r2,-16(fp)
   2092c:	18800035 	stwio	r2,0(r3)
	//set STA and WR bits(bit7 and bit4)
	IOWR(i2c_base, 4, 0x90);
   20930:	e0bffd17 	ldw	r2,-12(fp)
   20934:	10800404 	addi	r2,r2,16
   20938:	1007883a 	mov	r3,r2
   2093c:	00802404 	movi	r2,144
   20940:	18800035 	stwio	r2,0(r3)
	//wait TIP bit go to 0 to end Tx
	if (!ACK_check(i2c_base)) {
   20944:	e13ffd17 	ldw	r4,-12(fp)
   20948:	00205d40 	call	205d4 <ACK_check>
   2094c:	1080005c 	xori	r2,r2,1
   20950:	10803fcc 	andi	r2,r2,255
   20954:	10000526 	beq	r2,zero,2096c <OC_I2C_Read+0x7c>
		printf("OC_I2C_Read error[2]\r\n");
   20958:	010000b4 	movhi	r4,2
   2095c:	210ff804 	addi	r4,r4,16352
   20960:	0021d200 	call	21d20 <puts>
		return FALSE;
   20964:	0005883a 	mov	r2,zero
   20968:	00005806 	br	20acc <OC_I2C_Read+0x1dc>
	}
	IOWR(i2c_base, 3, sub_address);
   2096c:	e0bffd17 	ldw	r2,-12(fp)
   20970:	10800304 	addi	r2,r2,12
   20974:	1007883a 	mov	r3,r2
   20978:	e0bffb03 	ldbu	r2,-20(fp)
   2097c:	18800035 	stwio	r2,0(r3)

	//set WR bits(bit4)
	IOWR(i2c_base, 4, 0x10);
   20980:	e0bffd17 	ldw	r2,-12(fp)
   20984:	10800404 	addi	r2,r2,16
   20988:	1007883a 	mov	r3,r2
   2098c:	00800404 	movi	r2,16
   20990:	18800035 	stwio	r2,0(r3)
	//wait TIP bit go to 0 to end Tx
	if (!ACK_check(i2c_base)) {
   20994:	e13ffd17 	ldw	r4,-12(fp)
   20998:	00205d40 	call	205d4 <ACK_check>
   2099c:	1080005c 	xori	r2,r2,1
   209a0:	10803fcc 	andi	r2,r2,255
   209a4:	10000526 	beq	r2,zero,209bc <OC_I2C_Read+0xcc>
		printf("OC_I2C_Read error[5]\r\n");
   209a8:	010000b4 	movhi	r4,2
   209ac:	210ffe04 	addi	r4,r4,16376
   209b0:	0021d200 	call	21d20 <puts>
		return FALSE;
   209b4:	0005883a 	mov	r2,zero
   209b8:	00004406 	br	20acc <OC_I2C_Read+0x1dc>
	 */

	// printf("\n read receive ACK-reg address! \n");
	//read
	//set the tx reg audio chip dev address with read bit 1
	IOWR(i2c_base, 3, device_address | 0x01);
   209bc:	e0bffd17 	ldw	r2,-12(fp)
   209c0:	10800304 	addi	r2,r2,12
   209c4:	1007883a 	mov	r3,r2
   209c8:	e0bffc03 	ldbu	r2,-16(fp)
   209cc:	10800054 	ori	r2,r2,1
   209d0:	10803fcc 	andi	r2,r2,255
   209d4:	18800035 	stwio	r2,0(r3)

	//set STA and WR bits(bit7 and bit4)
	IOWR(i2c_base, 4, 0x90);
   209d8:	e0bffd17 	ldw	r2,-12(fp)
   209dc:	10800404 	addi	r2,r2,16
   209e0:	1007883a 	mov	r3,r2
   209e4:	00802404 	movi	r2,144
   209e8:	18800035 	stwio	r2,0(r3)

	//wait TIP bit go to 0 to end Tx
	if (!ACK_check(i2c_base)) {
   209ec:	e13ffd17 	ldw	r4,-12(fp)
   209f0:	00205d40 	call	205d4 <ACK_check>
   209f4:	1080005c 	xori	r2,r2,1
   209f8:	10803fcc 	andi	r2,r2,255
   209fc:	10000526 	beq	r2,zero,20a14 <OC_I2C_Read+0x124>
		printf("OC_I2C_Read error[8]\r\n");
   20a00:	010000b4 	movhi	r4,2
   20a04:	21100404 	addi	r4,r4,16400
   20a08:	0021d200 	call	21d20 <puts>
		return FALSE;
   20a0c:	0005883a 	mov	r2,zero
   20a10:	00002e06 	br	20acc <OC_I2C_Read+0x1dc>
	}

	for (i = 0; i < nReadLength; i++) {
   20a14:	e03fff15 	stw	zero,-4(fp)
   20a18:	00002106 	br	20aa0 <OC_I2C_Read+0x1b0>
		// printf("\n read receive ACK-device address(read)! \n");
		//set the RD and ACK bit(bit5 and bit3)
		IOWR(i2c_base, 4, ((i + 1) == nReadLength) ? 0x28 : 0x20);
   20a1c:	e0bffd17 	ldw	r2,-12(fp)
   20a20:	10800404 	addi	r2,r2,16
   20a24:	1009883a 	mov	r4,r2
   20a28:	e0bfff17 	ldw	r2,-4(fp)
   20a2c:	10800044 	addi	r2,r2,1
   20a30:	e0c00217 	ldw	r3,8(fp)
   20a34:	1880021e 	bne	r3,r2,20a40 <OC_I2C_Read+0x150>
   20a38:	00800a04 	movi	r2,40
   20a3c:	00000106 	br	20a44 <OC_I2C_Read+0x154>
   20a40:	00800804 	movi	r2,32
   20a44:	20800035 	stwio	r2,0(r4)

		if (!ACK_judge_for_read(i2c_base)) {
   20a48:	e13ffd17 	ldw	r4,-12(fp)
   20a4c:	002088c0 	call	2088c <ACK_judge_for_read>
   20a50:	1080005c 	xori	r2,r2,1
   20a54:	10803fcc 	andi	r2,r2,255
   20a58:	10000526 	beq	r2,zero,20a70 <OC_I2C_Read+0x180>
			printf("OC_I2C_Read error[10]\r\n");
   20a5c:	010000b4 	movhi	r4,2
   20a60:	21100a04 	addi	r4,r4,16424
   20a64:	0021d200 	call	21d20 <puts>
			return FALSE;
   20a68:	0005883a 	mov	r2,zero
   20a6c:	00001706 	br	20acc <OC_I2C_Read+0x1dc>
		}
		// printf("\n read receive ACK-device address(read)! \n");

		Data32 = IORD(i2c_base, 3);
   20a70:	e0bffd17 	ldw	r2,-12(fp)
   20a74:	10800304 	addi	r2,r2,12
   20a78:	10800037 	ldwio	r2,0(r2)
   20a7c:	e0bffe15 	stw	r2,-8(fp)
//        printf("Data32_%d: %d\n", i, Data32);
		*(pData8 + i) = Data32 & 0xff;
   20a80:	e0bfff17 	ldw	r2,-4(fp)
   20a84:	e0fffa17 	ldw	r3,-24(fp)
   20a88:	1885883a 	add	r2,r3,r2
   20a8c:	e0fffe17 	ldw	r3,-8(fp)
   20a90:	10c00005 	stb	r3,0(r2)
	for (i = 0; i < nReadLength; i++) {
   20a94:	e0bfff17 	ldw	r2,-4(fp)
   20a98:	10800044 	addi	r2,r2,1
   20a9c:	e0bfff15 	stw	r2,-4(fp)
   20aa0:	e0ffff17 	ldw	r3,-4(fp)
   20aa4:	e0800217 	ldw	r2,8(fp)
   20aa8:	18bfdc16 	blt	r3,r2,20a1c <OC_I2C_Read+0x12c>
	}

	IOWR(i2c_base, 4, 0x40);
   20aac:	e0bffd17 	ldw	r2,-12(fp)
   20ab0:	10800404 	addi	r2,r2,16
   20ab4:	1007883a 	mov	r3,r2
   20ab8:	00801004 	movi	r2,64
   20abc:	18800035 	stwio	r2,0(r3)

	// Sleep(10);
	//OS_msleep(1);
	usleep(SLEEP_TIME);
   20ac0:	01003e84 	movi	r4,250
   20ac4:	00226080 	call	22608 <usleep>
	//  printf(" Read  [%02X] = %02Xh\r\n", sub_address, data);

	return TRUE;
   20ac8:	00800044 	movi	r2,1

}
   20acc:	e037883a 	mov	sp,fp
   20ad0:	dfc00117 	ldw	ra,4(sp)
   20ad4:	df000017 	ldw	fp,0(sp)
   20ad8:	dec00204 	addi	sp,sp,8
   20adc:	f800283a 	ret

00020ae0 <OC_I2C_Write_Addr>:

bool OC_I2C_Write_Addr(alt_32 i2c_base, alt_u8 device_address,
		alt_u8 sub_address, bool bStop) {
   20ae0:	defffa04 	addi	sp,sp,-24
   20ae4:	dfc00515 	stw	ra,20(sp)
   20ae8:	df000415 	stw	fp,16(sp)
   20aec:	df000404 	addi	fp,sp,16
   20af0:	e13fff15 	stw	r4,-4(fp)
   20af4:	2805883a 	mov	r2,r5
   20af8:	3009883a 	mov	r4,r6
   20afc:	3807883a 	mov	r3,r7
   20b00:	e0bffe05 	stb	r2,-8(fp)
   20b04:	2005883a 	mov	r2,r4
   20b08:	e0bffd05 	stb	r2,-12(fp)
   20b0c:	1805883a 	mov	r2,r3
   20b10:	e0bffc05 	stb	r2,-16(fp)
	//BYTE data = 0x0;
	alt_32 Data32;
	int i;

	//set the tx reg audio chip dev address with write bit
	IOWR(i2c_base, 3, device_address);
   20b14:	e0bfff17 	ldw	r2,-4(fp)
   20b18:	10800304 	addi	r2,r2,12
   20b1c:	1007883a 	mov	r3,r2
   20b20:	e0bffe03 	ldbu	r2,-8(fp)
   20b24:	18800035 	stwio	r2,0(r3)
	//set STA and WR bits(bit7 and bit4)
	IOWR(i2c_base, 4, 0x90);
   20b28:	e0bfff17 	ldw	r2,-4(fp)
   20b2c:	10800404 	addi	r2,r2,16
   20b30:	1007883a 	mov	r3,r2
   20b34:	00802404 	movi	r2,144
   20b38:	18800035 	stwio	r2,0(r3)
	//wait TIP bit go to 0 to end Tx
	if (!ACK_check(i2c_base)) {
   20b3c:	e13fff17 	ldw	r4,-4(fp)
   20b40:	00205d40 	call	205d4 <ACK_check>
   20b44:	1080005c 	xori	r2,r2,1
   20b48:	10803fcc 	andi	r2,r2,255
   20b4c:	10000526 	beq	r2,zero,20b64 <OC_I2C_Write_Addr+0x84>
		printf("OC_I2C_Read error[2]\r\n");
   20b50:	010000b4 	movhi	r4,2
   20b54:	210ff804 	addi	r4,r4,16352
   20b58:	0021d200 	call	21d20 <puts>
		return FALSE;
   20b5c:	0005883a 	mov	r2,zero
   20b60:	00001e06 	br	20bdc <OC_I2C_Write_Addr+0xfc>
	}
	IOWR(i2c_base, 3, sub_address);
   20b64:	e0bfff17 	ldw	r2,-4(fp)
   20b68:	10800304 	addi	r2,r2,12
   20b6c:	1007883a 	mov	r3,r2
   20b70:	e0bffd03 	ldbu	r2,-12(fp)
   20b74:	18800035 	stwio	r2,0(r3)

	//set WR bits(bit4)
	IOWR(i2c_base, 4, 0x10);
   20b78:	e0bfff17 	ldw	r2,-4(fp)
   20b7c:	10800404 	addi	r2,r2,16
   20b80:	1007883a 	mov	r3,r2
   20b84:	00800404 	movi	r2,16
   20b88:	18800035 	stwio	r2,0(r3)
	//wait TIP bit go to 0 to end Tx
	if (!ACK_check(i2c_base)) {
   20b8c:	e13fff17 	ldw	r4,-4(fp)
   20b90:	00205d40 	call	205d4 <ACK_check>
   20b94:	1080005c 	xori	r2,r2,1
   20b98:	10803fcc 	andi	r2,r2,255
   20b9c:	10000526 	beq	r2,zero,20bb4 <OC_I2C_Write_Addr+0xd4>
		printf("OC_I2C_Read error[5]\r\n");
   20ba0:	010000b4 	movhi	r4,2
   20ba4:	210ffe04 	addi	r4,r4,16376
   20ba8:	0021d200 	call	21d20 <puts>
		return FALSE;
   20bac:	0005883a 	mov	r2,zero
   20bb0:	00000a06 	br	20bdc <OC_I2C_Write_Addr+0xfc>
	}

	if (bStop) {
   20bb4:	e0bffc03 	ldbu	r2,-16(fp)
   20bb8:	10000726 	beq	r2,zero,20bd8 <OC_I2C_Write_Addr+0xf8>
		IOWR(i2c_base, 4, 0x40);
   20bbc:	e0bfff17 	ldw	r2,-4(fp)
   20bc0:	10800404 	addi	r2,r2,16
   20bc4:	1007883a 	mov	r3,r2
   20bc8:	00801004 	movi	r2,64
   20bcc:	18800035 	stwio	r2,0(r3)
		usleep(SLEEP_TIME);
   20bd0:	01003e84 	movi	r4,250
   20bd4:	00226080 	call	22608 <usleep>
	}

	return TRUE;
   20bd8:	00800044 	movi	r2,1

}
   20bdc:	e037883a 	mov	sp,fp
   20be0:	dfc00117 	ldw	ra,4(sp)
   20be4:	df000017 	ldw	fp,0(sp)
   20be8:	dec00204 	addi	sp,sp,8
   20bec:	f800283a 	ret

00020bf0 <OC_I2C_Read_Continue>:

bool OC_I2C_Read_Continue(alt_32 i2c_base, alt_u8 device_address,
		alt_u8 *pData8, int nReadLength) {
   20bf0:	defff804 	addi	sp,sp,-32
   20bf4:	dfc00715 	stw	ra,28(sp)
   20bf8:	df000615 	stw	fp,24(sp)
   20bfc:	df000604 	addi	fp,sp,24
   20c00:	e13ffd15 	stw	r4,-12(fp)
   20c04:	2805883a 	mov	r2,r5
   20c08:	e1bffb15 	stw	r6,-20(fp)
   20c0c:	e1fffa15 	stw	r7,-24(fp)
   20c10:	e0bffc05 	stb	r2,-16(fp)
	int i;
	alt_u32 Data32;

	IOWR(i2c_base, 3, device_address | 0x01);
   20c14:	e0bffd17 	ldw	r2,-12(fp)
   20c18:	10800304 	addi	r2,r2,12
   20c1c:	1007883a 	mov	r3,r2
   20c20:	e0bffc03 	ldbu	r2,-16(fp)
   20c24:	10800054 	ori	r2,r2,1
   20c28:	10803fcc 	andi	r2,r2,255
   20c2c:	18800035 	stwio	r2,0(r3)

	//set STA and WR bits(bit7 and bit4)
	IOWR(i2c_base, 4, 0x90);
   20c30:	e0bffd17 	ldw	r2,-12(fp)
   20c34:	10800404 	addi	r2,r2,16
   20c38:	1007883a 	mov	r3,r2
   20c3c:	00802404 	movi	r2,144
   20c40:	18800035 	stwio	r2,0(r3)
//usleep(5*1000);
	//wait TIP bit go to 0 to end Tx
	if (!ACK_check(i2c_base)) {
   20c44:	e13ffd17 	ldw	r4,-12(fp)
   20c48:	00205d40 	call	205d4 <ACK_check>
   20c4c:	1080005c 	xori	r2,r2,1
   20c50:	10803fcc 	andi	r2,r2,255
   20c54:	10000526 	beq	r2,zero,20c6c <OC_I2C_Read_Continue+0x7c>
		printf("OC_I2C_Read error[8]\r\n");
   20c58:	010000b4 	movhi	r4,2
   20c5c:	21100404 	addi	r4,r4,16400
   20c60:	0021d200 	call	21d20 <puts>
		return FALSE;
   20c64:	0005883a 	mov	r2,zero
   20c68:	00002e06 	br	20d24 <OC_I2C_Read_Continue+0x134>
	}

	for (i = 0; i < nReadLength; i++) {
   20c6c:	e03fff15 	stw	zero,-4(fp)
   20c70:	00002106 	br	20cf8 <OC_I2C_Read_Continue+0x108>
		// printf("\n read receive ACK-device address(read)! \n");
		//set the RD and ACK bit(bit5 and bit3)
		IOWR(i2c_base, 4, ((i + 1) == nReadLength) ? 0x28 : 0x20);
   20c74:	e0bffd17 	ldw	r2,-12(fp)
   20c78:	10800404 	addi	r2,r2,16
   20c7c:	1009883a 	mov	r4,r2
   20c80:	e0bfff17 	ldw	r2,-4(fp)
   20c84:	10800044 	addi	r2,r2,1
   20c88:	e0fffa17 	ldw	r3,-24(fp)
   20c8c:	1880021e 	bne	r3,r2,20c98 <OC_I2C_Read_Continue+0xa8>
   20c90:	00800a04 	movi	r2,40
   20c94:	00000106 	br	20c9c <OC_I2C_Read_Continue+0xac>
   20c98:	00800804 	movi	r2,32
   20c9c:	20800035 	stwio	r2,0(r4)

		if (!ACK_judge_for_read(i2c_base)) {
   20ca0:	e13ffd17 	ldw	r4,-12(fp)
   20ca4:	002088c0 	call	2088c <ACK_judge_for_read>
   20ca8:	1080005c 	xori	r2,r2,1
   20cac:	10803fcc 	andi	r2,r2,255
   20cb0:	10000526 	beq	r2,zero,20cc8 <OC_I2C_Read_Continue+0xd8>
			printf("OC_I2C_Read error[10]\r\n");
   20cb4:	010000b4 	movhi	r4,2
   20cb8:	21100a04 	addi	r4,r4,16424
   20cbc:	0021d200 	call	21d20 <puts>
			return FALSE;
   20cc0:	0005883a 	mov	r2,zero
   20cc4:	00001706 	br	20d24 <OC_I2C_Read_Continue+0x134>
		}
		// printf("\n read receive ACK-device address(read)! \n");

		Data32 = IORD(i2c_base, 3);
   20cc8:	e0bffd17 	ldw	r2,-12(fp)
   20ccc:	10800304 	addi	r2,r2,12
   20cd0:	10800037 	ldwio	r2,0(r2)
   20cd4:	e0bffe15 	stw	r2,-8(fp)
		*(pData8 + i) = Data32 & 0xff;
   20cd8:	e0bfff17 	ldw	r2,-4(fp)
   20cdc:	e0fffb17 	ldw	r3,-20(fp)
   20ce0:	1885883a 	add	r2,r3,r2
   20ce4:	e0fffe17 	ldw	r3,-8(fp)
   20ce8:	10c00005 	stb	r3,0(r2)
	for (i = 0; i < nReadLength; i++) {
   20cec:	e0bfff17 	ldw	r2,-4(fp)
   20cf0:	10800044 	addi	r2,r2,1
   20cf4:	e0bfff15 	stw	r2,-4(fp)
   20cf8:	e0ffff17 	ldw	r3,-4(fp)
   20cfc:	e0bffa17 	ldw	r2,-24(fp)
   20d00:	18bfdc16 	blt	r3,r2,20c74 <OC_I2C_Read_Continue+0x84>
	}

	IOWR(i2c_base, 4, 0x40);
   20d04:	e0bffd17 	ldw	r2,-12(fp)
   20d08:	10800404 	addi	r2,r2,16
   20d0c:	1007883a 	mov	r3,r2
   20d10:	00801004 	movi	r2,64
   20d14:	18800035 	stwio	r2,0(r3)

	// Sleep(10);
	//OS_msleep(1);
	usleep(SLEEP_TIME);
   20d18:	01003e84 	movi	r4,250
   20d1c:	00226080 	call	22608 <usleep>
	//  printf(" Read  [%02X] = %02Xh\r\n", sub_address, data);

	return TRUE;
   20d20:	00800044 	movi	r2,1

}
   20d24:	e037883a 	mov	sp,fp
   20d28:	dfc00117 	ldw	ra,4(sp)
   20d2c:	df000017 	ldw	fp,0(sp)
   20d30:	dec00204 	addi	sp,sp,8
   20d34:	f800283a 	ret

00020d38 <OC_I2CL_Write>:

//  size > 2Kb
bool OC_I2CL_Write(alt_32 i2c_base, alt_u8 device_address, alt_u16 sub_address,
		alt_u8 *pData, int nWriteLength) {
   20d38:	defff804 	addi	sp,sp,-32
   20d3c:	dfc00715 	stw	ra,28(sp)
   20d40:	df000615 	stw	fp,24(sp)
   20d44:	df000604 	addi	fp,sp,24
   20d48:	e13ffd15 	stw	r4,-12(fp)
   20d4c:	2805883a 	mov	r2,r5
   20d50:	3007883a 	mov	r3,r6
   20d54:	e1fffa15 	stw	r7,-24(fp)
   20d58:	e0bffc05 	stb	r2,-16(fp)
   20d5c:	1805883a 	mov	r2,r3
   20d60:	e0bffb0d 	sth	r2,-20(fp)
	//DWORD reg_data = 0x0;
	alt_u8 AddrHigh, AddrLow;
	//int count= 0;

	AddrHigh = (sub_address >> 8) & 0xFF;
   20d64:	e0bffb0b 	ldhu	r2,-20(fp)
   20d68:	1004d23a 	srli	r2,r2,8
   20d6c:	e0bffec5 	stb	r2,-5(fp)
	AddrLow = sub_address & 0xFF;
   20d70:	e0bffb0b 	ldhu	r2,-20(fp)
   20d74:	e0bffe85 	stb	r2,-6(fp)

	int i;

	//set the tx reg audio chip dev address with write bit
	if (!Write32_Data(i2c_base, 3, device_address))
   20d78:	e0bffc03 	ldbu	r2,-16(fp)
   20d7c:	100d883a 	mov	r6,r2
   20d80:	014000c4 	movi	r5,3
   20d84:	e13ffd17 	ldw	r4,-12(fp)
   20d88:	00202600 	call	20260 <Write32_Data>
   20d8c:	1080005c 	xori	r2,r2,1
   20d90:	10803fcc 	andi	r2,r2,255
   20d94:	10000226 	beq	r2,zero,20da0 <OC_I2CL_Write+0x68>
		return FALSE;
   20d98:	0005883a 	mov	r2,zero
   20d9c:	00007d06 	br	20f94 <OC_I2CL_Write+0x25c>
	//set STA and WR bits(bit7 and bit4)
	if (!Write32_Data(i2c_base, 4, 0x90))   //0x90
   20da0:	01802404 	movi	r6,144
   20da4:	01400104 	movi	r5,4
   20da8:	e13ffd17 	ldw	r4,-12(fp)
   20dac:	00202600 	call	20260 <Write32_Data>
   20db0:	1080005c 	xori	r2,r2,1
   20db4:	10803fcc 	andi	r2,r2,255
   20db8:	10000226 	beq	r2,zero,20dc4 <OC_I2CL_Write+0x8c>
		return FALSE;
   20dbc:	0005883a 	mov	r2,zero
   20dc0:	00007406 	br	20f94 <OC_I2CL_Write+0x25c>

	//wait TIP bit go to 0 to end Tx
	if (!ACK_check(i2c_base)) {
   20dc4:	e13ffd17 	ldw	r4,-12(fp)
   20dc8:	00205d40 	call	205d4 <ACK_check>
   20dcc:	1080005c 	xori	r2,r2,1
   20dd0:	10803fcc 	andi	r2,r2,255
   20dd4:	10000526 	beq	r2,zero,20dec <OC_I2CL_Write+0xb4>
		printf("OC_I2CL_Write error[0]\r\n");
   20dd8:	010000b4 	movhi	r4,2
   20ddc:	21101004 	addi	r4,r4,16448
   20de0:	0021d200 	call	21d20 <puts>
		return FALSE;
   20de4:	0005883a 	mov	r2,zero
   20de8:	00006a06 	br	20f94 <OC_I2CL_Write+0x25c>
	// printf("\n receive ACK-device address! \n");

	//set the txr reg data with reg address + 1 data MSB
	//  reg_data  = (sub_address << 1) & 0xFE;
	//reg_data |= ((data >> 8) & 0x01);
	if (!Write32_Data(i2c_base, 3, AddrHigh))   //reg_data&0xff);
   20dec:	e0bffec3 	ldbu	r2,-5(fp)
   20df0:	100d883a 	mov	r6,r2
   20df4:	014000c4 	movi	r5,3
   20df8:	e13ffd17 	ldw	r4,-12(fp)
   20dfc:	00202600 	call	20260 <Write32_Data>
   20e00:	1080005c 	xori	r2,r2,1
   20e04:	10803fcc 	andi	r2,r2,255
   20e08:	10000226 	beq	r2,zero,20e14 <OC_I2CL_Write+0xdc>
		return FALSE;
   20e0c:	0005883a 	mov	r2,zero
   20e10:	00006006 	br	20f94 <OC_I2CL_Write+0x25c>

	//set WR bits(bit4)
	if (!Write32_Data(i2c_base, 4, 0x10))
   20e14:	01800404 	movi	r6,16
   20e18:	01400104 	movi	r5,4
   20e1c:	e13ffd17 	ldw	r4,-12(fp)
   20e20:	00202600 	call	20260 <Write32_Data>
   20e24:	1080005c 	xori	r2,r2,1
   20e28:	10803fcc 	andi	r2,r2,255
   20e2c:	10000226 	beq	r2,zero,20e38 <OC_I2CL_Write+0x100>
		return FALSE;
   20e30:	0005883a 	mov	r2,zero
   20e34:	00005706 	br	20f94 <OC_I2CL_Write+0x25c>

	//wait TIP bit go to 0 to end Tx
	if (!ACK_check(i2c_base)) {
   20e38:	e13ffd17 	ldw	r4,-12(fp)
   20e3c:	00205d40 	call	205d4 <ACK_check>
   20e40:	1080005c 	xori	r2,r2,1
   20e44:	10803fcc 	andi	r2,r2,255
   20e48:	10000526 	beq	r2,zero,20e60 <OC_I2CL_Write+0x128>
		printf("OC_I2CL_Write error[1]\r\n");
   20e4c:	010000b4 	movhi	r4,2
   20e50:	21101604 	addi	r4,r4,16472
   20e54:	0021d200 	call	21d20 <puts>
		return FALSE;
   20e58:	0005883a 	mov	r2,zero
   20e5c:	00004d06 	br	20f94 <OC_I2CL_Write+0x25c>
	}
	// printf("\n receive ACK-reg high address! \n");

	//set the txr reg data with reg address + 1 data MSB
	if (!Write32_Data(i2c_base, 3, AddrLow))   //reg_data&0xff);
   20e60:	e0bffe83 	ldbu	r2,-6(fp)
   20e64:	100d883a 	mov	r6,r2
   20e68:	014000c4 	movi	r5,3
   20e6c:	e13ffd17 	ldw	r4,-12(fp)
   20e70:	00202600 	call	20260 <Write32_Data>
   20e74:	1080005c 	xori	r2,r2,1
   20e78:	10803fcc 	andi	r2,r2,255
   20e7c:	10000226 	beq	r2,zero,20e88 <OC_I2CL_Write+0x150>
		return FALSE;
   20e80:	0005883a 	mov	r2,zero
   20e84:	00004306 	br	20f94 <OC_I2CL_Write+0x25c>

	//set WR bits(bit4)
	Write32_Data(i2c_base, 4, 0x10);
   20e88:	01800404 	movi	r6,16
   20e8c:	01400104 	movi	r5,4
   20e90:	e13ffd17 	ldw	r4,-12(fp)
   20e94:	00202600 	call	20260 <Write32_Data>

	//wait TIP bit go to 0 to end Tx
	if (!ACK_check(i2c_base)) {
   20e98:	e13ffd17 	ldw	r4,-12(fp)
   20e9c:	00205d40 	call	205d4 <ACK_check>
   20ea0:	1080005c 	xori	r2,r2,1
   20ea4:	10803fcc 	andi	r2,r2,255
   20ea8:	10000526 	beq	r2,zero,20ec0 <OC_I2CL_Write+0x188>
		printf("OC_I2CL_Write error[2]\r\n");
   20eac:	010000b4 	movhi	r4,2
   20eb0:	21101c04 	addi	r4,r4,16496
   20eb4:	0021d200 	call	21d20 <puts>
		return FALSE;
   20eb8:	0005883a 	mov	r2,zero
   20ebc:	00003506 	br	20f94 <OC_I2CL_Write+0x25c>
	}
	//  printf("\n receive ACK-reg low address! \n");

#if 1
	//for( i=nWriteLength-1;i>=0;i--){
	for (i = 0; i < nWriteLength; i++) {
   20ec0:	e03fff15 	stw	zero,-4(fp)
   20ec4:	00002406 	br	20f58 <OC_I2CL_Write+0x220>

		//set the txr reg data with the other data 8 bit LSB
		if (!Write32_Data(i2c_base, 3, *(pData + i)))
   20ec8:	e0bfff17 	ldw	r2,-4(fp)
   20ecc:	e0fffa17 	ldw	r3,-24(fp)
   20ed0:	1885883a 	add	r2,r3,r2
   20ed4:	10800003 	ldbu	r2,0(r2)
   20ed8:	10803fcc 	andi	r2,r2,255
   20edc:	100d883a 	mov	r6,r2
   20ee0:	014000c4 	movi	r5,3
   20ee4:	e13ffd17 	ldw	r4,-12(fp)
   20ee8:	00202600 	call	20260 <Write32_Data>
   20eec:	1080005c 	xori	r2,r2,1
   20ef0:	10803fcc 	andi	r2,r2,255
   20ef4:	10000226 	beq	r2,zero,20f00 <OC_I2CL_Write+0x1c8>
			return FALSE;
   20ef8:	0005883a 	mov	r2,zero
   20efc:	00002506 	br	20f94 <OC_I2CL_Write+0x25c>

		//set STO and WR bits(bit7 and bit4)
		if (!Write32_Data(i2c_base, 4, 0x10))
   20f00:	01800404 	movi	r6,16
   20f04:	01400104 	movi	r5,4
   20f08:	e13ffd17 	ldw	r4,-12(fp)
   20f0c:	00202600 	call	20260 <Write32_Data>
   20f10:	1080005c 	xori	r2,r2,1
   20f14:	10803fcc 	andi	r2,r2,255
   20f18:	10000226 	beq	r2,zero,20f24 <OC_I2CL_Write+0x1ec>
			return FALSE;
   20f1c:	0005883a 	mov	r2,zero
   20f20:	00001c06 	br	20f94 <OC_I2CL_Write+0x25c>

		//wait TIP bit go to 0 to end Tx
		if (!ACK_check(i2c_base)) {
   20f24:	e13ffd17 	ldw	r4,-12(fp)
   20f28:	00205d40 	call	205d4 <ACK_check>
   20f2c:	1080005c 	xori	r2,r2,1
   20f30:	10803fcc 	andi	r2,r2,255
   20f34:	10000526 	beq	r2,zero,20f4c <OC_I2CL_Write+0x214>
			printf("OC_I2CL_Write error[3]\r\n");
   20f38:	010000b4 	movhi	r4,2
   20f3c:	21102204 	addi	r4,r4,16520
   20f40:	0021d200 	call	21d20 <puts>
			return FALSE;
   20f44:	0005883a 	mov	r2,zero
   20f48:	00001206 	br	20f94 <OC_I2CL_Write+0x25c>
	for (i = 0; i < nWriteLength; i++) {
   20f4c:	e0bfff17 	ldw	r2,-4(fp)
   20f50:	10800044 	addi	r2,r2,1
   20f54:	e0bfff15 	stw	r2,-4(fp)
   20f58:	e0ffff17 	ldw	r3,-4(fp)
   20f5c:	e0800217 	ldw	r2,8(fp)
   20f60:	18bfd916 	blt	r3,r2,20ec8 <OC_I2CL_Write+0x190>
	//wait TIP bit go to 0 to end Tx
	if(!ACK_check( i2c_base))
	return FALSE;

#endif
	if (!Write32_Data(i2c_base, 4, 0x40))
   20f64:	01801004 	movi	r6,64
   20f68:	01400104 	movi	r5,4
   20f6c:	e13ffd17 	ldw	r4,-12(fp)
   20f70:	00202600 	call	20260 <Write32_Data>
   20f74:	1080005c 	xori	r2,r2,1
   20f78:	10803fcc 	andi	r2,r2,255
   20f7c:	10000226 	beq	r2,zero,20f88 <OC_I2CL_Write+0x250>
		return FALSE;
   20f80:	0005883a 	mov	r2,zero
   20f84:	00000306 	br	20f94 <OC_I2CL_Write+0x25c>

	//OS_msleep(1);
	usleep(SLEEP_TIME);
   20f88:	01003e84 	movi	r4,250
   20f8c:	00226080 	call	22608 <usleep>
	//  printf("\n receive ACK-data! \n");

	return TRUE;
   20f90:	00800044 	movi	r2,1
}
   20f94:	e037883a 	mov	sp,fp
   20f98:	dfc00117 	ldw	ra,4(sp)
   20f9c:	df000017 	ldw	fp,0(sp)
   20fa0:	dec00204 	addi	sp,sp,8
   20fa4:	f800283a 	ret

00020fa8 <OC_I2CL_Read>:
 return TRUE;

 } */

bool OC_I2CL_Read(alt_32 i2c_base, alt_u8 device_address, alt_u16 sub_address,
		alt_u8 *pData8, int nReadLength) {
   20fa8:	defff704 	addi	sp,sp,-36
   20fac:	dfc00815 	stw	ra,32(sp)
   20fb0:	df000715 	stw	fp,28(sp)
   20fb4:	df000704 	addi	fp,sp,28
   20fb8:	e13ffc15 	stw	r4,-16(fp)
   20fbc:	2805883a 	mov	r2,r5
   20fc0:	3007883a 	mov	r3,r6
   20fc4:	e1fff915 	stw	r7,-28(fp)
   20fc8:	e0bffb05 	stb	r2,-20(fp)
   20fcc:	1805883a 	mov	r2,r3
   20fd0:	e0bffa0d 	sth	r2,-24(fp)
	int i;

	alt_u8 AddrHigh, AddrLow;
	alt_u8 DataHigh, DataLow;

	AddrHigh = (sub_address >> 8) & 0xFF;
   20fd4:	e0bffa0b 	ldhu	r2,-24(fp)
   20fd8:	1004d23a 	srli	r2,r2,8
   20fdc:	e0bffec5 	stb	r2,-5(fp)
	AddrLow = sub_address & 0xFF;
   20fe0:	e0bffa0b 	ldhu	r2,-24(fp)
   20fe4:	e0bffe85 	stb	r2,-6(fp)

	//set the tx reg audio chip dev address with write bit
	if (!Write32_Data(i2c_base, 3, device_address))
   20fe8:	e0bffb03 	ldbu	r2,-20(fp)
   20fec:	100d883a 	mov	r6,r2
   20ff0:	014000c4 	movi	r5,3
   20ff4:	e13ffc17 	ldw	r4,-16(fp)
   20ff8:	00202600 	call	20260 <Write32_Data>
   20ffc:	1080005c 	xori	r2,r2,1
   21000:	10803fcc 	andi	r2,r2,255
   21004:	10000226 	beq	r2,zero,21010 <OC_I2CL_Read+0x68>
		return FALSE;
   21008:	0005883a 	mov	r2,zero
   2100c:	00009e06 	br	21288 <OC_I2CL_Read+0x2e0>

	//set STA and WR bits(bit7 and bit4)
	if (!Write32_Data(i2c_base, 4, 0x90))
   21010:	01802404 	movi	r6,144
   21014:	01400104 	movi	r5,4
   21018:	e13ffc17 	ldw	r4,-16(fp)
   2101c:	00202600 	call	20260 <Write32_Data>
   21020:	1080005c 	xori	r2,r2,1
   21024:	10803fcc 	andi	r2,r2,255
   21028:	10000226 	beq	r2,zero,21034 <OC_I2CL_Read+0x8c>
		return FALSE;
   2102c:	0005883a 	mov	r2,zero
   21030:	00009506 	br	21288 <OC_I2CL_Read+0x2e0>

	//wait TIP bit go to 0 to end Tx
	if (!ACK_check(i2c_base)) {
   21034:	e13ffc17 	ldw	r4,-16(fp)
   21038:	00205d40 	call	205d4 <ACK_check>
   2103c:	1080005c 	xori	r2,r2,1
   21040:	10803fcc 	andi	r2,r2,255
   21044:	10000526 	beq	r2,zero,2105c <OC_I2CL_Read+0xb4>
		printf("OC_I2CL_Read error[0]\r\n");
   21048:	010000b4 	movhi	r4,2
   2104c:	21102804 	addi	r4,r4,16544
   21050:	0021d200 	call	21d20 <puts>
		return FALSE;
   21054:	0005883a 	mov	r2,zero
   21058:	00008b06 	br	21288 <OC_I2CL_Read+0x2e0>
	}
	//  printf("\n receive ACK-device address! \n");

	//set the txr reg data with reg address + 0

	if (!Write32_Data(i2c_base, 3, AddrHigh))   //reg_data&0xff);
   2105c:	e0bffec3 	ldbu	r2,-5(fp)
   21060:	100d883a 	mov	r6,r2
   21064:	014000c4 	movi	r5,3
   21068:	e13ffc17 	ldw	r4,-16(fp)
   2106c:	00202600 	call	20260 <Write32_Data>
   21070:	1080005c 	xori	r2,r2,1
   21074:	10803fcc 	andi	r2,r2,255
   21078:	10000226 	beq	r2,zero,21084 <OC_I2CL_Read+0xdc>
		return FALSE;
   2107c:	0005883a 	mov	r2,zero
   21080:	00008106 	br	21288 <OC_I2CL_Read+0x2e0>

	//set WR bits(bit4)
	if (!Write32_Data(i2c_base, 4, 0x10))
   21084:	01800404 	movi	r6,16
   21088:	01400104 	movi	r5,4
   2108c:	e13ffc17 	ldw	r4,-16(fp)
   21090:	00202600 	call	20260 <Write32_Data>
   21094:	1080005c 	xori	r2,r2,1
   21098:	10803fcc 	andi	r2,r2,255
   2109c:	10000226 	beq	r2,zero,210a8 <OC_I2CL_Read+0x100>
		return FALSE;
   210a0:	0005883a 	mov	r2,zero
   210a4:	00007806 	br	21288 <OC_I2CL_Read+0x2e0>

	//wait TIP bit go to 0 to end Tx
	if (!ACK_check(i2c_base)) {
   210a8:	e13ffc17 	ldw	r4,-16(fp)
   210ac:	00205d40 	call	205d4 <ACK_check>
   210b0:	1080005c 	xori	r2,r2,1
   210b4:	10803fcc 	andi	r2,r2,255
   210b8:	10000526 	beq	r2,zero,210d0 <OC_I2CL_Read+0x128>
		printf("OC_I2CL_Read error[1]\r\n");
   210bc:	010000b4 	movhi	r4,2
   210c0:	21102e04 	addi	r4,r4,16568
   210c4:	0021d200 	call	21d20 <puts>
		return FALSE;
   210c8:	0005883a 	mov	r2,zero
   210cc:	00006e06 	br	21288 <OC_I2CL_Read+0x2e0>
	}
//   printf("\n read receive ACK-reg High address! \n");

	//set the txr reg data with reg address + 0
	if (!Write32_Data(i2c_base, 3, AddrLow)) //;//reg_data&0xff);
   210d0:	e0bffe83 	ldbu	r2,-6(fp)
   210d4:	100d883a 	mov	r6,r2
   210d8:	014000c4 	movi	r5,3
   210dc:	e13ffc17 	ldw	r4,-16(fp)
   210e0:	00202600 	call	20260 <Write32_Data>
   210e4:	1080005c 	xori	r2,r2,1
   210e8:	10803fcc 	andi	r2,r2,255
   210ec:	10000226 	beq	r2,zero,210f8 <OC_I2CL_Read+0x150>
		return FALSE;
   210f0:	0005883a 	mov	r2,zero
   210f4:	00006406 	br	21288 <OC_I2CL_Read+0x2e0>
	//set WR bits(bit4)
	if (!Write32_Data(i2c_base, 4, 0x10))
   210f8:	01800404 	movi	r6,16
   210fc:	01400104 	movi	r5,4
   21100:	e13ffc17 	ldw	r4,-16(fp)
   21104:	00202600 	call	20260 <Write32_Data>
   21108:	1080005c 	xori	r2,r2,1
   2110c:	10803fcc 	andi	r2,r2,255
   21110:	10000226 	beq	r2,zero,2111c <OC_I2CL_Read+0x174>
		return FALSE;
   21114:	0005883a 	mov	r2,zero
   21118:	00005b06 	br	21288 <OC_I2CL_Read+0x2e0>

	//wait TIP bit go to 0 to end Tx
	if (!ACK_check(i2c_base)) {
   2111c:	e13ffc17 	ldw	r4,-16(fp)
   21120:	00205d40 	call	205d4 <ACK_check>
   21124:	1080005c 	xori	r2,r2,1
   21128:	10803fcc 	andi	r2,r2,255
   2112c:	10000526 	beq	r2,zero,21144 <OC_I2CL_Read+0x19c>
		printf("OC_I2CL_Read error[2]\r\n");
   21130:	010000b4 	movhi	r4,2
   21134:	21103404 	addi	r4,r4,16592
   21138:	0021d200 	call	21d20 <puts>
		return FALSE;
   2113c:	0005883a 	mov	r2,zero
   21140:	00005106 	br	21288 <OC_I2CL_Read+0x2e0>

	//  printf("\n read receive ACK-reg Low address! \n");

	//read
	//set the tx reg audio chip dev address with read bit 1
	if (!Write32_Data(i2c_base, 3, device_address | 0x01))
   21144:	e0bffb03 	ldbu	r2,-20(fp)
   21148:	10800054 	ori	r2,r2,1
   2114c:	10803fcc 	andi	r2,r2,255
   21150:	100d883a 	mov	r6,r2
   21154:	014000c4 	movi	r5,3
   21158:	e13ffc17 	ldw	r4,-16(fp)
   2115c:	00202600 	call	20260 <Write32_Data>
   21160:	1080005c 	xori	r2,r2,1
   21164:	10803fcc 	andi	r2,r2,255
   21168:	10000226 	beq	r2,zero,21174 <OC_I2CL_Read+0x1cc>
		return FALSE;
   2116c:	0005883a 	mov	r2,zero
   21170:	00004506 	br	21288 <OC_I2CL_Read+0x2e0>

	//set STA and WR bits(bit7 and bit4)
	if (!Write32_Data(i2c_base, 4, 0x90))
   21174:	01802404 	movi	r6,144
   21178:	01400104 	movi	r5,4
   2117c:	e13ffc17 	ldw	r4,-16(fp)
   21180:	00202600 	call	20260 <Write32_Data>
   21184:	1080005c 	xori	r2,r2,1
   21188:	10803fcc 	andi	r2,r2,255
   2118c:	10000226 	beq	r2,zero,21198 <OC_I2CL_Read+0x1f0>
		return FALSE;
   21190:	0005883a 	mov	r2,zero
   21194:	00003c06 	br	21288 <OC_I2CL_Read+0x2e0>

	//wait TIP bit go to 0 to end Tx
	if (!ACK_check(i2c_base)) {
   21198:	e13ffc17 	ldw	r4,-16(fp)
   2119c:	00205d40 	call	205d4 <ACK_check>
   211a0:	1080005c 	xori	r2,r2,1
   211a4:	10803fcc 	andi	r2,r2,255
   211a8:	10000526 	beq	r2,zero,211c0 <OC_I2CL_Read+0x218>
		printf("OC_I2CL_Read error[3]\r\n");
   211ac:	010000b4 	movhi	r4,2
   211b0:	21103a04 	addi	r4,r4,16616
   211b4:	0021d200 	call	21d20 <puts>
		return FALSE;
   211b8:	0005883a 	mov	r2,zero
   211bc:	00003206 	br	21288 <OC_I2CL_Read+0x2e0>
//   printf("\n read receive ACK-device address(read)! \n");

	//read the rxr data

#if 1
	for (i = 0; i < nReadLength; i++) {
   211c0:	e03fff15 	stw	zero,-4(fp)
   211c4:	00002106 	br	2124c <OC_I2CL_Read+0x2a4>
		// printf("\n read receive ACK-device address(read)! \n");
		//set the RD and ACK bit(bit5 and bit3)
		IOWR(i2c_base, 4, ((i + 1) == nReadLength) ? 0x28 : 0x20);
   211c8:	e0bffc17 	ldw	r2,-16(fp)
   211cc:	10800404 	addi	r2,r2,16
   211d0:	1009883a 	mov	r4,r2
   211d4:	e0bfff17 	ldw	r2,-4(fp)
   211d8:	10800044 	addi	r2,r2,1
   211dc:	e0c00217 	ldw	r3,8(fp)
   211e0:	1880021e 	bne	r3,r2,211ec <OC_I2CL_Read+0x244>
   211e4:	00800a04 	movi	r2,40
   211e8:	00000106 	br	211f0 <OC_I2CL_Read+0x248>
   211ec:	00800804 	movi	r2,32
   211f0:	20800035 	stwio	r2,0(r4)

		if (!ACK_judge_for_read(i2c_base)) {
   211f4:	e13ffc17 	ldw	r4,-16(fp)
   211f8:	002088c0 	call	2088c <ACK_judge_for_read>
   211fc:	1080005c 	xori	r2,r2,1
   21200:	10803fcc 	andi	r2,r2,255
   21204:	10000526 	beq	r2,zero,2121c <OC_I2CL_Read+0x274>
			printf("OC_I2CL_Read error[4]\r\n");
   21208:	010000b4 	movhi	r4,2
   2120c:	21104004 	addi	r4,r4,16640
   21210:	0021d200 	call	21d20 <puts>
			return FALSE;
   21214:	0005883a 	mov	r2,zero
   21218:	00001b06 	br	21288 <OC_I2CL_Read+0x2e0>
		}
		// printf("\n read receive ACK-device address(read)! \n");

		Data32 = IORD(i2c_base, 3);
   2121c:	e0bffc17 	ldw	r2,-16(fp)
   21220:	10800304 	addi	r2,r2,12
   21224:	10800037 	ldwio	r2,0(r2)
   21228:	e0bffd15 	stw	r2,-12(fp)
		*(pData8 + i) = Data32 & 0xff;
   2122c:	e0bfff17 	ldw	r2,-4(fp)
   21230:	e0fff917 	ldw	r3,-28(fp)
   21234:	1885883a 	add	r2,r3,r2
   21238:	e0fffd17 	ldw	r3,-12(fp)
   2123c:	10c00005 	stb	r3,0(r2)
	for (i = 0; i < nReadLength; i++) {
   21240:	e0bfff17 	ldw	r2,-4(fp)
   21244:	10800044 	addi	r2,r2,1
   21248:	e0bfff15 	stw	r2,-4(fp)
   2124c:	e0ffff17 	ldw	r3,-4(fp)
   21250:	e0800217 	ldw	r2,8(fp)
   21254:	18bfdc16 	blt	r3,r2,211c8 <OC_I2CL_Read+0x220>
	DataLow = Data32 & 0xff;

	pData16 = (DataHigh << 8) | DataLow;
#endif

	if (!Write32_Data(i2c_base, 4, 0x40))
   21258:	01801004 	movi	r6,64
   2125c:	01400104 	movi	r5,4
   21260:	e13ffc17 	ldw	r4,-16(fp)
   21264:	00202600 	call	20260 <Write32_Data>
   21268:	1080005c 	xori	r2,r2,1
   2126c:	10803fcc 	andi	r2,r2,255
   21270:	10000226 	beq	r2,zero,2127c <OC_I2CL_Read+0x2d4>
		return FALSE;
   21274:	0005883a 	mov	r2,zero
   21278:	00000306 	br	21288 <OC_I2CL_Read+0x2e0>

	//OS_msleep(1);
	usleep(SLEEP_TIME);
   2127c:	01003e84 	movi	r4,250
   21280:	00226080 	call	22608 <usleep>

	return TRUE;
   21284:	00800044 	movi	r2,1

}
   21288:	e037883a 	mov	sp,fp
   2128c:	dfc00117 	ldw	ra,4(sp)
   21290:	df000017 	ldw	fp,0(sp)
   21294:	dec00204 	addi	sp,sp,8
   21298:	f800283a 	ret

0002129c <main>:

#define READ_COMMUNICATION_REGISTER IORD(NIOS_SYSTEM_SHARED_MEMORY_BASE, 1)
#define SEND_ACK_COMMUNICATION_REGISTER IOWR(NIOS_SYSTEM_SHARED_MEMORY_BASE, 1, 0)
#define SEND_STATUS_REGISTER(x) IOWR(NIOS_SYSTEM_SHARED_MEMORY_BASE, 0, (x))

int main() {
   2129c:	deffc104 	addi	sp,sp,-252
   212a0:	dfc03e15 	stw	ra,248(sp)
   212a4:	df003d15 	stw	fp,244(sp)
   212a8:	dc003c15 	stw	r16,240(sp)
   212ac:	df003d04 	addi	fp,sp,244
	alt_u16 timeout=0;
   212b0:	e03ffd8d 	sth	zero,-10(fp)
	bool exitloop = false;
   212b4:	e03ffd45 	stb	zero,-11(fp)
	uint8_t tempError;
	uint8_t numbytes;
	uint8_t Slave_Rx_Buffer[200] = {0};
   212b8:	e03fc3c5 	stb	zero,-241(fp)
   212bc:	e03fc405 	stb	zero,-240(fp)
   212c0:	e03fc445 	stb	zero,-239(fp)
   212c4:	e03fc485 	stb	zero,-238(fp)
   212c8:	e0bfc4c4 	addi	r2,fp,-237
   212cc:	00c03104 	movi	r3,196
   212d0:	180d883a 	mov	r6,r3
   212d4:	000b883a 	mov	r5,zero
   212d8:	1009883a 	mov	r4,r2
   212dc:	0021bdc0 	call	21bdc <memset>
	uint8_t Slave_Rx_Index = 0;
   212e0:	e03ffd05 	stb	zero,-12(fp)
	char    tempChar = 0;
   212e4:	e03ffcc5 	stb	zero,-13(fp)
	alt_u32 I2CA_BASE = WATER_I2C_OPENCORES_BASE;
   212e8:	00800134 	movhi	r2,4
   212ec:	10844004 	addi	r2,r2,4352
   212f0:	e0bffb15 	stw	r2,-20(fp)

	Water_I2C_init(I2CA_BASE, ALT_CPU_FREQ, 100000);
   212f4:	018000b4 	movhi	r6,2
   212f8:	31a1a804 	addi	r6,r6,-31072
   212fc:	0140bef4 	movhi	r5,763
   21300:	297c2004 	addi	r5,r5,-3968
   21304:	e13ffb17 	ldw	r4,-20(fp)
   21308:	00214400 	call	21440 <Water_I2C_init>

	//	myI2CReadWrite(WRITE, BYTES_TO, (alt_u8 *)&numbytes, 1);
	timeout = 600;
   2130c:	00809604 	movi	r2,600
   21310:	e0bffd8d 	sth	r2,-10(fp)
	exitloop = false;
   21314:	e03ffd45 	stb	zero,-11(fp)

	usleep(185000);
   21318:	010000f4 	movhi	r4,3
   2131c:	2134aa04 	addi	r4,r4,-11608
   21320:	00226080 	call	22608 <usleep>
	numbytes =0;
   21324:	e03ff5c5 	stb	zero,-41(fp)
	myI2CReadWrite(READ, BYTES_TO_READ, (alt_u8 *)&numbytes, 1); //numbytes can be 0 to 255, but there can be more than 255 bytes in slave buffer
   21328:	e0bff5c4 	addi	r2,fp,-41
   2132c:	01c00044 	movi	r7,1
   21330:	100d883a 	mov	r6,r2
   21334:	01401844 	movi	r5,97
   21338:	01000044 	movi	r4,1
   2133c:	00215380 	call	21538 <myI2CReadWrite>
	usleep(5000);
   21340:	0104e204 	movi	r4,5000
   21344:	00226080 	call	22608 <usleep>
			numbytes=0;
			usleep(5000);
		}// end data available while loop
	 */

int loop_cnt = 0;
   21348:	e03ffe15 	stw	zero,-8(fp)
	while(1){
		SEND_STATUS_REGISTER(loop_cnt|0x80000000);
   2134c:	e0bffe17 	ldw	r2,-8(fp)
   21350:	10a00034 	orhi	r2,r2,32768
   21354:	00880035 	stwio	r2,8192(zero)
		  		//Mode select
		  		unsigned com_reg = READ_COMMUNICATION_REGISTER;
   21358:	00880137 	ldwio	r2,8196(zero)
   2135c:	e0bffa15 	stw	r2,-24(fp)
				if ( (com_reg&0xffff0000)== 0xaaaa0000 ) {
   21360:	e0bffa17 	ldw	r2,-24(fp)
   21364:	10ffffec 	andhi	r3,r2,65535
   21368:	00aaaab4 	movhi	r2,43690
   2136c:	1880091e 	bne	r3,r2,21394 <main+0xf8>
					SEND_ACK_COMMUNICATION_REGISTER; // Send ACK
   21370:	0005883a 	mov	r2,zero
   21374:	00880135 	stwio	r2,8196(zero)
					switch (com_reg&0xffff) {
   21378:	e0bffa17 	ldw	r2,-24(fp)
   2137c:	10bfffcc 	andi	r2,r2,65535
   21380:	10c00060 	cmpeqi	r3,r2,1
   21384:	1800051e 	bne	r3,zero,2139c <main+0x100>
   21388:	108000a0 	cmpeqi	r2,r2,2
   2138c:	1000051e 	bne	r2,zero,213a4 <main+0x108>
						break;
					case 2:
						//g_clear_OOR_flag = true;
						break;
					default :
						break;
   21390:	00000506 	br	213a8 <main+0x10c>
					}
				}
   21394:	0001883a 	nop
   21398:	00000306 	br	213a8 <main+0x10c>
						break;
   2139c:	0001883a 	nop
   213a0:	00000106 	br	213a8 <main+0x10c>
						break;
   213a4:	0001883a 	nop
		unsigned offst;
		float pH= 20;
   213a8:	00906834 	movhi	r2,16800
   213ac:	e0bff915 	stw	r2,-28(fp)
		float phosphorus = 1;
   213b0:	008fe034 	movhi	r2,16256
   213b4:	e0bff815 	stw	r2,-32(fp)
		float nitrogen = 5;
   213b8:	00902834 	movhi	r2,16544
   213bc:	e0bff715 	stw	r2,-36(fp)
		offst = PH_SENSOR_VALUE >> 2;
   213c0:	00803044 	movi	r2,193
   213c4:	e0bff615 	stw	r2,-40(fp)
		IOWR(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst, pH);
   213c8:	e0bff617 	ldw	r2,-40(fp)
   213cc:	100490ba 	slli	r2,r2,2
   213d0:	14080004 	addi	r16,r2,8192
   213d4:	e13ff917 	ldw	r4,-28(fp)
   213d8:	0021b6c0 	call	21b6c <__fixsfsi>
   213dc:	80800035 	stwio	r2,0(r16)
		offst = PHOSPHORUS_SENSOR_VALUE >> 2;
   213e0:	00803084 	movi	r2,194
   213e4:	e0bff615 	stw	r2,-40(fp)
		IOWR(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst, phosphorus);
   213e8:	e0bff617 	ldw	r2,-40(fp)
   213ec:	100490ba 	slli	r2,r2,2
   213f0:	14080004 	addi	r16,r2,8192
   213f4:	e13ff817 	ldw	r4,-32(fp)
   213f8:	0021b6c0 	call	21b6c <__fixsfsi>
   213fc:	80800035 	stwio	r2,0(r16)
		offst = NITROGEN_SENSOR_VALUE >> 2;
   21400:	008030c4 	movi	r2,195
   21404:	e0bff615 	stw	r2,-40(fp)
		IOWR(NIOS_SYSTEM_SHARED_MEMORY_BASE, offst, nitrogen);
   21408:	e0bff617 	ldw	r2,-40(fp)
   2140c:	100490ba 	slli	r2,r2,2
   21410:	14080004 	addi	r16,r2,8192
   21414:	e13ff717 	ldw	r4,-36(fp)
   21418:	0021b6c0 	call	21b6c <__fixsfsi>
   2141c:	80800035 	stwio	r2,0(r16)
		printf(".");
   21420:	01000b84 	movi	r4,46
   21424:	0021c880 	call	21c88 <putchar>
		usleep(1000);
   21428:	0100fa04 	movi	r4,1000
   2142c:	00226080 	call	22608 <usleep>
		loop_cnt++;
   21430:	e0bffe17 	ldw	r2,-8(fp)
   21434:	10800044 	addi	r2,r2,1
   21438:	e0bffe15 	stw	r2,-8(fp)
	while(1){
   2143c:	003fc306 	br	2134c <main+0xb0>

00021440 <Water_I2C_init>:
 base = the base address of the component
 clk = freuqency of the clock driving this component  ( in Hz)
 speed = SCL speed ie 100K, 400K ...            (in Hz)
 15-OCT-07 initial release
 *****************************************************************/
void Water_I2C_init(alt_u32 base, alt_u32 clk, alt_u32 speed) {
   21440:	defff904 	addi	sp,sp,-28
   21444:	dfc00615 	stw	ra,24(sp)
   21448:	df000515 	stw	fp,20(sp)
   2144c:	df000504 	addi	fp,sp,20
   21450:	e13ffe15 	stw	r4,-8(fp)
   21454:	e17ffd15 	stw	r5,-12(fp)
   21458:	e1bffc15 	stw	r6,-16(fp)
	alt_u32 prescale = (clk / (5 * speed)) - 1;
   2145c:	e0fffc17 	ldw	r3,-16(fp)
   21460:	1805883a 	mov	r2,r3
   21464:	100490ba 	slli	r2,r2,2
   21468:	10c5883a 	add	r2,r2,r3
   2146c:	100b883a 	mov	r5,r2
   21470:	e13ffd17 	ldw	r4,-12(fp)
   21474:	0021aac0 	call	21aac <__udivsi3>
   21478:	10bfffc4 	addi	r2,r2,-1
   2147c:	e0bfff15 	stw	r2,-4(fp)
#ifdef  I2C_DEBUG
	printf(
   21480:	e0bfff17 	ldw	r2,-4(fp)
   21484:	d8800015 	stw	r2,0(sp)
   21488:	e1fffc17 	ldw	r7,-16(fp)
   2148c:	e1bffd17 	ldw	r6,-12(fp)
   21490:	e17ffe17 	ldw	r5,-8(fp)
   21494:	010000b4 	movhi	r4,2
   21498:	21104604 	addi	r4,r4,16664
   2149c:	0021c380 	call	21c38 <printf>
			" Initializing  I2C at 0x%x, \n\twith clock speed 0x%x \n\tand SCL speed 0x%x \n\tand prescale 0x%x\n",
			base, clk, speed, prescale);
#endif
	IOWR_I2C_OPENCORES_CTR(base, 0x00); /* turn off the core*/
   214a0:	e0bffe17 	ldw	r2,-8(fp)
   214a4:	10800204 	addi	r2,r2,8
   214a8:	0007883a 	mov	r3,zero
   214ac:	10c00035 	stwio	r3,0(r2)

	IOWR_I2C_OPENCORES_CR(base, I2C_OPENCORES_CR_IACK_MSK); /* clear any penning IRQ*/
   214b0:	e0bffe17 	ldw	r2,-8(fp)
   214b4:	10800404 	addi	r2,r2,16
   214b8:	1007883a 	mov	r3,r2
   214bc:	00800044 	movi	r2,1
   214c0:	18800035 	stwio	r2,0(r3)

	IOWR_I2C_OPENCORES_PRERLO(base, (0xff & prescale)); /* load low prescale bit*/
   214c4:	e0bffe17 	ldw	r2,-8(fp)
   214c8:	e0ffff17 	ldw	r3,-4(fp)
   214cc:	18c03fcc 	andi	r3,r3,255
   214d0:	10c00035 	stwio	r3,0(r2)

	IOWR_I2C_OPENCORES_PRERHI(base, (0xff & (prescale >> 8))); /* load upper prescale bit */
   214d4:	e0bffe17 	ldw	r2,-8(fp)
   214d8:	10800104 	addi	r2,r2,4
   214dc:	1007883a 	mov	r3,r2
   214e0:	e0bfff17 	ldw	r2,-4(fp)
   214e4:	1004d23a 	srli	r2,r2,8
   214e8:	10803fcc 	andi	r2,r2,255
   214ec:	18800035 	stwio	r2,0(r3)

	IOWR_I2C_OPENCORES_CTR(base, I2C_OPENCORES_CTR_EN_MSK); /* turn on the core*/
   214f0:	e0bffe17 	ldw	r2,-8(fp)
   214f4:	10800204 	addi	r2,r2,8
   214f8:	1007883a 	mov	r3,r2
   214fc:	00802004 	movi	r2,128
   21500:	18800035 	stwio	r2,0(r3)


	// reset
	oc_i2c_init_ex(I2CA_BASE_1, clk, speed);
   21504:	e0bffd17 	ldw	r2,-12(fp)
   21508:	e0fffc17 	ldw	r3,-16(fp)
   2150c:	180d883a 	mov	r6,r3
   21510:	100b883a 	mov	r5,r2
   21514:	01000134 	movhi	r4,4
   21518:	21044004 	addi	r4,r4,4352
   2151c:	00203600 	call	20360 <oc_i2c_init_ex>

}
   21520:	0001883a 	nop
   21524:	e037883a 	mov	sp,fp
   21528:	dfc00117 	ldw	ra,4(sp)
   2152c:	df000017 	ldw	fp,0(sp)
   21530:	dec00204 	addi	sp,sp,8
   21534:	f800283a 	ret

00021538 <myI2CReadWrite>:

	   @return returns result of I2C communication

	   @details
 */
uint8_t myI2CReadWrite(alt_u8 RW, alt_u8 RegAddr, uint8_t *pdata, alt_u16 size) {
   21538:	defff904 	addi	sp,sp,-28
   2153c:	dfc00615 	stw	ra,24(sp)
   21540:	df000515 	stw	fp,20(sp)
   21544:	df000504 	addi	fp,sp,20
   21548:	2005883a 	mov	r2,r4
   2154c:	2809883a 	mov	r4,r5
   21550:	e1bffc15 	stw	r6,-16(fp)
   21554:	3807883a 	mov	r3,r7
   21558:	e0bffe05 	stb	r2,-8(fp)
   2155c:	2005883a 	mov	r2,r4
   21560:	e0bffd05 	stb	r2,-12(fp)
   21564:	1805883a 	mov	r2,r3
   21568:	e0bffb0d 	sth	r2,-20(fp)
	uint8_t i=0;
   2156c:	e03fffc5 	stb	zero,-1(fp)
	if (RW == 1) {
   21570:	e0bffe03 	ldbu	r2,-8(fp)
   21574:	10800058 	cmpnei	r2,r2,1
   21578:	10003d1e 	bne	r2,zero,21670 <myI2CReadWrite+0x138>
		//	i = RegAddr;
		Water_I2C_start(I2CA_BASE_1,0x4C,0);
   2157c:	000d883a 	mov	r6,zero
   21580:	01401304 	movi	r5,76
   21584:	01000134 	movhi	r4,4
   21588:	21044004 	addi	r4,r4,4352
   2158c:	00217300 	call	21730 <Water_I2C_start>
		Water_I2C_write(I2CA_BASE_1,RegAddr,0);
   21590:	e0bffd03 	ldbu	r2,-12(fp)
   21594:	000d883a 	mov	r6,zero
   21598:	100b883a 	mov	r5,r2
   2159c:	0009883a 	mov	r4,zero
   215a0:	00218b80 	call	218b8 <Water_I2C_write>

		Water_I2C_start(I2CA_BASE_1,0x4C,1);
   215a4:	01800044 	movi	r6,1
   215a8:	01401304 	movi	r5,76
   215ac:	01000134 	movhi	r4,4
   215b0:	21044004 	addi	r4,r4,4352
   215b4:	00217300 	call	21730 <Water_I2C_start>
		for (i=0; i<size;){ //i = regaddr6
   215b8:	e03fffc5 	stb	zero,-1(fp)
   215bc:	00001506 	br	21614 <myI2CReadWrite+0xdc>
			pdata[i]= Water_I2C_read(I2CA_BASE_1,0);
   215c0:	000b883a 	mov	r5,zero
   215c4:	0009883a 	mov	r4,zero
   215c8:	002180c0 	call	2180c <Water_I2C_read>
   215cc:	1009883a 	mov	r4,r2
   215d0:	e0bfffc3 	ldbu	r2,-1(fp)
   215d4:	e0fffc17 	ldw	r3,-16(fp)
   215d8:	1885883a 	add	r2,r3,r2
   215dc:	2007883a 	mov	r3,r4
   215e0:	10c00005 	stb	r3,0(r2)
			printf("\tanswer = 0x%x\n",pdata[i]);
   215e4:	e0bfffc3 	ldbu	r2,-1(fp)
   215e8:	e0fffc17 	ldw	r3,-16(fp)
   215ec:	1885883a 	add	r2,r3,r2
   215f0:	10800003 	ldbu	r2,0(r2)
   215f4:	10803fcc 	andi	r2,r2,255
   215f8:	100b883a 	mov	r5,r2
   215fc:	010000b4 	movhi	r4,2
   21600:	21105e04 	addi	r4,r4,16760
   21604:	0021c380 	call	21c38 <printf>
			i=i+1;
   21608:	e0bfffc3 	ldbu	r2,-1(fp)
   2160c:	10800044 	addi	r2,r2,1
   21610:	e0bfffc5 	stb	r2,-1(fp)
		for (i=0; i<size;){ //i = regaddr6
   21614:	e0ffffc3 	ldbu	r3,-1(fp)
   21618:	e0bffb0b 	ldhu	r2,-20(fp)
   2161c:	18ffffcc 	andi	r3,r3,65535
   21620:	18bfe736 	bltu	r3,r2,215c0 <myI2CReadWrite+0x88>
		}
		pdata[i]= Water_I2C_read(I2CA_BASE_1,1);
   21624:	01400044 	movi	r5,1
   21628:	0009883a 	mov	r4,zero
   2162c:	002180c0 	call	2180c <Water_I2C_read>
   21630:	1009883a 	mov	r4,r2
   21634:	e0bfffc3 	ldbu	r2,-1(fp)
   21638:	e0fffc17 	ldw	r3,-16(fp)
   2163c:	1885883a 	add	r2,r3,r2
   21640:	2007883a 	mov	r3,r4
   21644:	10c00005 	stb	r3,0(r2)
		printf("\tres_last = 0x%x\n",pdata[i]);
   21648:	e0bfffc3 	ldbu	r2,-1(fp)
   2164c:	e0fffc17 	ldw	r3,-16(fp)
   21650:	1885883a 	add	r2,r3,r2
   21654:	10800003 	ldbu	r2,0(r2)
   21658:	10803fcc 	andi	r2,r2,255
   2165c:	100b883a 	mov	r5,r2
   21660:	010000b4 	movhi	r4,2
   21664:	21106204 	addi	r4,r4,16776
   21668:	0021c380 	call	21c38 <printf>
   2166c:	00002a06 	br	21718 <myI2CReadWrite+0x1e0>
	} else if (RW == 0) {
   21670:	e0bffe03 	ldbu	r2,-8(fp)
   21674:	1000281e 	bne	r2,zero,21718 <myI2CReadWrite+0x1e0>

		Water_I2C_start(I2CA_BASE_1,0x4Cu,0);
   21678:	000d883a 	mov	r6,zero
   2167c:	01401304 	movi	r5,76
   21680:	01000134 	movhi	r4,4
   21684:	21044004 	addi	r4,r4,4352
   21688:	00217300 	call	21730 <Water_I2C_start>
		for (i = 0; i < size; i++){
   2168c:	e03fffc5 	stb	zero,-1(fp)
   21690:	00000c06 	br	216c4 <myI2CReadWrite+0x18c>
			Water_I2C_write(I2CA_BASE_1,pdata[i],0);
   21694:	e0bfffc3 	ldbu	r2,-1(fp)
   21698:	e0fffc17 	ldw	r3,-16(fp)
   2169c:	1885883a 	add	r2,r3,r2
   216a0:	10800003 	ldbu	r2,0(r2)
   216a4:	10803fcc 	andi	r2,r2,255
   216a8:	000d883a 	mov	r6,zero
   216ac:	100b883a 	mov	r5,r2
   216b0:	0009883a 	mov	r4,zero
   216b4:	00218b80 	call	218b8 <Water_I2C_write>
		for (i = 0; i < size; i++){
   216b8:	e0bfffc3 	ldbu	r2,-1(fp)
   216bc:	10800044 	addi	r2,r2,1
   216c0:	e0bfffc5 	stb	r2,-1(fp)
   216c4:	e0ffffc3 	ldbu	r3,-1(fp)
   216c8:	e0bffb0b 	ldhu	r2,-20(fp)
   216cc:	18ffffcc 	andi	r3,r3,65535
   216d0:	18bff036 	bltu	r3,r2,21694 <myI2CReadWrite+0x15c>
		}
		Water_I2C_write(I2CA_BASE_1,pdata[i],1);  // write last one with last flag
   216d4:	e0bfffc3 	ldbu	r2,-1(fp)
   216d8:	e0fffc17 	ldw	r3,-16(fp)
   216dc:	1885883a 	add	r2,r3,r2
   216e0:	10800003 	ldbu	r2,0(r2)
   216e4:	10803fcc 	andi	r2,r2,255
   216e8:	01800044 	movi	r6,1
   216ec:	100b883a 	mov	r5,r2
   216f0:	0009883a 	mov	r4,zero
   216f4:	00218b80 	call	218b8 <Water_I2C_write>
		while (Water_I2C_start(I2CA_BASE_1,0x4Cu,0));
   216f8:	0001883a 	nop
   216fc:	000d883a 	mov	r6,zero
   21700:	01401304 	movi	r5,76
   21704:	01000134 	movhi	r4,4
   21708:	21044004 	addi	r4,r4,4352
   2170c:	00217300 	call	21730 <Water_I2C_start>
   21710:	103ffa1e 	bne	r2,zero,216fc <myI2CReadWrite+0x1c4>
		i = 0;
   21714:	e03fffc5 	stb	zero,-1(fp)
	}
	return 0;
   21718:	0005883a 	mov	r2,zero
}
   2171c:	e037883a 	mov	sp,fp
   21720:	dfc00117 	ldw	ra,4(sp)
   21724:	df000017 	ldw	fp,0(sp)
   21728:	dec00204 	addi	sp,sp,8
   2172c:	f800283a 	ret

00021730 <Water_I2C_start>:
 return value
 0 if address is acknowledged
 1 if address was not acknowledged0x50
 15-OCT-07 initial release
 *****************************************************************/
int Water_I2C_start(alt_u32 base, alt_u32 add, alt_u8 read) {
   21730:	defffb04 	addi	sp,sp,-20
   21734:	dfc00415 	stw	ra,16(sp)
   21738:	df000315 	stw	fp,12(sp)
   2173c:	df000304 	addi	fp,sp,12
   21740:	e13fff15 	stw	r4,-4(fp)
   21744:	e17ffe15 	stw	r5,-8(fp)
   21748:	3005883a 	mov	r2,r6
   2174c:	e0bffd05 	stb	r2,-12(fp)
#ifdef  I2C_DEBUG
	printf(
   21750:	e0bffd03 	ldbu	r2,-12(fp)
   21754:	100f883a 	mov	r7,r2
   21758:	e1bffe17 	ldw	r6,-8(fp)
   2175c:	e17fff17 	ldw	r5,-4(fp)
   21760:	010000b4 	movhi	r4,2
   21764:	21106704 	addi	r4,r4,16796
   21768:	0021c380 	call	21c38 <printf>
			" Start  I2C at 0x%x, \n\twith address 0x%x \n\tand read 0x%x \n\tand prescale 0x%x\n",
			base, add, read);
#endif

	/* transmit the address shifted by one and the read/write bit*/
	IOWR_I2C_OPENCORES_TXR(base, ((add << 1) + (0x1 & read)));
   2176c:	e0bfff17 	ldw	r2,-4(fp)
   21770:	10800304 	addi	r2,r2,12
   21774:	1007883a 	mov	r3,r2
   21778:	e0bffe17 	ldw	r2,-8(fp)
   2177c:	1085883a 	add	r2,r2,r2
   21780:	1009883a 	mov	r4,r2
   21784:	e0bffd03 	ldbu	r2,-12(fp)
   21788:	1080004c 	andi	r2,r2,1
   2178c:	2085883a 	add	r2,r4,r2
   21790:	18800035 	stwio	r2,0(r3)

	/* set start and write  bits which will start the transaction*/
	IOWR_I2C_OPENCORES_CR(base,
   21794:	e0bfff17 	ldw	r2,-4(fp)
   21798:	10800404 	addi	r2,r2,16
   2179c:	1007883a 	mov	r3,r2
   217a0:	00802404 	movi	r2,144
   217a4:	18800035 	stwio	r2,0(r3)
			I2C_OPENCORES_CR_STA_MSK | I2C_OPENCORES_CR_WR_MSK);

	/* wait for the transaction to be over.*/
	while ( IORD_I2C_OPENCORES_SR(base) & I2C_OPENCORES_SR_TIP_MSK)
   217a8:	0001883a 	nop
   217ac:	e0bfff17 	ldw	r2,-4(fp)
   217b0:	10800404 	addi	r2,r2,16
   217b4:	10800037 	ldwio	r2,0(r2)
   217b8:	1080008c 	andi	r2,r2,2
   217bc:	103ffb1e 	bne	r2,zero,217ac <Water_I2C_start+0x7c>
		;

	/* now check to see if the address was acknowledged */
	if(IORD_I2C_OPENCORES_SR(base) & I2C_OPENCORES_SR_RXNACK_MSK)
   217c0:	e0bfff17 	ldw	r2,-4(fp)
   217c4:	10800404 	addi	r2,r2,16
   217c8:	10800037 	ldwio	r2,0(r2)
   217cc:	1080200c 	andi	r2,r2,128
   217d0:	10000526 	beq	r2,zero,217e8 <Water_I2C_start+0xb8>
	{
#ifdef  I2C_DEBUG
		printf("\tNOACK\n");
   217d4:	010000b4 	movhi	r4,2
   217d8:	21107b04 	addi	r4,r4,16876
   217dc:	0021d200 	call	21d20 <puts>
#endif
		return (I2C_NOACK);
   217e0:	00800044 	movi	r2,1
   217e4:	00000406 	br	217f8 <Water_I2C_start+0xc8>
	}
	else
	{
#ifdef  I2C_DEBUG
		printf("\tACK\n");
   217e8:	010000b4 	movhi	r4,2
   217ec:	21107d04 	addi	r4,r4,16884
   217f0:	0021d200 	call	21d20 <puts>
#endif
		return (I2C_ACK);
   217f4:	0005883a 	mov	r2,zero
	}
}
   217f8:	e037883a 	mov	sp,fp
   217fc:	dfc00117 	ldw	ra,4(sp)
   21800:	df000017 	ldw	fp,0(sp)
   21804:	dec00204 	addi	sp,sp,8
   21808:	f800283a 	ret

0002180c <Water_I2C_read>:

 return value
 byte read back.
 15-OCT-07 initial release
 *****************************************************************/
alt_u32 Water_I2C_read(alt_u8 base, alt_u16 last) {
   2180c:	defffc04 	addi	sp,sp,-16
   21810:	dfc00315 	stw	ra,12(sp)
   21814:	df000215 	stw	fp,8(sp)
   21818:	df000204 	addi	fp,sp,8
   2181c:	2005883a 	mov	r2,r4
   21820:	2807883a 	mov	r3,r5
   21824:	e0bfff05 	stb	r2,-4(fp)
   21828:	1805883a 	mov	r2,r3
   2182c:	e0bffe0d 	sth	r2,-8(fp)
#ifdef  I2C_DEBUG
	printf(" Read I2C at 0x%x, \n\twith last0x%x\n", base, last);
   21830:	e0bfff03 	ldbu	r2,-4(fp)
   21834:	e0fffe0b 	ldhu	r3,-8(fp)
   21838:	180d883a 	mov	r6,r3
   2183c:	100b883a 	mov	r5,r2
   21840:	010000b4 	movhi	r4,2
   21844:	21107f04 	addi	r4,r4,16892
   21848:	0021c380 	call	21c38 <printf>
#endif
	if (last) {
   2184c:	e0bffe0b 	ldhu	r2,-8(fp)
   21850:	10000626 	beq	r2,zero,2186c <Water_I2C_read+0x60>
		/* start a read and no ack and stop bit*/
		IOWR_I2C_OPENCORES_CR(base,
   21854:	e0bfff03 	ldbu	r2,-4(fp)
   21858:	10800404 	addi	r2,r2,16
   2185c:	1007883a 	mov	r3,r2
   21860:	00801a04 	movi	r2,104
   21864:	18800035 	stwio	r2,0(r3)
   21868:	00000506 	br	21880 <Water_I2C_read+0x74>
				I2C_OPENCORES_CR_RD_MSK | I2C_OPENCORES_CR_NACK_MSK | I2C_OPENCORES_CR_STO_MSK);
	} else {
		/* start read*/
		IOWR_I2C_OPENCORES_CR(base, I2C_OPENCORES_CR_RD_MSK);
   2186c:	e0bfff03 	ldbu	r2,-4(fp)
   21870:	10800404 	addi	r2,r2,16
   21874:	1007883a 	mov	r3,r2
   21878:	00800804 	movi	r2,32
   2187c:	18800035 	stwio	r2,0(r3)
	}
	/* wait for the trnasaction to be over.*/
	while ( IORD_I2C_OPENCORES_SR(base) & I2C_OPENCORES_SR_TIP_MSK)
   21880:	0001883a 	nop
   21884:	e0bfff03 	ldbu	r2,-4(fp)
   21888:	10800404 	addi	r2,r2,16
   2188c:	10800037 	ldwio	r2,0(r2)
   21890:	1080008c 	andi	r2,r2,2
   21894:	103ffb1e 	bne	r2,zero,21884 <Water_I2C_read+0x78>
		;
	/* now read the data */
	return (IORD_I2C_OPENCORES_RXR(base));
   21898:	e0bfff03 	ldbu	r2,-4(fp)
   2189c:	10800304 	addi	r2,r2,12
   218a0:	10800037 	ldwio	r2,0(r2)

}
   218a4:	e037883a 	mov	sp,fp
   218a8:	dfc00117 	ldw	ra,4(sp)
   218ac:	df000017 	ldw	fp,0(sp)
   218b0:	dec00204 	addi	sp,sp,8
   218b4:	f800283a 	ret

000218b8 <Water_I2C_write>:
 return value
 0 if address is acknowledged
 1 if address was not acknowledged
 15-OCT-07 initial release
 *****************************************************************/
uint8_t Water_I2C_write(alt_u8 base, uint8_t data, alt_u16 last) {
   218b8:	defffb04 	addi	sp,sp,-20
   218bc:	dfc00415 	stw	ra,16(sp)
   218c0:	df000315 	stw	fp,12(sp)
   218c4:	df000304 	addi	fp,sp,12
   218c8:	2005883a 	mov	r2,r4
   218cc:	2809883a 	mov	r4,r5
   218d0:	3007883a 	mov	r3,r6
   218d4:	e0bfff05 	stb	r2,-4(fp)
   218d8:	2005883a 	mov	r2,r4
   218dc:	e0bffe05 	stb	r2,-8(fp)
   218e0:	1805883a 	mov	r2,r3
   218e4:	e0bffd0d 	sth	r2,-12(fp)
#ifdef  I2C_DEBUG
	printf(" Read I2C at 0x%x, \n\twith data 0x%x,\n\twith last0x%x\n", base,
   218e8:	e0bfff03 	ldbu	r2,-4(fp)
   218ec:	e0fffe03 	ldbu	r3,-8(fp)
   218f0:	e13ffd0b 	ldhu	r4,-12(fp)
   218f4:	200f883a 	mov	r7,r4
   218f8:	180d883a 	mov	r6,r3
   218fc:	100b883a 	mov	r5,r2
   21900:	010000b4 	movhi	r4,2
   21904:	21108804 	addi	r4,r4,16928
   21908:	0021c380 	call	21c38 <printf>
			data, last);
#endif
	/* transmit the data*/
	IOWR_I2C_OPENCORES_TXR(base, data);
   2190c:	e0bfff03 	ldbu	r2,-4(fp)
   21910:	10800304 	addi	r2,r2,12
   21914:	1007883a 	mov	r3,r2
   21918:	e0bffe03 	ldbu	r2,-8(fp)
   2191c:	18800035 	stwio	r2,0(r3)

	if (last) {
   21920:	e0bffd0b 	ldhu	r2,-12(fp)
   21924:	10000626 	beq	r2,zero,21940 <Water_I2C_write+0x88>
		/* start a read and no ack and stop bit*/
		IOWR_I2C_OPENCORES_CR(base,
   21928:	e0bfff03 	ldbu	r2,-4(fp)
   2192c:	10800404 	addi	r2,r2,16
   21930:	1007883a 	mov	r3,r2
   21934:	00801404 	movi	r2,80
   21938:	18800035 	stwio	r2,0(r3)
   2193c:	00000506 	br	21954 <Water_I2C_write+0x9c>
				I2C_OPENCORES_CR_WR_MSK | I2C_OPENCORES_CR_STO_MSK);
	} else {
		/* start read*/
		IOWR_I2C_OPENCORES_CR(base, I2C_OPENCORES_CR_WR_MSK);
   21940:	e0bfff03 	ldbu	r2,-4(fp)
   21944:	10800404 	addi	r2,r2,16
   21948:	1007883a 	mov	r3,r2
   2194c:	00800404 	movi	r2,16
   21950:	18800035 	stwio	r2,0(r3)
	}
	/* wait for the trnasaction to be over.*/
	while ( IORD_I2C_OPENCORES_SR(base) & I2C_OPENCORES_SR_TIP_MSK)
   21954:	0001883a 	nop
   21958:	e0bfff03 	ldbu	r2,-4(fp)
   2195c:	10800404 	addi	r2,r2,16
   21960:	10800037 	ldwio	r2,0(r2)
   21964:	1080008c 	andi	r2,r2,2
   21968:	103ffb1e 	bne	r2,zero,21958 <Water_I2C_write+0xa0>
		;

	/* now check to see if the address was acknowledged */
	if(IORD_I2C_OPENCORES_SR(base) & I2C_OPENCORES_SR_RXNACK_MSK)
   2196c:	e0bfff03 	ldbu	r2,-4(fp)
   21970:	10800404 	addi	r2,r2,16
   21974:	10800037 	ldwio	r2,0(r2)
   21978:	1080200c 	andi	r2,r2,128
   2197c:	10000526 	beq	r2,zero,21994 <Water_I2C_write+0xdc>
	{
#ifdef  I2C_DEBUG
		printf("\tNOACK\n");
   21980:	010000b4 	movhi	r4,2
   21984:	21107b04 	addi	r4,r4,16876
   21988:	0021d200 	call	21d20 <puts>
#endif
		return (I2C_NOACK);
   2198c:	00800044 	movi	r2,1
   21990:	00000406 	br	219a4 <Water_I2C_write+0xec>
	}
	else
	{
#ifdef  I2C_DEBUG
		printf("\tACK\n");
   21994:	010000b4 	movhi	r4,2
   21998:	21107d04 	addi	r4,r4,16884
   2199c:	0021d200 	call	21d20 <puts>
#endif
		return (I2C_ACK);
   219a0:	0005883a 	mov	r2,zero
	}

}
   219a4:	e037883a 	mov	sp,fp
   219a8:	dfc00117 	ldw	ra,4(sp)
   219ac:	df000017 	ldw	fp,0(sp)
   219b0:	dec00204 	addi	sp,sp,8
   219b4:	f800283a 	ret

000219b8 <__divsi3>:
   219b8:	20001a16 	blt	r4,zero,21a24 <__divsi3+0x6c>
   219bc:	000f883a 	mov	r7,zero
   219c0:	2800020e 	bge	r5,zero,219cc <__divsi3+0x14>
   219c4:	014bc83a 	sub	r5,zero,r5
   219c8:	39c0005c 	xori	r7,r7,1
   219cc:	200d883a 	mov	r6,r4
   219d0:	00c00044 	movi	r3,1
   219d4:	2900092e 	bgeu	r5,r4,219fc <__divsi3+0x44>
   219d8:	00800804 	movi	r2,32
   219dc:	00c00044 	movi	r3,1
   219e0:	00000106 	br	219e8 <__divsi3+0x30>
   219e4:	10001226 	beq	r2,zero,21a30 <__divsi3+0x78>
   219e8:	294b883a 	add	r5,r5,r5
   219ec:	10bfffc4 	addi	r2,r2,-1
   219f0:	18c7883a 	add	r3,r3,r3
   219f4:	293ffb36 	bltu	r5,r4,219e4 <__divsi3+0x2c>
   219f8:	18000d26 	beq	r3,zero,21a30 <__divsi3+0x78>
   219fc:	0005883a 	mov	r2,zero
   21a00:	31400236 	bltu	r6,r5,21a0c <__divsi3+0x54>
   21a04:	314dc83a 	sub	r6,r6,r5
   21a08:	10c4b03a 	or	r2,r2,r3
   21a0c:	1806d07a 	srli	r3,r3,1
   21a10:	280ad07a 	srli	r5,r5,1
   21a14:	183ffa1e 	bne	r3,zero,21a00 <__divsi3+0x48>
   21a18:	38000126 	beq	r7,zero,21a20 <__divsi3+0x68>
   21a1c:	0085c83a 	sub	r2,zero,r2
   21a20:	f800283a 	ret
   21a24:	0109c83a 	sub	r4,zero,r4
   21a28:	01c00044 	movi	r7,1
   21a2c:	003fe406 	br	219c0 <__divsi3+0x8>
   21a30:	0005883a 	mov	r2,zero
   21a34:	003ff806 	br	21a18 <__divsi3+0x60>

00021a38 <__modsi3>:
   21a38:	20001916 	blt	r4,zero,21aa0 <__modsi3+0x68>
   21a3c:	000f883a 	mov	r7,zero
   21a40:	2005883a 	mov	r2,r4
   21a44:	2800010e 	bge	r5,zero,21a4c <__modsi3+0x14>
   21a48:	014bc83a 	sub	r5,zero,r5
   21a4c:	00c00044 	movi	r3,1
   21a50:	2900092e 	bgeu	r5,r4,21a78 <__modsi3+0x40>
   21a54:	01800804 	movi	r6,32
   21a58:	00c00044 	movi	r3,1
   21a5c:	00000106 	br	21a64 <__modsi3+0x2c>
   21a60:	30000d26 	beq	r6,zero,21a98 <__modsi3+0x60>
   21a64:	294b883a 	add	r5,r5,r5
   21a68:	31bfffc4 	addi	r6,r6,-1
   21a6c:	18c7883a 	add	r3,r3,r3
   21a70:	293ffb36 	bltu	r5,r4,21a60 <__modsi3+0x28>
   21a74:	18000826 	beq	r3,zero,21a98 <__modsi3+0x60>
   21a78:	1806d07a 	srli	r3,r3,1
   21a7c:	11400136 	bltu	r2,r5,21a84 <__modsi3+0x4c>
   21a80:	1145c83a 	sub	r2,r2,r5
   21a84:	280ad07a 	srli	r5,r5,1
   21a88:	183ffb1e 	bne	r3,zero,21a78 <__modsi3+0x40>
   21a8c:	38000126 	beq	r7,zero,21a94 <__modsi3+0x5c>
   21a90:	0085c83a 	sub	r2,zero,r2
   21a94:	f800283a 	ret
   21a98:	2005883a 	mov	r2,r4
   21a9c:	003ffb06 	br	21a8c <__modsi3+0x54>
   21aa0:	0109c83a 	sub	r4,zero,r4
   21aa4:	01c00044 	movi	r7,1
   21aa8:	003fe506 	br	21a40 <__modsi3+0x8>

00021aac <__udivsi3>:
   21aac:	200d883a 	mov	r6,r4
   21ab0:	2900152e 	bgeu	r5,r4,21b08 <__udivsi3+0x5c>
   21ab4:	28001416 	blt	r5,zero,21b08 <__udivsi3+0x5c>
   21ab8:	00800804 	movi	r2,32
   21abc:	00c00044 	movi	r3,1
   21ac0:	00000206 	br	21acc <__udivsi3+0x20>
   21ac4:	10000e26 	beq	r2,zero,21b00 <__udivsi3+0x54>
   21ac8:	28000516 	blt	r5,zero,21ae0 <__udivsi3+0x34>
   21acc:	294b883a 	add	r5,r5,r5
   21ad0:	10bfffc4 	addi	r2,r2,-1
   21ad4:	18c7883a 	add	r3,r3,r3
   21ad8:	293ffa36 	bltu	r5,r4,21ac4 <__udivsi3+0x18>
   21adc:	18000826 	beq	r3,zero,21b00 <__udivsi3+0x54>
   21ae0:	0005883a 	mov	r2,zero
   21ae4:	31400236 	bltu	r6,r5,21af0 <__udivsi3+0x44>
   21ae8:	314dc83a 	sub	r6,r6,r5
   21aec:	10c4b03a 	or	r2,r2,r3
   21af0:	1806d07a 	srli	r3,r3,1
   21af4:	280ad07a 	srli	r5,r5,1
   21af8:	183ffa1e 	bne	r3,zero,21ae4 <__udivsi3+0x38>
   21afc:	f800283a 	ret
   21b00:	0005883a 	mov	r2,zero
   21b04:	f800283a 	ret
   21b08:	00c00044 	movi	r3,1
   21b0c:	003ff406 	br	21ae0 <__udivsi3+0x34>

00021b10 <__umodsi3>:
   21b10:	2005883a 	mov	r2,r4
   21b14:	2900132e 	bgeu	r5,r4,21b64 <__umodsi3+0x54>
   21b18:	28001216 	blt	r5,zero,21b64 <__umodsi3+0x54>
   21b1c:	01800804 	movi	r6,32
   21b20:	00c00044 	movi	r3,1
   21b24:	00000206 	br	21b30 <__umodsi3+0x20>
   21b28:	30000c26 	beq	r6,zero,21b5c <__umodsi3+0x4c>
   21b2c:	28000516 	blt	r5,zero,21b44 <__umodsi3+0x34>
   21b30:	294b883a 	add	r5,r5,r5
   21b34:	31bfffc4 	addi	r6,r6,-1
   21b38:	18c7883a 	add	r3,r3,r3
   21b3c:	293ffa36 	bltu	r5,r4,21b28 <__umodsi3+0x18>
   21b40:	18000626 	beq	r3,zero,21b5c <__umodsi3+0x4c>
   21b44:	1806d07a 	srli	r3,r3,1
   21b48:	11400136 	bltu	r2,r5,21b50 <__umodsi3+0x40>
   21b4c:	1145c83a 	sub	r2,r2,r5
   21b50:	280ad07a 	srli	r5,r5,1
   21b54:	183ffb1e 	bne	r3,zero,21b44 <__umodsi3+0x34>
   21b58:	f800283a 	ret
   21b5c:	2005883a 	mov	r2,r4
   21b60:	f800283a 	ret
   21b64:	00c00044 	movi	r3,1
   21b68:	003ff606 	br	21b44 <__umodsi3+0x34>

00021b6c <__fixsfsi>:
   21b6c:	200ad5fa 	srli	r5,r4,23
   21b70:	00c02034 	movhi	r3,128
   21b74:	18ffffc4 	addi	r3,r3,-1
   21b78:	29403fcc 	andi	r5,r5,255
   21b7c:	29801fd0 	cmplti	r6,r5,127
   21b80:	200ed7fa 	srli	r7,r4,31
   21b84:	1906703a 	and	r3,r3,r4
   21b88:	3000061e 	bne	r6,zero,21ba4 <__fixsfsi+0x38>
   21b8c:	28802790 	cmplti	r2,r5,158
   21b90:	1000061e 	bne	r2,zero,21bac <__fixsfsi+0x40>
   21b94:	00a00034 	movhi	r2,32768
   21b98:	10bfffc4 	addi	r2,r2,-1
   21b9c:	3885883a 	add	r2,r7,r2
   21ba0:	f800283a 	ret
   21ba4:	0005883a 	mov	r2,zero
   21ba8:	f800283a 	ret
   21bac:	28802590 	cmplti	r2,r5,150
   21bb0:	18c02034 	orhi	r3,r3,128
   21bb4:	1000051e 	bne	r2,zero,21bcc <__fixsfsi+0x60>
   21bb8:	28bfda84 	addi	r2,r5,-150
   21bbc:	1884983a 	sll	r2,r3,r2
   21bc0:	383ff926 	beq	r7,zero,21ba8 <__fixsfsi+0x3c>
   21bc4:	0085c83a 	sub	r2,zero,r2
   21bc8:	f800283a 	ret
   21bcc:	00802584 	movi	r2,150
   21bd0:	1145c83a 	sub	r2,r2,r5
   21bd4:	1884d83a 	srl	r2,r3,r2
   21bd8:	003ff906 	br	21bc0 <__fixsfsi+0x54>

00021bdc <memset>:
   21bdc:	2005883a 	mov	r2,r4
   21be0:	218d883a 	add	r6,r4,r6
   21be4:	2007883a 	mov	r3,r4
   21be8:	1980011e 	bne	r3,r6,21bf0 <memset+0x14>
   21bec:	f800283a 	ret
   21bf0:	18c00044 	addi	r3,r3,1
   21bf4:	197fffc5 	stb	r5,-1(r3)
   21bf8:	003ffb06 	br	21be8 <memset+0xc>

00021bfc <_printf_r>:
   21bfc:	defffd04 	addi	sp,sp,-12
   21c00:	dfc00015 	stw	ra,0(sp)
   21c04:	d9800115 	stw	r6,4(sp)
   21c08:	d9c00215 	stw	r7,8(sp)
   21c0c:	21800217 	ldw	r6,8(r4)
   21c10:	00c000b4 	movhi	r3,2
   21c14:	18c8b704 	addi	r3,r3,8924
   21c18:	30c00115 	stw	r3,4(r6)
   21c1c:	280d883a 	mov	r6,r5
   21c20:	21400217 	ldw	r5,8(r4)
   21c24:	d9c00104 	addi	r7,sp,4
   21c28:	0021db80 	call	21db8 <___vfprintf_internal_r>
   21c2c:	dfc00017 	ldw	ra,0(sp)
   21c30:	dec00304 	addi	sp,sp,12
   21c34:	f800283a 	ret

00021c38 <printf>:
   21c38:	defffc04 	addi	sp,sp,-16
   21c3c:	dfc00015 	stw	ra,0(sp)
   21c40:	d9400115 	stw	r5,4(sp)
   21c44:	d9800215 	stw	r6,8(sp)
   21c48:	d9c00315 	stw	r7,12(sp)
   21c4c:	008000b4 	movhi	r2,2
   21c50:	10d15717 	ldw	r3,17756(r2)
   21c54:	008000b4 	movhi	r2,2
   21c58:	1088b704 	addi	r2,r2,8924
   21c5c:	19400217 	ldw	r5,8(r3)
   21c60:	d9800104 	addi	r6,sp,4
   21c64:	28800115 	stw	r2,4(r5)
   21c68:	200b883a 	mov	r5,r4
   21c6c:	19000217 	ldw	r4,8(r3)
   21c70:	00222c40 	call	222c4 <__vfprintf_internal>
   21c74:	dfc00017 	ldw	ra,0(sp)
   21c78:	dec00404 	addi	sp,sp,16
   21c7c:	f800283a 	ret

00021c80 <_putchar_r>:
   21c80:	21800217 	ldw	r6,8(r4)
   21c84:	00223d41 	jmpi	223d4 <_putc_r>

00021c88 <putchar>:
   21c88:	008000b4 	movhi	r2,2
   21c8c:	10915717 	ldw	r2,17756(r2)
   21c90:	200b883a 	mov	r5,r4
   21c94:	11800217 	ldw	r6,8(r2)
   21c98:	1009883a 	mov	r4,r2
   21c9c:	00223d41 	jmpi	223d4 <_putc_r>

00021ca0 <_puts_r>:
   21ca0:	defffd04 	addi	sp,sp,-12
   21ca4:	dc000015 	stw	r16,0(sp)
   21ca8:	2021883a 	mov	r16,r4
   21cac:	2809883a 	mov	r4,r5
   21cb0:	dfc00215 	stw	ra,8(sp)
   21cb4:	dc400115 	stw	r17,4(sp)
   21cb8:	2823883a 	mov	r17,r5
   21cbc:	0021d300 	call	21d30 <strlen>
   21cc0:	81400217 	ldw	r5,8(r16)
   21cc4:	00c000b4 	movhi	r3,2
   21cc8:	18c8b704 	addi	r3,r3,8924
   21ccc:	28c00115 	stw	r3,4(r5)
   21cd0:	100f883a 	mov	r7,r2
   21cd4:	880d883a 	mov	r6,r17
   21cd8:	8009883a 	mov	r4,r16
   21cdc:	00222dc0 	call	222dc <__sfvwrite_small_dev>
   21ce0:	10ffffe0 	cmpeqi	r3,r2,-1
   21ce4:	1800091e 	bne	r3,zero,21d0c <_puts_r+0x6c>
   21ce8:	81400217 	ldw	r5,8(r16)
   21cec:	018000b4 	movhi	r6,2
   21cf0:	01c00044 	movi	r7,1
   21cf4:	28800117 	ldw	r2,4(r5)
   21cf8:	31909604 	addi	r6,r6,16984
   21cfc:	8009883a 	mov	r4,r16
   21d00:	103ee83a 	callr	r2
   21d04:	10bfffe0 	cmpeqi	r2,r2,-1
   21d08:	0085c83a 	sub	r2,zero,r2
   21d0c:	dfc00217 	ldw	ra,8(sp)
   21d10:	dc400117 	ldw	r17,4(sp)
   21d14:	dc000017 	ldw	r16,0(sp)
   21d18:	dec00304 	addi	sp,sp,12
   21d1c:	f800283a 	ret

00021d20 <puts>:
   21d20:	008000b4 	movhi	r2,2
   21d24:	200b883a 	mov	r5,r4
   21d28:	11115717 	ldw	r4,17756(r2)
   21d2c:	0021ca01 	jmpi	21ca0 <_puts_r>

00021d30 <strlen>:
   21d30:	2005883a 	mov	r2,r4
   21d34:	10c00007 	ldb	r3,0(r2)
   21d38:	1800021e 	bne	r3,zero,21d44 <strlen+0x14>
   21d3c:	1105c83a 	sub	r2,r2,r4
   21d40:	f800283a 	ret
   21d44:	10800044 	addi	r2,r2,1
   21d48:	003ffa06 	br	21d34 <strlen+0x4>

00021d4c <print_repeat>:
   21d4c:	defffb04 	addi	sp,sp,-20
   21d50:	dc800315 	stw	r18,12(sp)
   21d54:	dc400215 	stw	r17,8(sp)
   21d58:	dc000115 	stw	r16,4(sp)
   21d5c:	dfc00415 	stw	ra,16(sp)
   21d60:	2025883a 	mov	r18,r4
   21d64:	2823883a 	mov	r17,r5
   21d68:	d9800005 	stb	r6,0(sp)
   21d6c:	3821883a 	mov	r16,r7
   21d70:	04000716 	blt	zero,r16,21d90 <print_repeat+0x44>
   21d74:	0005883a 	mov	r2,zero
   21d78:	dfc00417 	ldw	ra,16(sp)
   21d7c:	dc800317 	ldw	r18,12(sp)
   21d80:	dc400217 	ldw	r17,8(sp)
   21d84:	dc000117 	ldw	r16,4(sp)
   21d88:	dec00504 	addi	sp,sp,20
   21d8c:	f800283a 	ret
   21d90:	88800117 	ldw	r2,4(r17)
   21d94:	01c00044 	movi	r7,1
   21d98:	d80d883a 	mov	r6,sp
   21d9c:	880b883a 	mov	r5,r17
   21da0:	9009883a 	mov	r4,r18
   21da4:	103ee83a 	callr	r2
   21da8:	843fffc4 	addi	r16,r16,-1
   21dac:	103ff026 	beq	r2,zero,21d70 <print_repeat+0x24>
   21db0:	00bfffc4 	movi	r2,-1
   21db4:	003ff006 	br	21d78 <print_repeat+0x2c>

00021db8 <___vfprintf_internal_r>:
   21db8:	deffe604 	addi	sp,sp,-104
   21dbc:	df001815 	stw	fp,96(sp)
   21dc0:	ddc01715 	stw	r23,92(sp)
   21dc4:	dd801615 	stw	r22,88(sp)
   21dc8:	dd001415 	stw	r20,80(sp)
   21dcc:	dcc01315 	stw	r19,76(sp)
   21dd0:	dc801215 	stw	r18,72(sp)
   21dd4:	dc401115 	stw	r17,68(sp)
   21dd8:	dc001015 	stw	r16,64(sp)
   21ddc:	dfc01915 	stw	ra,100(sp)
   21de0:	dd401515 	stw	r21,84(sp)
   21de4:	2021883a 	mov	r16,r4
   21de8:	282f883a 	mov	r23,r5
   21dec:	d9800515 	stw	r6,20(sp)
   21df0:	3839883a 	mov	fp,r7
   21df4:	002d883a 	mov	r22,zero
   21df8:	d8000215 	stw	zero,8(sp)
   21dfc:	0027883a 	mov	r19,zero
   21e00:	0029883a 	mov	r20,zero
   21e04:	0025883a 	mov	r18,zero
   21e08:	0023883a 	mov	r17,zero
   21e0c:	d8000115 	stw	zero,4(sp)
   21e10:	d8000015 	stw	zero,0(sp)
   21e14:	0005883a 	mov	r2,zero
   21e18:	00000206 	br	21e24 <___vfprintf_internal_r+0x6c>
   21e1c:	114000e0 	cmpeqi	r5,r2,3
   21e20:	28003f1e 	bne	r5,zero,21f20 <___vfprintf_internal_r+0x168>
   21e24:	d8c00517 	ldw	r3,20(sp)
   21e28:	19000003 	ldbu	r4,0(r3)
   21e2c:	18c00044 	addi	r3,r3,1
   21e30:	d8c00515 	stw	r3,20(sp)
   21e34:	21803fcc 	andi	r6,r4,255
   21e38:	3180201c 	xori	r6,r6,128
   21e3c:	31bfe004 	addi	r6,r6,-128
   21e40:	30001426 	beq	r6,zero,21e94 <___vfprintf_internal_r+0xdc>
   21e44:	114000a0 	cmpeqi	r5,r2,2
   21e48:	2800231e 	bne	r5,zero,21ed8 <___vfprintf_internal_r+0x120>
   21e4c:	114000c8 	cmpgei	r5,r2,3
   21e50:	283ff21e 	bne	r5,zero,21e1c <___vfprintf_internal_r+0x64>
   21e54:	10000426 	beq	r2,zero,21e68 <___vfprintf_internal_r+0xb0>
   21e58:	10800060 	cmpeqi	r2,r2,1
   21e5c:	10001a1e 	bne	r2,zero,21ec8 <___vfprintf_internal_r+0x110>
   21e60:	00800084 	movi	r2,2
   21e64:	003fef06 	br	21e24 <___vfprintf_internal_r+0x6c>
   21e68:	31800960 	cmpeqi	r6,r6,37
   21e6c:	3000fe1e 	bne	r6,zero,22268 <___vfprintf_internal_r+0x4b0>
   21e70:	b8800117 	ldw	r2,4(r23)
   21e74:	d9000805 	stb	r4,32(sp)
   21e78:	01c00044 	movi	r7,1
   21e7c:	d9800804 	addi	r6,sp,32
   21e80:	b80b883a 	mov	r5,r23
   21e84:	8009883a 	mov	r4,r16
   21e88:	103ee83a 	callr	r2
   21e8c:	10001d26 	beq	r2,zero,21f04 <___vfprintf_internal_r+0x14c>
   21e90:	05bfffc4 	movi	r22,-1
   21e94:	b005883a 	mov	r2,r22
   21e98:	dfc01917 	ldw	ra,100(sp)
   21e9c:	df001817 	ldw	fp,96(sp)
   21ea0:	ddc01717 	ldw	r23,92(sp)
   21ea4:	dd801617 	ldw	r22,88(sp)
   21ea8:	dd401517 	ldw	r21,84(sp)
   21eac:	dd001417 	ldw	r20,80(sp)
   21eb0:	dcc01317 	ldw	r19,76(sp)
   21eb4:	dc801217 	ldw	r18,72(sp)
   21eb8:	dc401117 	ldw	r17,68(sp)
   21ebc:	dc001017 	ldw	r16,64(sp)
   21ec0:	dec01a04 	addi	sp,sp,104
   21ec4:	f800283a 	ret
   21ec8:	30800c20 	cmpeqi	r2,r6,48
   21ecc:	1000ef1e 	bne	r2,zero,2228c <___vfprintf_internal_r+0x4d4>
   21ed0:	30800958 	cmpnei	r2,r6,37
   21ed4:	103fe626 	beq	r2,zero,21e70 <___vfprintf_internal_r+0xb8>
   21ed8:	217ff404 	addi	r5,r4,-48
   21edc:	29403fcc 	andi	r5,r5,255
   21ee0:	288002a8 	cmpgeui	r2,r5,10
   21ee4:	10000b1e 	bne	r2,zero,21f14 <___vfprintf_internal_r+0x15c>
   21ee8:	88bfffe0 	cmpeqi	r2,r17,-1
   21eec:	1000071e 	bne	r2,zero,21f0c <___vfprintf_internal_r+0x154>
   21ef0:	880490ba 	slli	r2,r17,2
   21ef4:	1463883a 	add	r17,r2,r17
   21ef8:	8822907a 	slli	r17,r17,1
   21efc:	2c63883a 	add	r17,r5,r17
   21f00:	003fd706 	br	21e60 <___vfprintf_internal_r+0xa8>
   21f04:	b5800044 	addi	r22,r22,1
   21f08:	003fc606 	br	21e24 <___vfprintf_internal_r+0x6c>
   21f0c:	0023883a 	mov	r17,zero
   21f10:	003ffa06 	br	21efc <___vfprintf_internal_r+0x144>
   21f14:	30800ba0 	cmpeqi	r2,r6,46
   21f18:	1000e11e 	bne	r2,zero,222a0 <___vfprintf_internal_r+0x4e8>
   21f1c:	00800084 	movi	r2,2
   21f20:	213ff404 	addi	r4,r4,-48
   21f24:	21003fcc 	andi	r4,r4,255
   21f28:	214002a8 	cmpgeui	r5,r4,10
   21f2c:	2800091e 	bne	r5,zero,21f54 <___vfprintf_internal_r+0x19c>
   21f30:	917fffe0 	cmpeqi	r5,r18,-1
   21f34:	2800051e 	bne	r5,zero,21f4c <___vfprintf_internal_r+0x194>
   21f38:	900a90ba 	slli	r5,r18,2
   21f3c:	2ca5883a 	add	r18,r5,r18
   21f40:	9024907a 	slli	r18,r18,1
   21f44:	24a5883a 	add	r18,r4,r18
   21f48:	003fb606 	br	21e24 <___vfprintf_internal_r+0x6c>
   21f4c:	0025883a 	mov	r18,zero
   21f50:	003ffc06 	br	21f44 <___vfprintf_internal_r+0x18c>
   21f54:	30801b20 	cmpeqi	r2,r6,108
   21f58:	1000cf1e 	bne	r2,zero,22298 <___vfprintf_internal_r+0x4e0>
   21f5c:	90bfffe0 	cmpeqi	r2,r18,-1
   21f60:	10000f1e 	bne	r2,zero,21fa0 <___vfprintf_internal_r+0x1e8>
   21f64:	d8000015 	stw	zero,0(sp)
   21f68:	30801be0 	cmpeqi	r2,r6,111
   21f6c:	1000ce1e 	bne	r2,zero,222a8 <___vfprintf_internal_r+0x4f0>
   21f70:	30801c08 	cmpgei	r2,r6,112
   21f74:	1000171e 	bne	r2,zero,21fd4 <___vfprintf_internal_r+0x21c>
   21f78:	308018e0 	cmpeqi	r2,r6,99
   21f7c:	1000a31e 	bne	r2,zero,2220c <___vfprintf_internal_r+0x454>
   21f80:	30801908 	cmpgei	r2,r6,100
   21f84:	1000081e 	bne	r2,zero,21fa8 <___vfprintf_internal_r+0x1f0>
   21f88:	31801620 	cmpeqi	r6,r6,88
   21f8c:	303fa126 	beq	r6,zero,21e14 <___vfprintf_internal_r+0x5c>
   21f90:	00800044 	movi	r2,1
   21f94:	d8800215 	stw	r2,8(sp)
   21f98:	05000404 	movi	r20,16
   21f9c:	0000c306 	br	222ac <___vfprintf_internal_r+0x4f4>
   21fa0:	04800044 	movi	r18,1
   21fa4:	003ff006 	br	21f68 <___vfprintf_internal_r+0x1b0>
   21fa8:	30801920 	cmpeqi	r2,r6,100
   21fac:	1000021e 	bne	r2,zero,21fb8 <___vfprintf_internal_r+0x200>
   21fb0:	31801a60 	cmpeqi	r6,r6,105
   21fb4:	303f9726 	beq	r6,zero,21e14 <___vfprintf_internal_r+0x5c>
   21fb8:	e0800104 	addi	r2,fp,4
   21fbc:	d8800415 	stw	r2,16(sp)
   21fc0:	9800ba26 	beq	r19,zero,222ac <___vfprintf_internal_r+0x4f4>
   21fc4:	e5400017 	ldw	r21,0(fp)
   21fc8:	a8002216 	blt	r21,zero,22054 <___vfprintf_internal_r+0x29c>
   21fcc:	04c00044 	movi	r19,1
   21fd0:	0000ba06 	br	222bc <___vfprintf_internal_r+0x504>
   21fd4:	30801d60 	cmpeqi	r2,r6,117
   21fd8:	1000b41e 	bne	r2,zero,222ac <___vfprintf_internal_r+0x4f4>
   21fdc:	30801e20 	cmpeqi	r2,r6,120
   21fe0:	103fed1e 	bne	r2,zero,21f98 <___vfprintf_internal_r+0x1e0>
   21fe4:	31801ce0 	cmpeqi	r6,r6,115
   21fe8:	303f8a26 	beq	r6,zero,21e14 <___vfprintf_internal_r+0x5c>
   21fec:	e5400017 	ldw	r21,0(fp)
   21ff0:	e0800104 	addi	r2,fp,4
   21ff4:	d8800315 	stw	r2,12(sp)
   21ff8:	a809883a 	mov	r4,r21
   21ffc:	0021d300 	call	21d30 <strlen>
   22000:	888fc83a 	sub	r7,r17,r2
   22004:	1039883a 	mov	fp,r2
   22008:	01c0080e 	bge	zero,r7,2202c <___vfprintf_internal_r+0x274>
   2200c:	01800804 	movi	r6,32
   22010:	b80b883a 	mov	r5,r23
   22014:	8009883a 	mov	r4,r16
   22018:	d9c00415 	stw	r7,16(sp)
   2201c:	0021d4c0 	call	21d4c <print_repeat>
   22020:	103f9b1e 	bne	r2,zero,21e90 <___vfprintf_internal_r+0xd8>
   22024:	d9c00417 	ldw	r7,16(sp)
   22028:	b1ed883a 	add	r22,r22,r7
   2202c:	b8800117 	ldw	r2,4(r23)
   22030:	e00f883a 	mov	r7,fp
   22034:	a80d883a 	mov	r6,r21
   22038:	b80b883a 	mov	r5,r23
   2203c:	8009883a 	mov	r4,r16
   22040:	103ee83a 	callr	r2
   22044:	103f921e 	bne	r2,zero,21e90 <___vfprintf_internal_r+0xd8>
   22048:	b72d883a 	add	r22,r22,fp
   2204c:	df000317 	ldw	fp,12(sp)
   22050:	003f7406 	br	21e24 <___vfprintf_internal_r+0x6c>
   22054:	056bc83a 	sub	r21,zero,r21
   22058:	04c00044 	movi	r19,1
   2205c:	00c00044 	movi	r3,1
   22060:	df000804 	addi	fp,sp,32
   22064:	e00d883a 	mov	r6,fp
   22068:	a8002e1e 	bne	r21,zero,22124 <___vfprintf_internal_r+0x36c>
   2206c:	e185c83a 	sub	r2,fp,r6
   22070:	d8800315 	stw	r2,12(sp)
   22074:	9085c83a 	sub	r2,r18,r2
   22078:	0080090e 	bge	zero,r2,220a0 <___vfprintf_internal_r+0x2e8>
   2207c:	e085883a 	add	r2,fp,r2
   22080:	d9001004 	addi	r4,sp,64
   22084:	e100042e 	bgeu	fp,r4,22098 <___vfprintf_internal_r+0x2e0>
   22088:	e7000044 	addi	fp,fp,1
   2208c:	01000c04 	movi	r4,48
   22090:	e13fffc5 	stb	r4,-1(fp)
   22094:	e0bffa1e 	bne	fp,r2,22080 <___vfprintf_internal_r+0x2c8>
   22098:	e185c83a 	sub	r2,fp,r6
   2209c:	d8800315 	stw	r2,12(sp)
   220a0:	d8800317 	ldw	r2,12(sp)
   220a4:	1897883a 	add	r11,r3,r2
   220a8:	d8800017 	ldw	r2,0(sp)
   220ac:	8aebc83a 	sub	r21,r17,r11
   220b0:	10003526 	beq	r2,zero,22188 <___vfprintf_internal_r+0x3d0>
   220b4:	18000a26 	beq	r3,zero,220e0 <___vfprintf_internal_r+0x328>
   220b8:	00800b44 	movi	r2,45
   220bc:	d88007c5 	stb	r2,31(sp)
   220c0:	b8800117 	ldw	r2,4(r23)
   220c4:	01c00044 	movi	r7,1
   220c8:	d98007c4 	addi	r6,sp,31
   220cc:	b80b883a 	mov	r5,r23
   220d0:	8009883a 	mov	r4,r16
   220d4:	103ee83a 	callr	r2
   220d8:	103f6d1e 	bne	r2,zero,21e90 <___vfprintf_internal_r+0xd8>
   220dc:	b5800044 	addi	r22,r22,1
   220e0:	0540070e 	bge	zero,r21,22100 <___vfprintf_internal_r+0x348>
   220e4:	a80f883a 	mov	r7,r21
   220e8:	01800c04 	movi	r6,48
   220ec:	b80b883a 	mov	r5,r23
   220f0:	8009883a 	mov	r4,r16
   220f4:	0021d4c0 	call	21d4c <print_repeat>
   220f8:	103f651e 	bne	r2,zero,21e90 <___vfprintf_internal_r+0xd8>
   220fc:	b56d883a 	add	r22,r22,r21
   22100:	d8800317 	ldw	r2,12(sp)
   22104:	b72d883a 	add	r22,r22,fp
   22108:	172bc83a 	sub	r21,r2,fp
   2210c:	af05883a 	add	r2,r21,fp
   22110:	b707c83a 	sub	r3,r22,fp
   22114:	00803216 	blt	zero,r2,221e0 <___vfprintf_internal_r+0x428>
   22118:	df000417 	ldw	fp,16(sp)
   2211c:	182d883a 	mov	r22,r3
   22120:	003f3c06 	br	21e14 <___vfprintf_internal_r+0x5c>
   22124:	a809883a 	mov	r4,r21
   22128:	a00b883a 	mov	r5,r20
   2212c:	d8c00615 	stw	r3,24(sp)
   22130:	0021aac0 	call	21aac <__udivsi3>
   22134:	1009883a 	mov	r4,r2
   22138:	a00b883a 	mov	r5,r20
   2213c:	d8800315 	stw	r2,12(sp)
   22140:	00224780 	call	22478 <__mulsi3>
   22144:	a8abc83a 	sub	r21,r21,r2
   22148:	a8800288 	cmpgei	r2,r21,10
   2214c:	d9000317 	ldw	r4,12(sp)
   22150:	d8c00617 	ldw	r3,24(sp)
   22154:	d9800804 	addi	r6,sp,32
   22158:	1000051e 	bne	r2,zero,22170 <___vfprintf_internal_r+0x3b8>
   2215c:	ad400c04 	addi	r21,r21,48
   22160:	e7000044 	addi	fp,fp,1
   22164:	e57fffc5 	stb	r21,-1(fp)
   22168:	202b883a 	mov	r21,r4
   2216c:	003fbe06 	br	22068 <___vfprintf_internal_r+0x2b0>
   22170:	d8800217 	ldw	r2,8(sp)
   22174:	10000226 	beq	r2,zero,22180 <___vfprintf_internal_r+0x3c8>
   22178:	ad400dc4 	addi	r21,r21,55
   2217c:	003ff806 	br	22160 <___vfprintf_internal_r+0x3a8>
   22180:	ad4015c4 	addi	r21,r21,87
   22184:	003ff606 	br	22160 <___vfprintf_internal_r+0x3a8>
   22188:	0540090e 	bge	zero,r21,221b0 <___vfprintf_internal_r+0x3f8>
   2218c:	a80f883a 	mov	r7,r21
   22190:	01800804 	movi	r6,32
   22194:	b80b883a 	mov	r5,r23
   22198:	8009883a 	mov	r4,r16
   2219c:	d8c00615 	stw	r3,24(sp)
   221a0:	0021d4c0 	call	21d4c <print_repeat>
   221a4:	103f3a1e 	bne	r2,zero,21e90 <___vfprintf_internal_r+0xd8>
   221a8:	d8c00617 	ldw	r3,24(sp)
   221ac:	b56d883a 	add	r22,r22,r21
   221b0:	183fd326 	beq	r3,zero,22100 <___vfprintf_internal_r+0x348>
   221b4:	00800b44 	movi	r2,45
   221b8:	d88007c5 	stb	r2,31(sp)
   221bc:	b8800117 	ldw	r2,4(r23)
   221c0:	01c00044 	movi	r7,1
   221c4:	d98007c4 	addi	r6,sp,31
   221c8:	b80b883a 	mov	r5,r23
   221cc:	8009883a 	mov	r4,r16
   221d0:	103ee83a 	callr	r2
   221d4:	103f2e1e 	bne	r2,zero,21e90 <___vfprintf_internal_r+0xd8>
   221d8:	b5800044 	addi	r22,r22,1
   221dc:	003fc806 	br	22100 <___vfprintf_internal_r+0x348>
   221e0:	e0bfffc3 	ldbu	r2,-1(fp)
   221e4:	01c00044 	movi	r7,1
   221e8:	d98007c4 	addi	r6,sp,31
   221ec:	d88007c5 	stb	r2,31(sp)
   221f0:	b8800117 	ldw	r2,4(r23)
   221f4:	b80b883a 	mov	r5,r23
   221f8:	8009883a 	mov	r4,r16
   221fc:	e73fffc4 	addi	fp,fp,-1
   22200:	103ee83a 	callr	r2
   22204:	103fc126 	beq	r2,zero,2210c <___vfprintf_internal_r+0x354>
   22208:	003f2106 	br	21e90 <___vfprintf_internal_r+0xd8>
   2220c:	88800090 	cmplti	r2,r17,2
   22210:	1000081e 	bne	r2,zero,22234 <___vfprintf_internal_r+0x47c>
   22214:	8d7fffc4 	addi	r21,r17,-1
   22218:	a80f883a 	mov	r7,r21
   2221c:	01800804 	movi	r6,32
   22220:	b80b883a 	mov	r5,r23
   22224:	8009883a 	mov	r4,r16
   22228:	0021d4c0 	call	21d4c <print_repeat>
   2222c:	103f181e 	bne	r2,zero,21e90 <___vfprintf_internal_r+0xd8>
   22230:	b56d883a 	add	r22,r22,r21
   22234:	e0800017 	ldw	r2,0(fp)
   22238:	01c00044 	movi	r7,1
   2223c:	d9800804 	addi	r6,sp,32
   22240:	d8800805 	stb	r2,32(sp)
   22244:	b8800117 	ldw	r2,4(r23)
   22248:	b80b883a 	mov	r5,r23
   2224c:	8009883a 	mov	r4,r16
   22250:	e5400104 	addi	r21,fp,4
   22254:	103ee83a 	callr	r2
   22258:	103f0d1e 	bne	r2,zero,21e90 <___vfprintf_internal_r+0xd8>
   2225c:	b5800044 	addi	r22,r22,1
   22260:	a839883a 	mov	fp,r21
   22264:	003eef06 	br	21e24 <___vfprintf_internal_r+0x6c>
   22268:	d8000215 	stw	zero,8(sp)
   2226c:	d8000115 	stw	zero,4(sp)
   22270:	d8000015 	stw	zero,0(sp)
   22274:	04c00044 	movi	r19,1
   22278:	05000284 	movi	r20,10
   2227c:	04bfffc4 	movi	r18,-1
   22280:	047fffc4 	movi	r17,-1
   22284:	00800044 	movi	r2,1
   22288:	003ee606 	br	21e24 <___vfprintf_internal_r+0x6c>
   2228c:	00800044 	movi	r2,1
   22290:	d8800015 	stw	r2,0(sp)
   22294:	003ef206 	br	21e60 <___vfprintf_internal_r+0xa8>
   22298:	00800044 	movi	r2,1
   2229c:	d8800115 	stw	r2,4(sp)
   222a0:	008000c4 	movi	r2,3
   222a4:	003edf06 	br	21e24 <___vfprintf_internal_r+0x6c>
   222a8:	05000204 	movi	r20,8
   222ac:	e0800104 	addi	r2,fp,4
   222b0:	d8800415 	stw	r2,16(sp)
   222b4:	e5400017 	ldw	r21,0(fp)
   222b8:	0027883a 	mov	r19,zero
   222bc:	0007883a 	mov	r3,zero
   222c0:	003f6706 	br	22060 <___vfprintf_internal_r+0x2a8>

000222c4 <__vfprintf_internal>:
   222c4:	008000b4 	movhi	r2,2
   222c8:	300f883a 	mov	r7,r6
   222cc:	280d883a 	mov	r6,r5
   222d0:	200b883a 	mov	r5,r4
   222d4:	11115717 	ldw	r4,17756(r2)
   222d8:	0021db81 	jmpi	21db8 <___vfprintf_internal_r>

000222dc <__sfvwrite_small_dev>:
   222dc:	2880000b 	ldhu	r2,0(r5)
   222e0:	1080020c 	andi	r2,r2,8
   222e4:	10002526 	beq	r2,zero,2237c <__sfvwrite_small_dev+0xa0>
   222e8:	2880008f 	ldh	r2,2(r5)
   222ec:	defffb04 	addi	sp,sp,-20
   222f0:	dcc00315 	stw	r19,12(sp)
   222f4:	dc800215 	stw	r18,8(sp)
   222f8:	dc400115 	stw	r17,4(sp)
   222fc:	dc000015 	stw	r16,0(sp)
   22300:	dfc00415 	stw	ra,16(sp)
   22304:	2027883a 	mov	r19,r4
   22308:	2821883a 	mov	r16,r5
   2230c:	3025883a 	mov	r18,r6
   22310:	3823883a 	mov	r17,r7
   22314:	1000100e 	bge	r2,zero,22358 <__sfvwrite_small_dev+0x7c>
   22318:	8080000b 	ldhu	r2,0(r16)
   2231c:	10801014 	ori	r2,r2,64
   22320:	8080000d 	sth	r2,0(r16)
   22324:	00bfffc4 	movi	r2,-1
   22328:	00000d06 	br	22360 <__sfvwrite_small_dev+0x84>
   2232c:	88810050 	cmplti	r2,r17,1025
   22330:	880f883a 	mov	r7,r17
   22334:	1000011e 	bne	r2,zero,2233c <__sfvwrite_small_dev+0x60>
   22338:	01c10004 	movi	r7,1024
   2233c:	8140008f 	ldh	r5,2(r16)
   22340:	900d883a 	mov	r6,r18
   22344:	9809883a 	mov	r4,r19
   22348:	00224280 	call	22428 <_write_r>
   2234c:	00bff20e 	bge	zero,r2,22318 <__sfvwrite_small_dev+0x3c>
   22350:	88a3c83a 	sub	r17,r17,r2
   22354:	90a5883a 	add	r18,r18,r2
   22358:	047ff416 	blt	zero,r17,2232c <__sfvwrite_small_dev+0x50>
   2235c:	0005883a 	mov	r2,zero
   22360:	dfc00417 	ldw	ra,16(sp)
   22364:	dcc00317 	ldw	r19,12(sp)
   22368:	dc800217 	ldw	r18,8(sp)
   2236c:	dc400117 	ldw	r17,4(sp)
   22370:	dc000017 	ldw	r16,0(sp)
   22374:	dec00504 	addi	sp,sp,20
   22378:	f800283a 	ret
   2237c:	00bfffc4 	movi	r2,-1
   22380:	f800283a 	ret

00022384 <putc>:
   22384:	defffd04 	addi	sp,sp,-12
   22388:	008000b4 	movhi	r2,2
   2238c:	dc000115 	stw	r16,4(sp)
   22390:	dfc00215 	stw	ra,8(sp)
   22394:	1088b704 	addi	r2,r2,8924
   22398:	28800115 	stw	r2,4(r5)
   2239c:	008000b4 	movhi	r2,2
   223a0:	d90000c5 	stb	r4,3(sp)
   223a4:	2021883a 	mov	r16,r4
   223a8:	11115717 	ldw	r4,17756(r2)
   223ac:	01c00044 	movi	r7,1
   223b0:	d98000c4 	addi	r6,sp,3
   223b4:	00222dc0 	call	222dc <__sfvwrite_small_dev>
   223b8:	10ffffe0 	cmpeqi	r3,r2,-1
   223bc:	1800011e 	bne	r3,zero,223c4 <putc+0x40>
   223c0:	8005883a 	mov	r2,r16
   223c4:	dfc00217 	ldw	ra,8(sp)
   223c8:	dc000117 	ldw	r16,4(sp)
   223cc:	dec00304 	addi	sp,sp,12
   223d0:	f800283a 	ret

000223d4 <_putc_r>:
   223d4:	defffd04 	addi	sp,sp,-12
   223d8:	008000b4 	movhi	r2,2
   223dc:	dc000115 	stw	r16,4(sp)
   223e0:	dfc00215 	stw	ra,8(sp)
   223e4:	1088b704 	addi	r2,r2,8924
   223e8:	30800115 	stw	r2,4(r6)
   223ec:	008000b4 	movhi	r2,2
   223f0:	11115717 	ldw	r4,17756(r2)
   223f4:	2821883a 	mov	r16,r5
   223f8:	01c00044 	movi	r7,1
   223fc:	300b883a 	mov	r5,r6
   22400:	d98000c4 	addi	r6,sp,3
   22404:	dc0000c5 	stb	r16,3(sp)
   22408:	00222dc0 	call	222dc <__sfvwrite_small_dev>
   2240c:	10ffffe0 	cmpeqi	r3,r2,-1
   22410:	1800011e 	bne	r3,zero,22418 <_putc_r+0x44>
   22414:	8005883a 	mov	r2,r16
   22418:	dfc00217 	ldw	ra,8(sp)
   2241c:	dc000117 	ldw	r16,4(sp)
   22420:	dec00304 	addi	sp,sp,12
   22424:	f800283a 	ret

00022428 <_write_r>:
   22428:	defffe04 	addi	sp,sp,-8
   2242c:	dc000015 	stw	r16,0(sp)
   22430:	008000b4 	movhi	r2,2
   22434:	2021883a 	mov	r16,r4
   22438:	2809883a 	mov	r4,r5
   2243c:	300b883a 	mov	r5,r6
   22440:	380d883a 	mov	r6,r7
   22444:	dfc00115 	stw	ra,4(sp)
   22448:	10121a15 	stw	zero,18536(r2)
   2244c:	00226740 	call	22674 <write>
   22450:	10ffffd8 	cmpnei	r3,r2,-1
   22454:	1800041e 	bne	r3,zero,22468 <_write_r+0x40>
   22458:	00c000b4 	movhi	r3,2
   2245c:	18d21a17 	ldw	r3,18536(r3)
   22460:	18000126 	beq	r3,zero,22468 <_write_r+0x40>
   22464:	80c00015 	stw	r3,0(r16)
   22468:	dfc00117 	ldw	ra,4(sp)
   2246c:	dc000017 	ldw	r16,0(sp)
   22470:	dec00204 	addi	sp,sp,8
   22474:	f800283a 	ret

00022478 <__mulsi3>:
   22478:	0005883a 	mov	r2,zero
   2247c:	20000726 	beq	r4,zero,2249c <__mulsi3+0x24>
   22480:	20c0004c 	andi	r3,r4,1
   22484:	2008d07a 	srli	r4,r4,1
   22488:	18000126 	beq	r3,zero,22490 <__mulsi3+0x18>
   2248c:	1145883a 	add	r2,r2,r5
   22490:	294b883a 	add	r5,r5,r5
   22494:	203ffa1e 	bne	r4,zero,22480 <__mulsi3+0x8>
   22498:	f800283a 	ret
   2249c:	f800283a 	ret

000224a0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   224a0:	defffc04 	addi	sp,sp,-16
   224a4:	df000315 	stw	fp,12(sp)
   224a8:	df000304 	addi	fp,sp,12
   224ac:	e13fff15 	stw	r4,-4(fp)
   224b0:	e17ffe15 	stw	r5,-8(fp)
   224b4:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
   224b8:	e0fffe17 	ldw	r3,-8(fp)
   224bc:	e0bfff17 	ldw	r2,-4(fp)
   224c0:	18800c26 	beq	r3,r2,224f4 <alt_load_section+0x54>
  {
    while( to != end )
   224c4:	00000806 	br	224e8 <alt_load_section+0x48>
    {
      *to++ = *from++;
   224c8:	e0ffff17 	ldw	r3,-4(fp)
   224cc:	18800104 	addi	r2,r3,4
   224d0:	e0bfff15 	stw	r2,-4(fp)
   224d4:	e0bffe17 	ldw	r2,-8(fp)
   224d8:	11000104 	addi	r4,r2,4
   224dc:	e13ffe15 	stw	r4,-8(fp)
   224e0:	18c00017 	ldw	r3,0(r3)
   224e4:	10c00015 	stw	r3,0(r2)
    while( to != end )
   224e8:	e0fffe17 	ldw	r3,-8(fp)
   224ec:	e0bffd17 	ldw	r2,-12(fp)
   224f0:	18bff51e 	bne	r3,r2,224c8 <alt_load_section+0x28>
    }
  }
}
   224f4:	0001883a 	nop
   224f8:	e037883a 	mov	sp,fp
   224fc:	df000017 	ldw	fp,0(sp)
   22500:	dec00104 	addi	sp,sp,4
   22504:	f800283a 	ret

00022508 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   22508:	defffe04 	addi	sp,sp,-8
   2250c:	dfc00115 	stw	ra,4(sp)
   22510:	df000015 	stw	fp,0(sp)
   22514:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   22518:	018000b4 	movhi	r6,2
   2251c:	31916104 	addi	r6,r6,17796
   22520:	014000b4 	movhi	r5,2
   22524:	2950a804 	addi	r5,r5,17056
   22528:	010000b4 	movhi	r4,2
   2252c:	21116104 	addi	r4,r4,17796
   22530:	00224a00 	call	224a0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   22534:	018000b4 	movhi	r6,2
   22538:	31808904 	addi	r6,r6,548
   2253c:	014000b4 	movhi	r5,2
   22540:	29400804 	addi	r5,r5,32
   22544:	010000b4 	movhi	r4,2
   22548:	21000804 	addi	r4,r4,32
   2254c:	00224a00 	call	224a0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   22550:	018000b4 	movhi	r6,2
   22554:	3190a804 	addi	r6,r6,17056
   22558:	014000b4 	movhi	r5,2
   2255c:	294f9b04 	addi	r5,r5,15980
   22560:	010000b4 	movhi	r4,2
   22564:	210f9b04 	addi	r4,r4,15980
   22568:	00224a00 	call	224a0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   2256c:	0022de80 	call	22de8 <alt_dcache_flush_all>
  alt_icache_flush_all();
   22570:	0022fe00 	call	22fe0 <alt_icache_flush_all>
}
   22574:	0001883a 	nop
   22578:	e037883a 	mov	sp,fp
   2257c:	dfc00117 	ldw	ra,4(sp)
   22580:	df000017 	ldw	fp,0(sp)
   22584:	dec00204 	addi	sp,sp,8
   22588:	f800283a 	ret

0002258c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   2258c:	defffd04 	addi	sp,sp,-12
   22590:	dfc00215 	stw	ra,8(sp)
   22594:	df000115 	stw	fp,4(sp)
   22598:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   2259c:	0009883a 	mov	r4,zero
   225a0:	00227ac0 	call	227ac <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   225a4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   225a8:	00227e80 	call	227e8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   225ac:	018000b4 	movhi	r6,2
   225b0:	31909704 	addi	r6,r6,16988
   225b4:	014000b4 	movhi	r5,2
   225b8:	29509704 	addi	r5,r5,16988
   225bc:	010000b4 	movhi	r4,2
   225c0:	21109704 	addi	r4,r4,16988
   225c4:	002336c0 	call	2336c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   225c8:	0022f180 	call	22f18 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   225cc:	010000b4 	movhi	r4,2
   225d0:	210bdf04 	addi	r4,r4,12156
   225d4:	0023b880 	call	23b88 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   225d8:	d0a0c517 	ldw	r2,-31980(gp)
   225dc:	d0e0c617 	ldw	r3,-31976(gp)
   225e0:	d120c717 	ldw	r4,-31972(gp)
   225e4:	200d883a 	mov	r6,r4
   225e8:	180b883a 	mov	r5,r3
   225ec:	1009883a 	mov	r4,r2
   225f0:	002129c0 	call	2129c <main>
   225f4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   225f8:	01000044 	movi	r4,1
   225fc:	0022d0c0 	call	22d0c <close>
  exit (result);
   22600:	e13fff17 	ldw	r4,-4(fp)
   22604:	0023b9c0 	call	23b9c <exit>

00022608 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   22608:	defffd04 	addi	sp,sp,-12
   2260c:	dfc00215 	stw	ra,8(sp)
   22610:	df000115 	stw	fp,4(sp)
   22614:	df000104 	addi	fp,sp,4
   22618:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   2261c:	e13fff17 	ldw	r4,-4(fp)
   22620:	0022b780 	call	22b78 <alt_busy_sleep>
}
   22624:	e037883a 	mov	sp,fp
   22628:	dfc00117 	ldw	ra,4(sp)
   2262c:	df000017 	ldw	fp,0(sp)
   22630:	dec00204 	addi	sp,sp,8
   22634:	f800283a 	ret

00022638 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   22638:	defffe04 	addi	sp,sp,-8
   2263c:	dfc00115 	stw	ra,4(sp)
   22640:	df000015 	stw	fp,0(sp)
   22644:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   22648:	d0a00717 	ldw	r2,-32740(gp)
   2264c:	10000326 	beq	r2,zero,2265c <alt_get_errno+0x24>
   22650:	d0a00717 	ldw	r2,-32740(gp)
   22654:	103ee83a 	callr	r2
   22658:	00000106 	br	22660 <alt_get_errno+0x28>
   2265c:	d0a0c404 	addi	r2,gp,-31984
}
   22660:	e037883a 	mov	sp,fp
   22664:	dfc00117 	ldw	ra,4(sp)
   22668:	df000017 	ldw	fp,0(sp)
   2266c:	dec00204 	addi	sp,sp,8
   22670:	f800283a 	ret

00022674 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   22674:	defff904 	addi	sp,sp,-28
   22678:	dfc00615 	stw	ra,24(sp)
   2267c:	df000515 	stw	fp,20(sp)
   22680:	df000504 	addi	fp,sp,20
   22684:	e13ffd15 	stw	r4,-12(fp)
   22688:	e17ffc15 	stw	r5,-16(fp)
   2268c:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   22690:	e0bffd17 	ldw	r2,-12(fp)
   22694:	10000916 	blt	r2,zero,226bc <write+0x48>
   22698:	e0fffd17 	ldw	r3,-12(fp)
   2269c:	1805883a 	mov	r2,r3
   226a0:	1085883a 	add	r2,r2,r2
   226a4:	10c5883a 	add	r2,r2,r3
   226a8:	100490ba 	slli	r2,r2,2
   226ac:	00c000b4 	movhi	r3,2
   226b0:	18d0f604 	addi	r3,r3,17368
   226b4:	10c5883a 	add	r2,r2,r3
   226b8:	00000106 	br	226c0 <write+0x4c>
   226bc:	0005883a 	mov	r2,zero
   226c0:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   226c4:	e0bfff17 	ldw	r2,-4(fp)
   226c8:	10002126 	beq	r2,zero,22750 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   226cc:	e0bfff17 	ldw	r2,-4(fp)
   226d0:	10800217 	ldw	r2,8(r2)
   226d4:	108000cc 	andi	r2,r2,3
   226d8:	10001826 	beq	r2,zero,2273c <write+0xc8>
   226dc:	e0bfff17 	ldw	r2,-4(fp)
   226e0:	10800017 	ldw	r2,0(r2)
   226e4:	10800617 	ldw	r2,24(r2)
   226e8:	10001426 	beq	r2,zero,2273c <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   226ec:	e0bfff17 	ldw	r2,-4(fp)
   226f0:	10800017 	ldw	r2,0(r2)
   226f4:	10800617 	ldw	r2,24(r2)
   226f8:	e0fffb17 	ldw	r3,-20(fp)
   226fc:	180d883a 	mov	r6,r3
   22700:	e17ffc17 	ldw	r5,-16(fp)
   22704:	e13fff17 	ldw	r4,-4(fp)
   22708:	103ee83a 	callr	r2
   2270c:	e0bffe15 	stw	r2,-8(fp)
   22710:	e0bffe17 	ldw	r2,-8(fp)
   22714:	1000070e 	bge	r2,zero,22734 <write+0xc0>
      {
        ALT_ERRNO = -rval;
   22718:	00226380 	call	22638 <alt_get_errno>
   2271c:	1007883a 	mov	r3,r2
   22720:	e0bffe17 	ldw	r2,-8(fp)
   22724:	0085c83a 	sub	r2,zero,r2
   22728:	18800015 	stw	r2,0(r3)
        return -1;
   2272c:	00bfffc4 	movi	r2,-1
   22730:	00000c06 	br	22764 <write+0xf0>
      }
      return rval;
   22734:	e0bffe17 	ldw	r2,-8(fp)
   22738:	00000a06 	br	22764 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
   2273c:	00226380 	call	22638 <alt_get_errno>
   22740:	1007883a 	mov	r3,r2
   22744:	00800344 	movi	r2,13
   22748:	18800015 	stw	r2,0(r3)
   2274c:	00000406 	br	22760 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   22750:	00226380 	call	22638 <alt_get_errno>
   22754:	1007883a 	mov	r3,r2
   22758:	00801444 	movi	r2,81
   2275c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   22760:	00bfffc4 	movi	r2,-1
}
   22764:	e037883a 	mov	sp,fp
   22768:	dfc00117 	ldw	ra,4(sp)
   2276c:	df000017 	ldw	fp,0(sp)
   22770:	dec00204 	addi	sp,sp,8
   22774:	f800283a 	ret

00022778 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   22778:	defffd04 	addi	sp,sp,-12
   2277c:	dfc00215 	stw	ra,8(sp)
   22780:	df000115 	stw	fp,4(sp)
   22784:	df000104 	addi	fp,sp,4
   22788:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   2278c:	d1600404 	addi	r5,gp,-32752
   22790:	e13fff17 	ldw	r4,-4(fp)
   22794:	0022e700 	call	22e70 <alt_dev_llist_insert>
}
   22798:	e037883a 	mov	sp,fp
   2279c:	dfc00117 	ldw	ra,4(sp)
   227a0:	df000017 	ldw	fp,0(sp)
   227a4:	dec00204 	addi	sp,sp,8
   227a8:	f800283a 	ret

000227ac <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   227ac:	defffd04 	addi	sp,sp,-12
   227b0:	dfc00215 	stw	ra,8(sp)
   227b4:	df000115 	stw	fp,4(sp)
   227b8:	df000104 	addi	fp,sp,4
   227bc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS_SYSTEM_NIOS2_GEN2, nios_system_nios2_gen2);
   227c0:	002387c0 	call	2387c <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   227c4:	00800044 	movi	r2,1
   227c8:	1001703a 	wrctl	status,r2
}
   227cc:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
   227d0:	0001883a 	nop
   227d4:	e037883a 	mov	sp,fp
   227d8:	dfc00117 	ldw	ra,4(sp)
   227dc:	df000017 	ldw	fp,0(sp)
   227e0:	dec00204 	addi	sp,sp,8
   227e4:	f800283a 	ret

000227e8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   227e8:	defffe04 	addi	sp,sp,-8
   227ec:	dfc00115 	stw	ra,4(sp)
   227f0:	df000015 	stw	fp,0(sp)
   227f4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( NIOS_SYSTEM_TIMER, nios_system_timer);
   227f8:	01c0fa04 	movi	r7,1000
   227fc:	01800044 	movi	r6,1
   22800:	000b883a 	mov	r5,zero
   22804:	01000134 	movhi	r4,4
   22808:	21041804 	addi	r4,r4,4192
   2280c:	0022af40 	call	22af4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( NIOS_SYSTEM_JTAG_UART, nios_system_jtag_uart);
   22810:	010000b4 	movhi	r4,2
   22814:	2110e104 	addi	r4,r4,17284
   22818:	00227780 	call	22778 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( NIOS_SYSTEM_SYSID_QSYS, nios_system_sysid_qsys);
   2281c:	0001883a 	nop
}
   22820:	0001883a 	nop
   22824:	e037883a 	mov	sp,fp
   22828:	dfc00117 	ldw	ra,4(sp)
   2282c:	df000017 	ldw	fp,0(sp)
   22830:	dec00204 	addi	sp,sp,8
   22834:	f800283a 	ret

00022838 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   22838:	defffa04 	addi	sp,sp,-24
   2283c:	dfc00515 	stw	ra,20(sp)
   22840:	df000415 	stw	fp,16(sp)
   22844:	df000404 	addi	fp,sp,16
   22848:	e13ffe15 	stw	r4,-8(fp)
   2284c:	e17ffd15 	stw	r5,-12(fp)
   22850:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   22854:	e0bffe17 	ldw	r2,-8(fp)
   22858:	10800017 	ldw	r2,0(r2)
   2285c:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   22860:	e0bfff17 	ldw	r2,-4(fp)
   22864:	10c00a04 	addi	r3,r2,40
   22868:	e0bffe17 	ldw	r2,-8(fp)
   2286c:	10800217 	ldw	r2,8(r2)
   22870:	100f883a 	mov	r7,r2
   22874:	e1bffc17 	ldw	r6,-16(fp)
   22878:	e17ffd17 	ldw	r5,-12(fp)
   2287c:	1809883a 	mov	r4,r3
   22880:	00228f80 	call	228f8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   22884:	e037883a 	mov	sp,fp
   22888:	dfc00117 	ldw	ra,4(sp)
   2288c:	df000017 	ldw	fp,0(sp)
   22890:	dec00204 	addi	sp,sp,8
   22894:	f800283a 	ret

00022898 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   22898:	defffa04 	addi	sp,sp,-24
   2289c:	dfc00515 	stw	ra,20(sp)
   228a0:	df000415 	stw	fp,16(sp)
   228a4:	df000404 	addi	fp,sp,16
   228a8:	e13ffe15 	stw	r4,-8(fp)
   228ac:	e17ffd15 	stw	r5,-12(fp)
   228b0:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   228b4:	e0bffe17 	ldw	r2,-8(fp)
   228b8:	10800017 	ldw	r2,0(r2)
   228bc:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   228c0:	e0bfff17 	ldw	r2,-4(fp)
   228c4:	10c00a04 	addi	r3,r2,40
   228c8:	e0bffe17 	ldw	r2,-8(fp)
   228cc:	10800217 	ldw	r2,8(r2)
   228d0:	100f883a 	mov	r7,r2
   228d4:	e1bffc17 	ldw	r6,-16(fp)
   228d8:	e17ffd17 	ldw	r5,-12(fp)
   228dc:	1809883a 	mov	r4,r3
   228e0:	00229e40 	call	229e4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   228e4:	e037883a 	mov	sp,fp
   228e8:	dfc00117 	ldw	ra,4(sp)
   228ec:	df000017 	ldw	fp,0(sp)
   228f0:	dec00204 	addi	sp,sp,8
   228f4:	f800283a 	ret

000228f8 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   228f8:	defff704 	addi	sp,sp,-36
   228fc:	df000815 	stw	fp,32(sp)
   22900:	df000804 	addi	fp,sp,32
   22904:	e13ffb15 	stw	r4,-20(fp)
   22908:	e17ffa15 	stw	r5,-24(fp)
   2290c:	e1bff915 	stw	r6,-28(fp)
   22910:	e1fff815 	stw	r7,-32(fp)
  unsigned int base = sp->base;
   22914:	e0bffb17 	ldw	r2,-20(fp)
   22918:	10800017 	ldw	r2,0(r2)
   2291c:	e0bffe15 	stw	r2,-8(fp)

  char * ptr = buffer;
   22920:	e0bffa17 	ldw	r2,-24(fp)
   22924:	e0bfff15 	stw	r2,-4(fp)
  char * end = buffer + space;
   22928:	e0bff917 	ldw	r2,-28(fp)
   2292c:	e0fffa17 	ldw	r3,-24(fp)
   22930:	1885883a 	add	r2,r3,r2
   22934:	e0bffd15 	stw	r2,-12(fp)

  while (ptr < end)
   22938:	00001206 	br	22984 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   2293c:	e0bffe17 	ldw	r2,-8(fp)
   22940:	10800037 	ldwio	r2,0(r2)
   22944:	e0bffc15 	stw	r2,-16(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   22948:	e0bffc17 	ldw	r2,-16(fp)
   2294c:	10a0000c 	andi	r2,r2,32768
   22950:	10000626 	beq	r2,zero,2296c <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   22954:	e0bfff17 	ldw	r2,-4(fp)
   22958:	10c00044 	addi	r3,r2,1
   2295c:	e0ffff15 	stw	r3,-4(fp)
   22960:	e0fffc17 	ldw	r3,-16(fp)
   22964:	10c00005 	stb	r3,0(r2)
   22968:	00000606 	br	22984 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   2296c:	e0ffff17 	ldw	r3,-4(fp)
   22970:	e0bffa17 	ldw	r2,-24(fp)
   22974:	1880071e 	bne	r3,r2,22994 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   22978:	e0bff817 	ldw	r2,-32(fp)
   2297c:	1090000c 	andi	r2,r2,16384
   22980:	1000061e 	bne	r2,zero,2299c <altera_avalon_jtag_uart_read+0xa4>
  while (ptr < end)
   22984:	e0ffff17 	ldw	r3,-4(fp)
   22988:	e0bffd17 	ldw	r2,-12(fp)
   2298c:	18bfeb36 	bltu	r3,r2,2293c <altera_avalon_jtag_uart_read+0x44>
   22990:	00000306 	br	229a0 <altera_avalon_jtag_uart_read+0xa8>
      break;
   22994:	0001883a 	nop
   22998:	00000106 	br	229a0 <altera_avalon_jtag_uart_read+0xa8>
      break;   
   2299c:	0001883a 	nop
    
  }

  if (ptr != buffer)
   229a0:	e0ffff17 	ldw	r3,-4(fp)
   229a4:	e0bffa17 	ldw	r2,-24(fp)
   229a8:	18800426 	beq	r3,r2,229bc <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   229ac:	e0ffff17 	ldw	r3,-4(fp)
   229b0:	e0bffa17 	ldw	r2,-24(fp)
   229b4:	1885c83a 	sub	r2,r3,r2
   229b8:	00000606 	br	229d4 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   229bc:	e0bff817 	ldw	r2,-32(fp)
   229c0:	1090000c 	andi	r2,r2,16384
   229c4:	10000226 	beq	r2,zero,229d0 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   229c8:	00bffd44 	movi	r2,-11
   229cc:	00000106 	br	229d4 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   229d0:	00bffec4 	movi	r2,-5
}
   229d4:	e037883a 	mov	sp,fp
   229d8:	df000017 	ldw	fp,0(sp)
   229dc:	dec00104 	addi	sp,sp,4
   229e0:	f800283a 	ret

000229e4 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   229e4:	defff904 	addi	sp,sp,-28
   229e8:	df000615 	stw	fp,24(sp)
   229ec:	df000604 	addi	fp,sp,24
   229f0:	e13ffd15 	stw	r4,-12(fp)
   229f4:	e17ffc15 	stw	r5,-16(fp)
   229f8:	e1bffb15 	stw	r6,-20(fp)
   229fc:	e1fffa15 	stw	r7,-24(fp)
  unsigned int base = sp->base;
   22a00:	e0bffd17 	ldw	r2,-12(fp)
   22a04:	10800017 	ldw	r2,0(r2)
   22a08:	e0bfff15 	stw	r2,-4(fp)

  const char * end = ptr + count;
   22a0c:	e0bffb17 	ldw	r2,-20(fp)
   22a10:	e0fffc17 	ldw	r3,-16(fp)
   22a14:	1885883a 	add	r2,r3,r2
   22a18:	e0bffe15 	stw	r2,-8(fp)

  while (ptr < end)
   22a1c:	00000e06 	br	22a58 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   22a20:	e0bfff17 	ldw	r2,-4(fp)
   22a24:	10800104 	addi	r2,r2,4
   22a28:	10800037 	ldwio	r2,0(r2)
   22a2c:	10bfffec 	andhi	r2,r2,65535
   22a30:	10000926 	beq	r2,zero,22a58 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   22a34:	e0ffff17 	ldw	r3,-4(fp)
   22a38:	e0bffc17 	ldw	r2,-16(fp)
   22a3c:	11000044 	addi	r4,r2,1
   22a40:	e13ffc15 	stw	r4,-16(fp)
   22a44:	10800003 	ldbu	r2,0(r2)
   22a48:	10803fcc 	andi	r2,r2,255
   22a4c:	1080201c 	xori	r2,r2,128
   22a50:	10bfe004 	addi	r2,r2,-128
   22a54:	18800035 	stwio	r2,0(r3)
  while (ptr < end)
   22a58:	e0fffc17 	ldw	r3,-16(fp)
   22a5c:	e0bffe17 	ldw	r2,-8(fp)
   22a60:	18bfef36 	bltu	r3,r2,22a20 <altera_avalon_jtag_uart_write+0x3c>

  return count;
   22a64:	e0bffb17 	ldw	r2,-20(fp)
}
   22a68:	e037883a 	mov	sp,fp
   22a6c:	df000017 	ldw	fp,0(sp)
   22a70:	dec00104 	addi	sp,sp,4
   22a74:	f800283a 	ret

00022a78 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   22a78:	defffa04 	addi	sp,sp,-24
   22a7c:	dfc00515 	stw	ra,20(sp)
   22a80:	df000415 	stw	fp,16(sp)
   22a84:	df000404 	addi	fp,sp,16
   22a88:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   22a8c:	0007883a 	mov	r3,zero
   22a90:	e0bffc17 	ldw	r2,-16(fp)
   22a94:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   22a98:	e0bffc17 	ldw	r2,-16(fp)
   22a9c:	10800104 	addi	r2,r2,4
   22aa0:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
   22aa4:	0005303a 	rdctl	r2,status
   22aa8:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22aac:	e0fffd17 	ldw	r3,-12(fp)
   22ab0:	00bfff84 	movi	r2,-2
   22ab4:	1884703a 	and	r2,r3,r2
   22ab8:	1001703a 	wrctl	status,r2
  return context;
   22abc:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   22ac0:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
   22ac4:	00237740 	call	23774 <alt_tick>
   22ac8:	e0bfff17 	ldw	r2,-4(fp)
   22acc:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   22ad0:	e0bffe17 	ldw	r2,-8(fp)
   22ad4:	1001703a 	wrctl	status,r2
}
   22ad8:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
   22adc:	0001883a 	nop
   22ae0:	e037883a 	mov	sp,fp
   22ae4:	dfc00117 	ldw	ra,4(sp)
   22ae8:	df000017 	ldw	fp,0(sp)
   22aec:	dec00204 	addi	sp,sp,8
   22af0:	f800283a 	ret

00022af4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   22af4:	defff804 	addi	sp,sp,-32
   22af8:	dfc00715 	stw	ra,28(sp)
   22afc:	df000615 	stw	fp,24(sp)
   22b00:	df000604 	addi	fp,sp,24
   22b04:	e13ffe15 	stw	r4,-8(fp)
   22b08:	e17ffd15 	stw	r5,-12(fp)
   22b0c:	e1bffc15 	stw	r6,-16(fp)
   22b10:	e1fffb15 	stw	r7,-20(fp)
   22b14:	e0bffb17 	ldw	r2,-20(fp)
   22b18:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   22b1c:	d0a0c917 	ldw	r2,-31964(gp)
   22b20:	1000031e 	bne	r2,zero,22b30 <alt_avalon_timer_sc_init+0x3c>
  {
    _alt_tick_rate = nticks;
   22b24:	e0bfff17 	ldw	r2,-4(fp)
   22b28:	d0a0c915 	stw	r2,-31964(gp)
    return 0;
   22b2c:	00000106 	br	22b34 <alt_avalon_timer_sc_init+0x40>
  }
  else
  {
    return -1;
   22b30:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   22b34:	e0bffe17 	ldw	r2,-8(fp)
   22b38:	10800104 	addi	r2,r2,4
   22b3c:	00c001c4 	movi	r3,7
   22b40:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   22b44:	d8000015 	stw	zero,0(sp)
   22b48:	e1fffe17 	ldw	r7,-8(fp)
   22b4c:	018000b4 	movhi	r6,2
   22b50:	318a9e04 	addi	r6,r6,10872
   22b54:	e17ffc17 	ldw	r5,-16(fp)
   22b58:	e13ffd17 	ldw	r4,-12(fp)
   22b5c:	00230000 	call	23000 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   22b60:	0001883a 	nop
   22b64:	e037883a 	mov	sp,fp
   22b68:	dfc00117 	ldw	ra,4(sp)
   22b6c:	df000017 	ldw	fp,0(sp)
   22b70:	dec00204 	addi	sp,sp,8
   22b74:	f800283a 	ret

00022b78 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   22b78:	defffa04 	addi	sp,sp,-24
   22b7c:	dfc00515 	stw	ra,20(sp)
   22b80:	df000415 	stw	fp,16(sp)
   22b84:	df000404 	addi	fp,sp,16
   22b88:	e13ffc15 	stw	r4,-16(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   22b8c:	00800244 	movi	r2,9
   22b90:	e0bffe15 	stw	r2,-8(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   22b94:	014003f4 	movhi	r5,15
   22b98:	29509004 	addi	r5,r5,16960
   22b9c:	e13ffe17 	ldw	r4,-8(fp)
   22ba0:	00224780 	call	22478 <__mulsi3>
   22ba4:	100b883a 	mov	r5,r2
   22ba8:	0100bef4 	movhi	r4,763
   22bac:	213c2004 	addi	r4,r4,-3968
   22bb0:	0021aac0 	call	21aac <__udivsi3>
  big_loops = us / (INT_MAX/
   22bb4:	100b883a 	mov	r5,r2
   22bb8:	01200034 	movhi	r4,32768
   22bbc:	213fffc4 	addi	r4,r4,-1
   22bc0:	0021aac0 	call	21aac <__udivsi3>
   22bc4:	100b883a 	mov	r5,r2
   22bc8:	e13ffc17 	ldw	r4,-16(fp)
   22bcc:	0021aac0 	call	21aac <__udivsi3>
   22bd0:	e0bffd15 	stw	r2,-12(fp)

  if (big_loops)
   22bd4:	e0bffd17 	ldw	r2,-12(fp)
   22bd8:	10002a26 	beq	r2,zero,22c84 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   22bdc:	e03fff15 	stw	zero,-4(fp)
   22be0:	00001706 	br	22c40 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   22be4:	00a00034 	movhi	r2,32768
   22be8:	10bfffc4 	addi	r2,r2,-1
   22bec:	10bfffc4 	addi	r2,r2,-1
   22bf0:	103ffe1e 	bne	r2,zero,22bec <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   22bf4:	014003f4 	movhi	r5,15
   22bf8:	29509004 	addi	r5,r5,16960
   22bfc:	e13ffe17 	ldw	r4,-8(fp)
   22c00:	00224780 	call	22478 <__mulsi3>
      us -= (INT_MAX/(ALT_CPU_FREQ/
   22c04:	100b883a 	mov	r5,r2
   22c08:	0100bef4 	movhi	r4,763
   22c0c:	213c2004 	addi	r4,r4,-3968
   22c10:	0021aac0 	call	21aac <__udivsi3>
   22c14:	100b883a 	mov	r5,r2
   22c18:	01200034 	movhi	r4,32768
   22c1c:	213fffc4 	addi	r4,r4,-1
   22c20:	0021aac0 	call	21aac <__udivsi3>
   22c24:	1007883a 	mov	r3,r2
   22c28:	e0bffc17 	ldw	r2,-16(fp)
   22c2c:	10c5c83a 	sub	r2,r2,r3
   22c30:	e0bffc15 	stw	r2,-16(fp)
    for(i=0;i<big_loops;i++)
   22c34:	e0bfff17 	ldw	r2,-4(fp)
   22c38:	10800044 	addi	r2,r2,1
   22c3c:	e0bfff15 	stw	r2,-4(fp)
   22c40:	e0ffff17 	ldw	r3,-4(fp)
   22c44:	e0bffd17 	ldw	r2,-12(fp)
   22c48:	18bfe616 	blt	r3,r2,22be4 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   22c4c:	014003f4 	movhi	r5,15
   22c50:	29509004 	addi	r5,r5,16960
   22c54:	e13ffe17 	ldw	r4,-8(fp)
   22c58:	00224780 	call	22478 <__mulsi3>
   22c5c:	100b883a 	mov	r5,r2
   22c60:	0100bef4 	movhi	r4,763
   22c64:	213c2004 	addi	r4,r4,-3968
   22c68:	0021aac0 	call	21aac <__udivsi3>
   22c6c:	e17ffc17 	ldw	r5,-16(fp)
   22c70:	1009883a 	mov	r4,r2
   22c74:	00224780 	call	22478 <__mulsi3>
    __asm__ volatile (
   22c78:	10bfffc4 	addi	r2,r2,-1
   22c7c:	103ffe1e 	bne	r2,zero,22c78 <alt_busy_sleep+0x100>
   22c80:	00000d06 	br	22cb8 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   22c84:	014003f4 	movhi	r5,15
   22c88:	29509004 	addi	r5,r5,16960
   22c8c:	e13ffe17 	ldw	r4,-8(fp)
   22c90:	00224780 	call	22478 <__mulsi3>
   22c94:	100b883a 	mov	r5,r2
   22c98:	0100bef4 	movhi	r4,763
   22c9c:	213c2004 	addi	r4,r4,-3968
   22ca0:	0021aac0 	call	21aac <__udivsi3>
   22ca4:	e17ffc17 	ldw	r5,-16(fp)
   22ca8:	1009883a 	mov	r4,r2
   22cac:	00224780 	call	22478 <__mulsi3>
    __asm__ volatile (
   22cb0:	10bfffc4 	addi	r2,r2,-1
   22cb4:	00bffe16 	blt	zero,r2,22cb0 <alt_busy_sleep+0x138>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   22cb8:	0005883a 	mov	r2,zero
}
   22cbc:	e037883a 	mov	sp,fp
   22cc0:	dfc00117 	ldw	ra,4(sp)
   22cc4:	df000017 	ldw	fp,0(sp)
   22cc8:	dec00204 	addi	sp,sp,8
   22ccc:	f800283a 	ret

00022cd0 <alt_get_errno>:
{
   22cd0:	defffe04 	addi	sp,sp,-8
   22cd4:	dfc00115 	stw	ra,4(sp)
   22cd8:	df000015 	stw	fp,0(sp)
   22cdc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   22ce0:	d0a00717 	ldw	r2,-32740(gp)
   22ce4:	10000326 	beq	r2,zero,22cf4 <alt_get_errno+0x24>
   22ce8:	d0a00717 	ldw	r2,-32740(gp)
   22cec:	103ee83a 	callr	r2
   22cf0:	00000106 	br	22cf8 <alt_get_errno+0x28>
   22cf4:	d0a0c404 	addi	r2,gp,-31984
}
   22cf8:	e037883a 	mov	sp,fp
   22cfc:	dfc00117 	ldw	ra,4(sp)
   22d00:	df000017 	ldw	fp,0(sp)
   22d04:	dec00204 	addi	sp,sp,8
   22d08:	f800283a 	ret

00022d0c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   22d0c:	defffb04 	addi	sp,sp,-20
   22d10:	dfc00415 	stw	ra,16(sp)
   22d14:	df000315 	stw	fp,12(sp)
   22d18:	df000304 	addi	fp,sp,12
   22d1c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   22d20:	e0bffd17 	ldw	r2,-12(fp)
   22d24:	10000916 	blt	r2,zero,22d4c <close+0x40>
   22d28:	e0fffd17 	ldw	r3,-12(fp)
   22d2c:	1805883a 	mov	r2,r3
   22d30:	1085883a 	add	r2,r2,r2
   22d34:	10c5883a 	add	r2,r2,r3
   22d38:	100490ba 	slli	r2,r2,2
   22d3c:	00c000b4 	movhi	r3,2
   22d40:	18d0f604 	addi	r3,r3,17368
   22d44:	10c5883a 	add	r2,r2,r3
   22d48:	00000106 	br	22d50 <close+0x44>
   22d4c:	0005883a 	mov	r2,zero
   22d50:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
   22d54:	e0bfff17 	ldw	r2,-4(fp)
   22d58:	10001926 	beq	r2,zero,22dc0 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   22d5c:	e0bfff17 	ldw	r2,-4(fp)
   22d60:	10800017 	ldw	r2,0(r2)
   22d64:	10800417 	ldw	r2,16(r2)
   22d68:	10000626 	beq	r2,zero,22d84 <close+0x78>
   22d6c:	e0bfff17 	ldw	r2,-4(fp)
   22d70:	10800017 	ldw	r2,0(r2)
   22d74:	10800417 	ldw	r2,16(r2)
   22d78:	e13fff17 	ldw	r4,-4(fp)
   22d7c:	103ee83a 	callr	r2
   22d80:	00000106 	br	22d88 <close+0x7c>
   22d84:	0005883a 	mov	r2,zero
   22d88:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   22d8c:	e13ffd17 	ldw	r4,-12(fp)
   22d90:	00236600 	call	23660 <alt_release_fd>
    if (rval < 0)
   22d94:	e0bffe17 	ldw	r2,-8(fp)
   22d98:	1000070e 	bge	r2,zero,22db8 <close+0xac>
    {
      ALT_ERRNO = -rval;
   22d9c:	0022cd00 	call	22cd0 <alt_get_errno>
   22da0:	1007883a 	mov	r3,r2
   22da4:	e0bffe17 	ldw	r2,-8(fp)
   22da8:	0085c83a 	sub	r2,zero,r2
   22dac:	18800015 	stw	r2,0(r3)
      return -1;
   22db0:	00bfffc4 	movi	r2,-1
   22db4:	00000706 	br	22dd4 <close+0xc8>
    }
    return 0;
   22db8:	0005883a 	mov	r2,zero
   22dbc:	00000506 	br	22dd4 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   22dc0:	0022cd00 	call	22cd0 <alt_get_errno>
   22dc4:	1007883a 	mov	r3,r2
   22dc8:	00801444 	movi	r2,81
   22dcc:	18800015 	stw	r2,0(r3)
    return -1;
   22dd0:	00bfffc4 	movi	r2,-1
  }
}
   22dd4:	e037883a 	mov	sp,fp
   22dd8:	dfc00117 	ldw	ra,4(sp)
   22ddc:	df000017 	ldw	fp,0(sp)
   22de0:	dec00204 	addi	sp,sp,8
   22de4:	f800283a 	ret

00022de8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   22de8:	deffff04 	addi	sp,sp,-4
   22dec:	df000015 	stw	fp,0(sp)
   22df0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   22df4:	0001883a 	nop
   22df8:	e037883a 	mov	sp,fp
   22dfc:	df000017 	ldw	fp,0(sp)
   22e00:	dec00104 	addi	sp,sp,4
   22e04:	f800283a 	ret

00022e08 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   22e08:	defffc04 	addi	sp,sp,-16
   22e0c:	df000315 	stw	fp,12(sp)
   22e10:	df000304 	addi	fp,sp,12
   22e14:	e13fff15 	stw	r4,-4(fp)
   22e18:	e17ffe15 	stw	r5,-8(fp)
   22e1c:	e1bffd15 	stw	r6,-12(fp)
  return len;
   22e20:	e0bffd17 	ldw	r2,-12(fp)
}
   22e24:	e037883a 	mov	sp,fp
   22e28:	df000017 	ldw	fp,0(sp)
   22e2c:	dec00104 	addi	sp,sp,4
   22e30:	f800283a 	ret

00022e34 <alt_get_errno>:
{
   22e34:	defffe04 	addi	sp,sp,-8
   22e38:	dfc00115 	stw	ra,4(sp)
   22e3c:	df000015 	stw	fp,0(sp)
   22e40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   22e44:	d0a00717 	ldw	r2,-32740(gp)
   22e48:	10000326 	beq	r2,zero,22e58 <alt_get_errno+0x24>
   22e4c:	d0a00717 	ldw	r2,-32740(gp)
   22e50:	103ee83a 	callr	r2
   22e54:	00000106 	br	22e5c <alt_get_errno+0x28>
   22e58:	d0a0c404 	addi	r2,gp,-31984
}
   22e5c:	e037883a 	mov	sp,fp
   22e60:	dfc00117 	ldw	ra,4(sp)
   22e64:	df000017 	ldw	fp,0(sp)
   22e68:	dec00204 	addi	sp,sp,8
   22e6c:	f800283a 	ret

00022e70 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   22e70:	defffa04 	addi	sp,sp,-24
   22e74:	dfc00515 	stw	ra,20(sp)
   22e78:	df000415 	stw	fp,16(sp)
   22e7c:	df000404 	addi	fp,sp,16
   22e80:	e13ffd15 	stw	r4,-12(fp)
   22e84:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   22e88:	e0bffd17 	ldw	r2,-12(fp)
   22e8c:	10000326 	beq	r2,zero,22e9c <alt_dev_llist_insert+0x2c>
   22e90:	e0bffd17 	ldw	r2,-12(fp)
   22e94:	10800217 	ldw	r2,8(r2)
   22e98:	1000061e 	bne	r2,zero,22eb4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   22e9c:	0022e340 	call	22e34 <alt_get_errno>
   22ea0:	1007883a 	mov	r3,r2
   22ea4:	00800584 	movi	r2,22
   22ea8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   22eac:	00bffa84 	movi	r2,-22
   22eb0:	00001406 	br	22f04 <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   22eb4:	e0bffd17 	ldw	r2,-12(fp)
   22eb8:	e0fffc17 	ldw	r3,-16(fp)
   22ebc:	e0ffff15 	stw	r3,-4(fp)
   22ec0:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   22ec4:	e0bffe17 	ldw	r2,-8(fp)
   22ec8:	e0ffff17 	ldw	r3,-4(fp)
   22ecc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   22ed0:	e0bfff17 	ldw	r2,-4(fp)
   22ed4:	10c00017 	ldw	r3,0(r2)
   22ed8:	e0bffe17 	ldw	r2,-8(fp)
   22edc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   22ee0:	e0bfff17 	ldw	r2,-4(fp)
   22ee4:	10800017 	ldw	r2,0(r2)
   22ee8:	e0fffe17 	ldw	r3,-8(fp)
   22eec:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   22ef0:	e0bfff17 	ldw	r2,-4(fp)
   22ef4:	e0fffe17 	ldw	r3,-8(fp)
   22ef8:	10c00015 	stw	r3,0(r2)
}
   22efc:	0001883a 	nop

  return 0;  
   22f00:	0005883a 	mov	r2,zero
}
   22f04:	e037883a 	mov	sp,fp
   22f08:	dfc00117 	ldw	ra,4(sp)
   22f0c:	df000017 	ldw	fp,0(sp)
   22f10:	dec00204 	addi	sp,sp,8
   22f14:	f800283a 	ret

00022f18 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   22f18:	defffd04 	addi	sp,sp,-12
   22f1c:	dfc00215 	stw	ra,8(sp)
   22f20:	df000115 	stw	fp,4(sp)
   22f24:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   22f28:	008000b4 	movhi	r2,2
   22f2c:	108f9a04 	addi	r2,r2,15976
   22f30:	e0bfff15 	stw	r2,-4(fp)
   22f34:	00000606 	br	22f50 <_do_ctors+0x38>
        (*ctor) (); 
   22f38:	e0bfff17 	ldw	r2,-4(fp)
   22f3c:	10800017 	ldw	r2,0(r2)
   22f40:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   22f44:	e0bfff17 	ldw	r2,-4(fp)
   22f48:	10bfff04 	addi	r2,r2,-4
   22f4c:	e0bfff15 	stw	r2,-4(fp)
   22f50:	e0ffff17 	ldw	r3,-4(fp)
   22f54:	008000b4 	movhi	r2,2
   22f58:	108f9b04 	addi	r2,r2,15980
   22f5c:	18bff62e 	bgeu	r3,r2,22f38 <_do_ctors+0x20>
}
   22f60:	0001883a 	nop
   22f64:	0001883a 	nop
   22f68:	e037883a 	mov	sp,fp
   22f6c:	dfc00117 	ldw	ra,4(sp)
   22f70:	df000017 	ldw	fp,0(sp)
   22f74:	dec00204 	addi	sp,sp,8
   22f78:	f800283a 	ret

00022f7c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   22f7c:	defffd04 	addi	sp,sp,-12
   22f80:	dfc00215 	stw	ra,8(sp)
   22f84:	df000115 	stw	fp,4(sp)
   22f88:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   22f8c:	008000b4 	movhi	r2,2
   22f90:	108f9a04 	addi	r2,r2,15976
   22f94:	e0bfff15 	stw	r2,-4(fp)
   22f98:	00000606 	br	22fb4 <_do_dtors+0x38>
        (*dtor) (); 
   22f9c:	e0bfff17 	ldw	r2,-4(fp)
   22fa0:	10800017 	ldw	r2,0(r2)
   22fa4:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   22fa8:	e0bfff17 	ldw	r2,-4(fp)
   22fac:	10bfff04 	addi	r2,r2,-4
   22fb0:	e0bfff15 	stw	r2,-4(fp)
   22fb4:	e0ffff17 	ldw	r3,-4(fp)
   22fb8:	008000b4 	movhi	r2,2
   22fbc:	108f9b04 	addi	r2,r2,15980
   22fc0:	18bff62e 	bgeu	r3,r2,22f9c <_do_dtors+0x20>
}
   22fc4:	0001883a 	nop
   22fc8:	0001883a 	nop
   22fcc:	e037883a 	mov	sp,fp
   22fd0:	dfc00117 	ldw	ra,4(sp)
   22fd4:	df000017 	ldw	fp,0(sp)
   22fd8:	dec00204 	addi	sp,sp,8
   22fdc:	f800283a 	ret

00022fe0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   22fe0:	deffff04 	addi	sp,sp,-4
   22fe4:	df000015 	stw	fp,0(sp)
   22fe8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   22fec:	0001883a 	nop
   22ff0:	e037883a 	mov	sp,fp
   22ff4:	df000017 	ldw	fp,0(sp)
   22ff8:	dec00104 	addi	sp,sp,4
   22ffc:	f800283a 	ret

00023000 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   23000:	defff904 	addi	sp,sp,-28
   23004:	dfc00615 	stw	ra,24(sp)
   23008:	df000515 	stw	fp,20(sp)
   2300c:	df000504 	addi	fp,sp,20
   23010:	e13fff15 	stw	r4,-4(fp)
   23014:	e17ffe15 	stw	r5,-8(fp)
   23018:	e1bffd15 	stw	r6,-12(fp)
   2301c:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   23020:	e0800217 	ldw	r2,8(fp)
   23024:	d8800015 	stw	r2,0(sp)
   23028:	e1fffc17 	ldw	r7,-16(fp)
   2302c:	e1bffd17 	ldw	r6,-12(fp)
   23030:	e17ffe17 	ldw	r5,-8(fp)
   23034:	e13fff17 	ldw	r4,-4(fp)
   23038:	00231b00 	call	231b0 <alt_iic_isr_register>
}  
   2303c:	e037883a 	mov	sp,fp
   23040:	dfc00117 	ldw	ra,4(sp)
   23044:	df000017 	ldw	fp,0(sp)
   23048:	dec00204 	addi	sp,sp,8
   2304c:	f800283a 	ret

00023050 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   23050:	defff904 	addi	sp,sp,-28
   23054:	df000615 	stw	fp,24(sp)
   23058:	df000604 	addi	fp,sp,24
   2305c:	e13ffb15 	stw	r4,-20(fp)
   23060:	e17ffa15 	stw	r5,-24(fp)
   23064:	e0bffa17 	ldw	r2,-24(fp)
   23068:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   2306c:	0005303a 	rdctl	r2,status
   23070:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23074:	e0fffe17 	ldw	r3,-8(fp)
   23078:	00bfff84 	movi	r2,-2
   2307c:	1884703a 	and	r2,r3,r2
   23080:	1001703a 	wrctl	status,r2
  return context;
   23084:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   23088:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   2308c:	00c00044 	movi	r3,1
   23090:	e0bfff17 	ldw	r2,-4(fp)
   23094:	1884983a 	sll	r2,r3,r2
   23098:	1007883a 	mov	r3,r2
   2309c:	d0a0c817 	ldw	r2,-31968(gp)
   230a0:	1884b03a 	or	r2,r3,r2
   230a4:	d0a0c815 	stw	r2,-31968(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   230a8:	d0a0c817 	ldw	r2,-31968(gp)
   230ac:	100170fa 	wrctl	ienable,r2
   230b0:	e0bffd17 	ldw	r2,-12(fp)
   230b4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   230b8:	e0bffc17 	ldw	r2,-16(fp)
   230bc:	1001703a 	wrctl	status,r2
}
   230c0:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
   230c4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   230c8:	e037883a 	mov	sp,fp
   230cc:	df000017 	ldw	fp,0(sp)
   230d0:	dec00104 	addi	sp,sp,4
   230d4:	f800283a 	ret

000230d8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   230d8:	defff904 	addi	sp,sp,-28
   230dc:	df000615 	stw	fp,24(sp)
   230e0:	df000604 	addi	fp,sp,24
   230e4:	e13ffb15 	stw	r4,-20(fp)
   230e8:	e17ffa15 	stw	r5,-24(fp)
   230ec:	e0bffa17 	ldw	r2,-24(fp)
   230f0:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   230f4:	0005303a 	rdctl	r2,status
   230f8:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   230fc:	e0fffe17 	ldw	r3,-8(fp)
   23100:	00bfff84 	movi	r2,-2
   23104:	1884703a 	and	r2,r3,r2
   23108:	1001703a 	wrctl	status,r2
  return context;
   2310c:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
   23110:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
   23114:	00c00044 	movi	r3,1
   23118:	e0bfff17 	ldw	r2,-4(fp)
   2311c:	1884983a 	sll	r2,r3,r2
   23120:	0084303a 	nor	r2,zero,r2
   23124:	1007883a 	mov	r3,r2
   23128:	d0a0c817 	ldw	r2,-31968(gp)
   2312c:	1884703a 	and	r2,r3,r2
   23130:	d0a0c815 	stw	r2,-31968(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   23134:	d0a0c817 	ldw	r2,-31968(gp)
   23138:	100170fa 	wrctl	ienable,r2
   2313c:	e0bffd17 	ldw	r2,-12(fp)
   23140:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   23144:	e0bffc17 	ldw	r2,-16(fp)
   23148:	1001703a 	wrctl	status,r2
}
   2314c:	0001883a 	nop
  return 0;
   23150:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   23154:	e037883a 	mov	sp,fp
   23158:	df000017 	ldw	fp,0(sp)
   2315c:	dec00104 	addi	sp,sp,4
   23160:	f800283a 	ret

00023164 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   23164:	defffc04 	addi	sp,sp,-16
   23168:	df000315 	stw	fp,12(sp)
   2316c:	df000304 	addi	fp,sp,12
   23170:	e13ffe15 	stw	r4,-8(fp)
   23174:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   23178:	000530fa 	rdctl	r2,ienable
   2317c:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   23180:	00c00044 	movi	r3,1
   23184:	e0bffd17 	ldw	r2,-12(fp)
   23188:	1884983a 	sll	r2,r3,r2
   2318c:	1007883a 	mov	r3,r2
   23190:	e0bfff17 	ldw	r2,-4(fp)
   23194:	1884703a 	and	r2,r3,r2
   23198:	1004c03a 	cmpne	r2,r2,zero
   2319c:	10803fcc 	andi	r2,r2,255
}
   231a0:	e037883a 	mov	sp,fp
   231a4:	df000017 	ldw	fp,0(sp)
   231a8:	dec00104 	addi	sp,sp,4
   231ac:	f800283a 	ret

000231b0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   231b0:	defff504 	addi	sp,sp,-44
   231b4:	dfc00a15 	stw	ra,40(sp)
   231b8:	df000915 	stw	fp,36(sp)
   231bc:	df000904 	addi	fp,sp,36
   231c0:	e13ffa15 	stw	r4,-24(fp)
   231c4:	e17ff915 	stw	r5,-28(fp)
   231c8:	e1bff815 	stw	r6,-32(fp)
   231cc:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
   231d0:	00bffa84 	movi	r2,-22
   231d4:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   231d8:	e0bff917 	ldw	r2,-28(fp)
   231dc:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   231e0:	e0bffe17 	ldw	r2,-8(fp)
   231e4:	10800808 	cmpgei	r2,r2,32
   231e8:	1000251e 	bne	r2,zero,23280 <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
   231ec:	0005303a 	rdctl	r2,status
   231f0:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   231f4:	e0fffc17 	ldw	r3,-16(fp)
   231f8:	00bfff84 	movi	r2,-2
   231fc:	1884703a 	and	r2,r3,r2
   23200:	1001703a 	wrctl	status,r2
  return context;
   23204:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   23208:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
   2320c:	e0bffe17 	ldw	r2,-8(fp)
   23210:	100890fa 	slli	r4,r2,3
   23214:	e0fff817 	ldw	r3,-32(fp)
   23218:	008000b4 	movhi	r2,2
   2321c:	2085883a 	add	r2,r4,r2
   23220:	10d22215 	stw	r3,18568(r2)
    alt_irq[id].context = isr_context;
   23224:	e0bffe17 	ldw	r2,-8(fp)
   23228:	100890fa 	slli	r4,r2,3
   2322c:	e0fff717 	ldw	r3,-36(fp)
   23230:	008000b4 	movhi	r2,2
   23234:	2085883a 	add	r2,r4,r2
   23238:	10d22315 	stw	r3,18572(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   2323c:	e0bff817 	ldw	r2,-32(fp)
   23240:	10000526 	beq	r2,zero,23258 <alt_iic_isr_register+0xa8>
   23244:	e0bffe17 	ldw	r2,-8(fp)
   23248:	100b883a 	mov	r5,r2
   2324c:	e13ffa17 	ldw	r4,-24(fp)
   23250:	00230500 	call	23050 <alt_ic_irq_enable>
   23254:	00000406 	br	23268 <alt_iic_isr_register+0xb8>
   23258:	e0bffe17 	ldw	r2,-8(fp)
   2325c:	100b883a 	mov	r5,r2
   23260:	e13ffa17 	ldw	r4,-24(fp)
   23264:	00230d80 	call	230d8 <alt_ic_irq_disable>
   23268:	e0bfff15 	stw	r2,-4(fp)
   2326c:	e0bffd17 	ldw	r2,-12(fp)
   23270:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   23274:	e0bffb17 	ldw	r2,-20(fp)
   23278:	1001703a 	wrctl	status,r2
}
   2327c:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
   23280:	e0bfff17 	ldw	r2,-4(fp)
}
   23284:	e037883a 	mov	sp,fp
   23288:	dfc00117 	ldw	ra,4(sp)
   2328c:	df000017 	ldw	fp,0(sp)
   23290:	dec00204 	addi	sp,sp,8
   23294:	f800283a 	ret

00023298 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   23298:	defff904 	addi	sp,sp,-28
   2329c:	dfc00615 	stw	ra,24(sp)
   232a0:	df000515 	stw	fp,20(sp)
   232a4:	df000504 	addi	fp,sp,20
   232a8:	e13ffe15 	stw	r4,-8(fp)
   232ac:	e17ffd15 	stw	r5,-12(fp)
   232b0:	e1bffc15 	stw	r6,-16(fp)
   232b4:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
   232b8:	e1bffb17 	ldw	r6,-20(fp)
   232bc:	e17ffc17 	ldw	r5,-16(fp)
   232c0:	e13ffd17 	ldw	r4,-12(fp)
   232c4:	00235000 	call	23500 <open>
   232c8:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
   232cc:	e0bfff17 	ldw	r2,-4(fp)
   232d0:	10002016 	blt	r2,zero,23354 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
   232d4:	e0ffff17 	ldw	r3,-4(fp)
   232d8:	1805883a 	mov	r2,r3
   232dc:	1085883a 	add	r2,r2,r2
   232e0:	10c5883a 	add	r2,r2,r3
   232e4:	100490ba 	slli	r2,r2,2
   232e8:	00c000b4 	movhi	r3,2
   232ec:	10c7883a 	add	r3,r2,r3
   232f0:	18d0f617 	ldw	r3,17368(r3)
   232f4:	e0bffe17 	ldw	r2,-8(fp)
   232f8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   232fc:	e0ffff17 	ldw	r3,-4(fp)
   23300:	1805883a 	mov	r2,r3
   23304:	1085883a 	add	r2,r2,r2
   23308:	10c5883a 	add	r2,r2,r3
   2330c:	100490ba 	slli	r2,r2,2
   23310:	00c000b4 	movhi	r3,2
   23314:	10c7883a 	add	r3,r2,r3
   23318:	18d0f717 	ldw	r3,17372(r3)
   2331c:	e0bffe17 	ldw	r2,-8(fp)
   23320:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   23324:	e0ffff17 	ldw	r3,-4(fp)
   23328:	1805883a 	mov	r2,r3
   2332c:	1085883a 	add	r2,r2,r2
   23330:	10c5883a 	add	r2,r2,r3
   23334:	100490ba 	slli	r2,r2,2
   23338:	00c000b4 	movhi	r3,2
   2333c:	10c7883a 	add	r3,r2,r3
   23340:	18d0f817 	ldw	r3,17376(r3)
   23344:	e0bffe17 	ldw	r2,-8(fp)
   23348:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   2334c:	e13fff17 	ldw	r4,-4(fp)
   23350:	00236600 	call	23660 <alt_release_fd>
  }
} 
   23354:	0001883a 	nop
   23358:	e037883a 	mov	sp,fp
   2335c:	dfc00117 	ldw	ra,4(sp)
   23360:	df000017 	ldw	fp,0(sp)
   23364:	dec00204 	addi	sp,sp,8
   23368:	f800283a 	ret

0002336c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   2336c:	defffb04 	addi	sp,sp,-20
   23370:	dfc00415 	stw	ra,16(sp)
   23374:	df000315 	stw	fp,12(sp)
   23378:	df000304 	addi	fp,sp,12
   2337c:	e13fff15 	stw	r4,-4(fp)
   23380:	e17ffe15 	stw	r5,-8(fp)
   23384:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   23388:	01c07fc4 	movi	r7,511
   2338c:	01800044 	movi	r6,1
   23390:	e17fff17 	ldw	r5,-4(fp)
   23394:	010000b4 	movhi	r4,2
   23398:	2110f904 	addi	r4,r4,17380
   2339c:	00232980 	call	23298 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   233a0:	01c07fc4 	movi	r7,511
   233a4:	000d883a 	mov	r6,zero
   233a8:	e17ffe17 	ldw	r5,-8(fp)
   233ac:	010000b4 	movhi	r4,2
   233b0:	2110f604 	addi	r4,r4,17368
   233b4:	00232980 	call	23298 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   233b8:	01c07fc4 	movi	r7,511
   233bc:	01800044 	movi	r6,1
   233c0:	e17ffd17 	ldw	r5,-12(fp)
   233c4:	010000b4 	movhi	r4,2
   233c8:	2110fc04 	addi	r4,r4,17392
   233cc:	00232980 	call	23298 <alt_open_fd>
}  
   233d0:	0001883a 	nop
   233d4:	e037883a 	mov	sp,fp
   233d8:	dfc00117 	ldw	ra,4(sp)
   233dc:	df000017 	ldw	fp,0(sp)
   233e0:	dec00204 	addi	sp,sp,8
   233e4:	f800283a 	ret

000233e8 <alt_get_errno>:
{
   233e8:	defffe04 	addi	sp,sp,-8
   233ec:	dfc00115 	stw	ra,4(sp)
   233f0:	df000015 	stw	fp,0(sp)
   233f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   233f8:	d0a00717 	ldw	r2,-32740(gp)
   233fc:	10000326 	beq	r2,zero,2340c <alt_get_errno+0x24>
   23400:	d0a00717 	ldw	r2,-32740(gp)
   23404:	103ee83a 	callr	r2
   23408:	00000106 	br	23410 <alt_get_errno+0x28>
   2340c:	d0a0c404 	addi	r2,gp,-31984
}
   23410:	e037883a 	mov	sp,fp
   23414:	dfc00117 	ldw	ra,4(sp)
   23418:	df000017 	ldw	fp,0(sp)
   2341c:	dec00204 	addi	sp,sp,8
   23420:	f800283a 	ret

00023424 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   23424:	defffd04 	addi	sp,sp,-12
   23428:	df000215 	stw	fp,8(sp)
   2342c:	df000204 	addi	fp,sp,8
   23430:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   23434:	e0bffe17 	ldw	r2,-8(fp)
   23438:	10800217 	ldw	r2,8(r2)
   2343c:	10d00034 	orhi	r3,r2,16384
   23440:	e0bffe17 	ldw	r2,-8(fp)
   23444:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   23448:	e03fff15 	stw	zero,-4(fp)
   2344c:	00002306 	br	234dc <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   23450:	e0ffff17 	ldw	r3,-4(fp)
   23454:	1805883a 	mov	r2,r3
   23458:	1085883a 	add	r2,r2,r2
   2345c:	10c5883a 	add	r2,r2,r3
   23460:	100490ba 	slli	r2,r2,2
   23464:	00c000b4 	movhi	r3,2
   23468:	10c7883a 	add	r3,r2,r3
   2346c:	18d0f617 	ldw	r3,17368(r3)
   23470:	e0bffe17 	ldw	r2,-8(fp)
   23474:	10800017 	ldw	r2,0(r2)
   23478:	1880151e 	bne	r3,r2,234d0 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   2347c:	e0ffff17 	ldw	r3,-4(fp)
   23480:	1805883a 	mov	r2,r3
   23484:	1085883a 	add	r2,r2,r2
   23488:	10c5883a 	add	r2,r2,r3
   2348c:	100490ba 	slli	r2,r2,2
   23490:	00c000b4 	movhi	r3,2
   23494:	10c7883a 	add	r3,r2,r3
   23498:	1890f817 	ldw	r2,17376(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
   2349c:	10000c0e 	bge	r2,zero,234d0 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
   234a0:	e0ffff17 	ldw	r3,-4(fp)
   234a4:	1805883a 	mov	r2,r3
   234a8:	1085883a 	add	r2,r2,r2
   234ac:	10c5883a 	add	r2,r2,r3
   234b0:	100490ba 	slli	r2,r2,2
   234b4:	00c000b4 	movhi	r3,2
   234b8:	18d0f604 	addi	r3,r3,17368
   234bc:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   234c0:	e0fffe17 	ldw	r3,-8(fp)
   234c4:	18800226 	beq	r3,r2,234d0 <alt_file_locked+0xac>
    {
      return -EACCES;
   234c8:	00bffcc4 	movi	r2,-13
   234cc:	00000806 	br	234f0 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
   234d0:	e0bfff17 	ldw	r2,-4(fp)
   234d4:	10800044 	addi	r2,r2,1
   234d8:	e0bfff15 	stw	r2,-4(fp)
   234dc:	d0a00617 	ldw	r2,-32744(gp)
   234e0:	1007883a 	mov	r3,r2
   234e4:	e0bfff17 	ldw	r2,-4(fp)
   234e8:	18bfd92e 	bgeu	r3,r2,23450 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   234ec:	0005883a 	mov	r2,zero
}
   234f0:	e037883a 	mov	sp,fp
   234f4:	df000017 	ldw	fp,0(sp)
   234f8:	dec00104 	addi	sp,sp,4
   234fc:	f800283a 	ret

00023500 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   23500:	defff604 	addi	sp,sp,-40
   23504:	dfc00915 	stw	ra,36(sp)
   23508:	df000815 	stw	fp,32(sp)
   2350c:	df000804 	addi	fp,sp,32
   23510:	e13ffa15 	stw	r4,-24(fp)
   23514:	e17ff915 	stw	r5,-28(fp)
   23518:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   2351c:	00bfffc4 	movi	r2,-1
   23520:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
   23524:	00bffb44 	movi	r2,-19
   23528:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
   2352c:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   23530:	d1600404 	addi	r5,gp,-32752
   23534:	e13ffa17 	ldw	r4,-24(fp)
   23538:	00238a00 	call	238a0 <alt_find_dev>
   2353c:	e0bfff15 	stw	r2,-4(fp)
   23540:	e0bfff17 	ldw	r2,-4(fp)
   23544:	1000051e 	bne	r2,zero,2355c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   23548:	e13ffa17 	ldw	r4,-24(fp)
   2354c:	00239300 	call	23930 <alt_find_file>
   23550:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
   23554:	00800044 	movi	r2,1
   23558:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   2355c:	e0bfff17 	ldw	r2,-4(fp)
   23560:	10002c26 	beq	r2,zero,23614 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   23564:	e13fff17 	ldw	r4,-4(fp)
   23568:	0023a380 	call	23a38 <alt_get_fd>
   2356c:	e0bffe15 	stw	r2,-8(fp)
   23570:	e0bffe17 	ldw	r2,-8(fp)
   23574:	1000030e 	bge	r2,zero,23584 <open+0x84>
    {
      status = index;
   23578:	e0bffe17 	ldw	r2,-8(fp)
   2357c:	e0bffd15 	stw	r2,-12(fp)
   23580:	00002606 	br	2361c <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   23584:	e0fffe17 	ldw	r3,-8(fp)
   23588:	1805883a 	mov	r2,r3
   2358c:	1085883a 	add	r2,r2,r2
   23590:	10c5883a 	add	r2,r2,r3
   23594:	100490ba 	slli	r2,r2,2
   23598:	00c000b4 	movhi	r3,2
   2359c:	18d0f604 	addi	r3,r3,17368
   235a0:	10c5883a 	add	r2,r2,r3
   235a4:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   235a8:	e0fff917 	ldw	r3,-28(fp)
   235ac:	00900034 	movhi	r2,16384
   235b0:	10bfffc4 	addi	r2,r2,-1
   235b4:	1886703a 	and	r3,r3,r2
   235b8:	e0bffb17 	ldw	r2,-20(fp)
   235bc:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   235c0:	e0bffc17 	ldw	r2,-16(fp)
   235c4:	1000051e 	bne	r2,zero,235dc <open+0xdc>
   235c8:	e13ffb17 	ldw	r4,-20(fp)
   235cc:	00234240 	call	23424 <alt_file_locked>
   235d0:	e0bffd15 	stw	r2,-12(fp)
   235d4:	e0bffd17 	ldw	r2,-12(fp)
   235d8:	10001016 	blt	r2,zero,2361c <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   235dc:	e0bfff17 	ldw	r2,-4(fp)
   235e0:	10800317 	ldw	r2,12(r2)
   235e4:	10000826 	beq	r2,zero,23608 <open+0x108>
   235e8:	e0bfff17 	ldw	r2,-4(fp)
   235ec:	10800317 	ldw	r2,12(r2)
   235f0:	e1fff817 	ldw	r7,-32(fp)
   235f4:	e1bff917 	ldw	r6,-28(fp)
   235f8:	e17ffa17 	ldw	r5,-24(fp)
   235fc:	e13ffb17 	ldw	r4,-20(fp)
   23600:	103ee83a 	callr	r2
   23604:	00000106 	br	2360c <open+0x10c>
   23608:	0005883a 	mov	r2,zero
   2360c:	e0bffd15 	stw	r2,-12(fp)
   23610:	00000206 	br	2361c <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   23614:	00bffb44 	movi	r2,-19
   23618:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   2361c:	e0bffd17 	ldw	r2,-12(fp)
   23620:	1000090e 	bge	r2,zero,23648 <open+0x148>
  {
    alt_release_fd (index);  
   23624:	e13ffe17 	ldw	r4,-8(fp)
   23628:	00236600 	call	23660 <alt_release_fd>
    ALT_ERRNO = -status;
   2362c:	00233e80 	call	233e8 <alt_get_errno>
   23630:	1007883a 	mov	r3,r2
   23634:	e0bffd17 	ldw	r2,-12(fp)
   23638:	0085c83a 	sub	r2,zero,r2
   2363c:	18800015 	stw	r2,0(r3)
    return -1;
   23640:	00bfffc4 	movi	r2,-1
   23644:	00000106 	br	2364c <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   23648:	e0bffe17 	ldw	r2,-8(fp)
}
   2364c:	e037883a 	mov	sp,fp
   23650:	dfc00117 	ldw	ra,4(sp)
   23654:	df000017 	ldw	fp,0(sp)
   23658:	dec00204 	addi	sp,sp,8
   2365c:	f800283a 	ret

00023660 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   23660:	defffe04 	addi	sp,sp,-8
   23664:	df000115 	stw	fp,4(sp)
   23668:	df000104 	addi	fp,sp,4
   2366c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   23670:	e0bfff17 	ldw	r2,-4(fp)
   23674:	108000d0 	cmplti	r2,r2,3
   23678:	1000101e 	bne	r2,zero,236bc <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
   2367c:	e0ffff17 	ldw	r3,-4(fp)
   23680:	1805883a 	mov	r2,r3
   23684:	1085883a 	add	r2,r2,r2
   23688:	10c5883a 	add	r2,r2,r3
   2368c:	100490ba 	slli	r2,r2,2
   23690:	00c000b4 	movhi	r3,2
   23694:	10c7883a 	add	r3,r2,r3
   23698:	1810f815 	stw	zero,17376(r3)
    alt_fd_list[fd].dev      = 0;
   2369c:	e0ffff17 	ldw	r3,-4(fp)
   236a0:	1805883a 	mov	r2,r3
   236a4:	1085883a 	add	r2,r2,r2
   236a8:	10c5883a 	add	r2,r2,r3
   236ac:	100490ba 	slli	r2,r2,2
   236b0:	00c000b4 	movhi	r3,2
   236b4:	10c7883a 	add	r3,r2,r3
   236b8:	1810f615 	stw	zero,17368(r3)
  }
}
   236bc:	0001883a 	nop
   236c0:	e037883a 	mov	sp,fp
   236c4:	df000017 	ldw	fp,0(sp)
   236c8:	dec00104 	addi	sp,sp,4
   236cc:	f800283a 	ret

000236d0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   236d0:	defffa04 	addi	sp,sp,-24
   236d4:	df000515 	stw	fp,20(sp)
   236d8:	df000504 	addi	fp,sp,20
   236dc:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
   236e0:	0005303a 	rdctl	r2,status
   236e4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   236e8:	e0fffc17 	ldw	r3,-16(fp)
   236ec:	00bfff84 	movi	r2,-2
   236f0:	1884703a 	and	r2,r3,r2
   236f4:	1001703a 	wrctl	status,r2
  return context;
   236f8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   236fc:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
   23700:	e0bffb17 	ldw	r2,-20(fp)
   23704:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   23708:	e0bffd17 	ldw	r2,-12(fp)
   2370c:	10800017 	ldw	r2,0(r2)
   23710:	e0fffd17 	ldw	r3,-12(fp)
   23714:	18c00117 	ldw	r3,4(r3)
   23718:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   2371c:	e0bffd17 	ldw	r2,-12(fp)
   23720:	10800117 	ldw	r2,4(r2)
   23724:	e0fffd17 	ldw	r3,-12(fp)
   23728:	18c00017 	ldw	r3,0(r3)
   2372c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   23730:	e0bffd17 	ldw	r2,-12(fp)
   23734:	e0fffd17 	ldw	r3,-12(fp)
   23738:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   2373c:	e0bffd17 	ldw	r2,-12(fp)
   23740:	e0fffd17 	ldw	r3,-12(fp)
   23744:	10c00015 	stw	r3,0(r2)
} 
   23748:	0001883a 	nop
   2374c:	e0bfff17 	ldw	r2,-4(fp)
   23750:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   23754:	e0bffe17 	ldw	r2,-8(fp)
   23758:	1001703a 	wrctl	status,r2
}
   2375c:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
   23760:	0001883a 	nop
   23764:	e037883a 	mov	sp,fp
   23768:	df000017 	ldw	fp,0(sp)
   2376c:	dec00104 	addi	sp,sp,4
   23770:	f800283a 	ret

00023774 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   23774:	defffb04 	addi	sp,sp,-20
   23778:	dfc00415 	stw	ra,16(sp)
   2377c:	df000315 	stw	fp,12(sp)
   23780:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   23784:	d0a00917 	ldw	r2,-32732(gp)
   23788:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   2378c:	d0a0ca17 	ldw	r2,-31960(gp)
   23790:	10800044 	addi	r2,r2,1
   23794:	d0a0ca15 	stw	r2,-31960(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   23798:	00002e06 	br	23854 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   2379c:	e0bfff17 	ldw	r2,-4(fp)
   237a0:	10800017 	ldw	r2,0(r2)
   237a4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   237a8:	e0bfff17 	ldw	r2,-4(fp)
   237ac:	10800403 	ldbu	r2,16(r2)
   237b0:	10803fcc 	andi	r2,r2,255
   237b4:	10000426 	beq	r2,zero,237c8 <alt_tick+0x54>
   237b8:	d0a0ca17 	ldw	r2,-31960(gp)
   237bc:	1000021e 	bne	r2,zero,237c8 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   237c0:	e0bfff17 	ldw	r2,-4(fp)
   237c4:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   237c8:	e0bfff17 	ldw	r2,-4(fp)
   237cc:	10800217 	ldw	r2,8(r2)
   237d0:	d0e0ca17 	ldw	r3,-31960(gp)
   237d4:	18801d36 	bltu	r3,r2,2384c <alt_tick+0xd8>
   237d8:	e0bfff17 	ldw	r2,-4(fp)
   237dc:	10800403 	ldbu	r2,16(r2)
   237e0:	10803fcc 	andi	r2,r2,255
   237e4:	1000191e 	bne	r2,zero,2384c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   237e8:	e0bfff17 	ldw	r2,-4(fp)
   237ec:	10800317 	ldw	r2,12(r2)
   237f0:	e0ffff17 	ldw	r3,-4(fp)
   237f4:	18c00517 	ldw	r3,20(r3)
   237f8:	1809883a 	mov	r4,r3
   237fc:	103ee83a 	callr	r2
   23800:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   23804:	e0bffd17 	ldw	r2,-12(fp)
   23808:	1000031e 	bne	r2,zero,23818 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   2380c:	e13fff17 	ldw	r4,-4(fp)
   23810:	00236d00 	call	236d0 <alt_alarm_stop>
   23814:	00000d06 	br	2384c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   23818:	e0bfff17 	ldw	r2,-4(fp)
   2381c:	10c00217 	ldw	r3,8(r2)
   23820:	e0bffd17 	ldw	r2,-12(fp)
   23824:	1887883a 	add	r3,r3,r2
   23828:	e0bfff17 	ldw	r2,-4(fp)
   2382c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   23830:	e0bfff17 	ldw	r2,-4(fp)
   23834:	10c00217 	ldw	r3,8(r2)
   23838:	d0a0ca17 	ldw	r2,-31960(gp)
   2383c:	1880032e 	bgeu	r3,r2,2384c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   23840:	e0bfff17 	ldw	r2,-4(fp)
   23844:	00c00044 	movi	r3,1
   23848:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   2384c:	e0bffe17 	ldw	r2,-8(fp)
   23850:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
   23854:	e0ffff17 	ldw	r3,-4(fp)
   23858:	d0a00904 	addi	r2,gp,-32732
   2385c:	18bfcf1e 	bne	r3,r2,2379c <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   23860:	0001883a 	nop
}
   23864:	0001883a 	nop
   23868:	e037883a 	mov	sp,fp
   2386c:	dfc00117 	ldw	ra,4(sp)
   23870:	df000017 	ldw	fp,0(sp)
   23874:	dec00204 	addi	sp,sp,8
   23878:	f800283a 	ret

0002387c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   2387c:	deffff04 	addi	sp,sp,-4
   23880:	df000015 	stw	fp,0(sp)
   23884:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   23888:	000170fa 	wrctl	ienable,zero
}
   2388c:	0001883a 	nop
   23890:	e037883a 	mov	sp,fp
   23894:	df000017 	ldw	fp,0(sp)
   23898:	dec00104 	addi	sp,sp,4
   2389c:	f800283a 	ret

000238a0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   238a0:	defffa04 	addi	sp,sp,-24
   238a4:	dfc00515 	stw	ra,20(sp)
   238a8:	df000415 	stw	fp,16(sp)
   238ac:	df000404 	addi	fp,sp,16
   238b0:	e13ffd15 	stw	r4,-12(fp)
   238b4:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
   238b8:	e0bffc17 	ldw	r2,-16(fp)
   238bc:	10800017 	ldw	r2,0(r2)
   238c0:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   238c4:	e13ffd17 	ldw	r4,-12(fp)
   238c8:	0021d300 	call	21d30 <strlen>
   238cc:	10800044 	addi	r2,r2,1
   238d0:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   238d4:	00000d06 	br	2390c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   238d8:	e0bfff17 	ldw	r2,-4(fp)
   238dc:	10800217 	ldw	r2,8(r2)
   238e0:	e0fffe17 	ldw	r3,-8(fp)
   238e4:	180d883a 	mov	r6,r3
   238e8:	e17ffd17 	ldw	r5,-12(fp)
   238ec:	1009883a 	mov	r4,r2
   238f0:	0023bbc0 	call	23bbc <memcmp>
   238f4:	1000021e 	bne	r2,zero,23900 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   238f8:	e0bfff17 	ldw	r2,-4(fp)
   238fc:	00000706 	br	2391c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   23900:	e0bfff17 	ldw	r2,-4(fp)
   23904:	10800017 	ldw	r2,0(r2)
   23908:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
   2390c:	e0ffff17 	ldw	r3,-4(fp)
   23910:	e0bffc17 	ldw	r2,-16(fp)
   23914:	18bff01e 	bne	r3,r2,238d8 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
   23918:	0005883a 	mov	r2,zero
}
   2391c:	e037883a 	mov	sp,fp
   23920:	dfc00117 	ldw	ra,4(sp)
   23924:	df000017 	ldw	fp,0(sp)
   23928:	dec00204 	addi	sp,sp,8
   2392c:	f800283a 	ret

00023930 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   23930:	defffb04 	addi	sp,sp,-20
   23934:	dfc00415 	stw	ra,16(sp)
   23938:	df000315 	stw	fp,12(sp)
   2393c:	df000304 	addi	fp,sp,12
   23940:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   23944:	d0a00217 	ldw	r2,-32760(gp)
   23948:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2394c:	00003106 	br	23a14 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   23950:	e0bfff17 	ldw	r2,-4(fp)
   23954:	10800217 	ldw	r2,8(r2)
   23958:	1009883a 	mov	r4,r2
   2395c:	0021d300 	call	21d30 <strlen>
   23960:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   23964:	e0bfff17 	ldw	r2,-4(fp)
   23968:	10c00217 	ldw	r3,8(r2)
   2396c:	e0bffe17 	ldw	r2,-8(fp)
   23970:	10bfffc4 	addi	r2,r2,-1
   23974:	1885883a 	add	r2,r3,r2
   23978:	10800003 	ldbu	r2,0(r2)
   2397c:	10803fcc 	andi	r2,r2,255
   23980:	1080201c 	xori	r2,r2,128
   23984:	10bfe004 	addi	r2,r2,-128
   23988:	10800bd8 	cmpnei	r2,r2,47
   2398c:	1000031e 	bne	r2,zero,2399c <alt_find_file+0x6c>
    {
      len -= 1;
   23990:	e0bffe17 	ldw	r2,-8(fp)
   23994:	10bfffc4 	addi	r2,r2,-1
   23998:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2399c:	e0bffe17 	ldw	r2,-8(fp)
   239a0:	e0fffd17 	ldw	r3,-12(fp)
   239a4:	1885883a 	add	r2,r3,r2
   239a8:	10800003 	ldbu	r2,0(r2)
   239ac:	10803fcc 	andi	r2,r2,255
   239b0:	1080201c 	xori	r2,r2,128
   239b4:	10bfe004 	addi	r2,r2,-128
   239b8:	10800be0 	cmpeqi	r2,r2,47
   239bc:	1000081e 	bne	r2,zero,239e0 <alt_find_file+0xb0>
   239c0:	e0bffe17 	ldw	r2,-8(fp)
   239c4:	e0fffd17 	ldw	r3,-12(fp)
   239c8:	1885883a 	add	r2,r3,r2
   239cc:	10800003 	ldbu	r2,0(r2)
   239d0:	10803fcc 	andi	r2,r2,255
   239d4:	1080201c 	xori	r2,r2,128
   239d8:	10bfe004 	addi	r2,r2,-128
   239dc:	10000a1e 	bne	r2,zero,23a08 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   239e0:	e0bfff17 	ldw	r2,-4(fp)
   239e4:	10800217 	ldw	r2,8(r2)
   239e8:	e0fffe17 	ldw	r3,-8(fp)
   239ec:	180d883a 	mov	r6,r3
   239f0:	e17ffd17 	ldw	r5,-12(fp)
   239f4:	1009883a 	mov	r4,r2
   239f8:	0023bbc0 	call	23bbc <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
   239fc:	1000021e 	bne	r2,zero,23a08 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
   23a00:	e0bfff17 	ldw	r2,-4(fp)
   23a04:	00000706 	br	23a24 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   23a08:	e0bfff17 	ldw	r2,-4(fp)
   23a0c:	10800017 	ldw	r2,0(r2)
   23a10:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
   23a14:	e0ffff17 	ldw	r3,-4(fp)
   23a18:	d0a00204 	addi	r2,gp,-32760
   23a1c:	18bfcc1e 	bne	r3,r2,23950 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
   23a20:	0005883a 	mov	r2,zero
}
   23a24:	e037883a 	mov	sp,fp
   23a28:	dfc00117 	ldw	ra,4(sp)
   23a2c:	df000017 	ldw	fp,0(sp)
   23a30:	dec00204 	addi	sp,sp,8
   23a34:	f800283a 	ret

00023a38 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   23a38:	defffc04 	addi	sp,sp,-16
   23a3c:	df000315 	stw	fp,12(sp)
   23a40:	df000304 	addi	fp,sp,12
   23a44:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
   23a48:	00bffa04 	movi	r2,-24
   23a4c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   23a50:	e03fff15 	stw	zero,-4(fp)
   23a54:	00001d06 	br	23acc <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   23a58:	e0ffff17 	ldw	r3,-4(fp)
   23a5c:	1805883a 	mov	r2,r3
   23a60:	1085883a 	add	r2,r2,r2
   23a64:	10c5883a 	add	r2,r2,r3
   23a68:	100490ba 	slli	r2,r2,2
   23a6c:	00c000b4 	movhi	r3,2
   23a70:	10c7883a 	add	r3,r2,r3
   23a74:	1890f617 	ldw	r2,17368(r3)
   23a78:	1000111e 	bne	r2,zero,23ac0 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   23a7c:	e0ffff17 	ldw	r3,-4(fp)
   23a80:	1805883a 	mov	r2,r3
   23a84:	1085883a 	add	r2,r2,r2
   23a88:	10c5883a 	add	r2,r2,r3
   23a8c:	100490ba 	slli	r2,r2,2
   23a90:	e13ffd17 	ldw	r4,-12(fp)
   23a94:	00c000b4 	movhi	r3,2
   23a98:	10c7883a 	add	r3,r2,r3
   23a9c:	1910f615 	stw	r4,17368(r3)
      if (i > alt_max_fd)
   23aa0:	d0e00617 	ldw	r3,-32744(gp)
   23aa4:	e0bfff17 	ldw	r2,-4(fp)
   23aa8:	1880020e 	bge	r3,r2,23ab4 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   23aac:	e0bfff17 	ldw	r2,-4(fp)
   23ab0:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
   23ab4:	e0bfff17 	ldw	r2,-4(fp)
   23ab8:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   23abc:	00000706 	br	23adc <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
   23ac0:	e0bfff17 	ldw	r2,-4(fp)
   23ac4:	10800044 	addi	r2,r2,1
   23ac8:	e0bfff15 	stw	r2,-4(fp)
   23acc:	e0bfff17 	ldw	r2,-4(fp)
   23ad0:	10800810 	cmplti	r2,r2,32
   23ad4:	103fe01e 	bne	r2,zero,23a58 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
   23ad8:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   23adc:	e0bffe17 	ldw	r2,-8(fp)
}
   23ae0:	e037883a 	mov	sp,fp
   23ae4:	df000017 	ldw	fp,0(sp)
   23ae8:	dec00104 	addi	sp,sp,4
   23aec:	f800283a 	ret

00023af0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   23af0:	defffe04 	addi	sp,sp,-8
   23af4:	df000115 	stw	fp,4(sp)
   23af8:	df000104 	addi	fp,sp,4
   23afc:	e13fff15 	stw	r4,-4(fp)
   23b00:	e0bfff17 	ldw	r2,-4(fp)
   23b04:	10bffe84 	addi	r2,r2,-6
   23b08:	10c00428 	cmpgeui	r3,r2,16
   23b0c:	1800191e 	bne	r3,zero,23b74 <alt_exception_cause_generated_bad_addr+0x84>
   23b10:	100690ba 	slli	r3,r2,2
   23b14:	008000b4 	movhi	r2,2
   23b18:	1885883a 	add	r2,r3,r2
   23b1c:	108ec917 	ldw	r2,15140(r2)
   23b20:	1000683a 	jmp	r2
   23b24:	00023b64 	muli	zero,zero,2285
   23b28:	00023b64 	muli	zero,zero,2285
   23b2c:	00023b74 	movhi	zero,2285
   23b30:	00023b74 	movhi	zero,2285
   23b34:	00023b74 	movhi	zero,2285
   23b38:	00023b64 	muli	zero,zero,2285
   23b3c:	00023b6c 	andhi	zero,zero,2285
   23b40:	00023b74 	movhi	zero,2285
   23b44:	00023b64 	muli	zero,zero,2285
   23b48:	00023b64 	muli	zero,zero,2285
   23b4c:	00023b74 	movhi	zero,2285
   23b50:	00023b64 	muli	zero,zero,2285
   23b54:	00023b6c 	andhi	zero,zero,2285
   23b58:	00023b74 	movhi	zero,2285
   23b5c:	00023b74 	movhi	zero,2285
   23b60:	00023b64 	muli	zero,zero,2285
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   23b64:	00800044 	movi	r2,1
   23b68:	00000306 	br	23b78 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   23b6c:	0005883a 	mov	r2,zero
   23b70:	00000106 	br	23b78 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
   23b74:	0005883a 	mov	r2,zero
  }
}
   23b78:	e037883a 	mov	sp,fp
   23b7c:	df000017 	ldw	fp,0(sp)
   23b80:	dec00104 	addi	sp,sp,4
   23b84:	f800283a 	ret

00023b88 <atexit>:
   23b88:	200b883a 	mov	r5,r4
   23b8c:	000f883a 	mov	r7,zero
   23b90:	000d883a 	mov	r6,zero
   23b94:	0009883a 	mov	r4,zero
   23b98:	0023bec1 	jmpi	23bec <__register_exitproc>

00023b9c <exit>:
   23b9c:	defffe04 	addi	sp,sp,-8
   23ba0:	000b883a 	mov	r5,zero
   23ba4:	dc000015 	stw	r16,0(sp)
   23ba8:	dfc00115 	stw	ra,4(sp)
   23bac:	2021883a 	mov	r16,r4
   23bb0:	0023d080 	call	23d08 <__call_exitprocs>
   23bb4:	8009883a 	mov	r4,r16
   23bb8:	0023e340 	call	23e34 <_exit>

00023bbc <memcmp>:
   23bbc:	0007883a 	mov	r3,zero
   23bc0:	30c0021e 	bne	r6,r3,23bcc <memcmp+0x10>
   23bc4:	0005883a 	mov	r2,zero
   23bc8:	f800283a 	ret
   23bcc:	20c5883a 	add	r2,r4,r3
   23bd0:	18c00044 	addi	r3,r3,1
   23bd4:	28cf883a 	add	r7,r5,r3
   23bd8:	10800003 	ldbu	r2,0(r2)
   23bdc:	39ffffc3 	ldbu	r7,-1(r7)
   23be0:	11fff726 	beq	r2,r7,23bc0 <memcmp+0x4>
   23be4:	11c5c83a 	sub	r2,r2,r7
   23be8:	f800283a 	ret

00023bec <__register_exitproc>:
   23bec:	008000b4 	movhi	r2,2
   23bf0:	10915617 	ldw	r2,17752(r2)
   23bf4:	defff904 	addi	sp,sp,-28
   23bf8:	dc000015 	stw	r16,0(sp)
   23bfc:	14000d17 	ldw	r16,52(r2)
   23c00:	dd400515 	stw	r21,20(sp)
   23c04:	dd000415 	stw	r20,16(sp)
   23c08:	dcc00315 	stw	r19,12(sp)
   23c0c:	dc800215 	stw	r18,8(sp)
   23c10:	dfc00615 	stw	ra,24(sp)
   23c14:	dc400115 	stw	r17,4(sp)
   23c18:	2025883a 	mov	r18,r4
   23c1c:	2827883a 	mov	r19,r5
   23c20:	302b883a 	mov	r21,r6
   23c24:	3829883a 	mov	r20,r7
   23c28:	8000081e 	bne	r16,zero,23c4c <__register_exitproc+0x60>
   23c2c:	14000e04 	addi	r16,r2,56
   23c30:	00c00034 	movhi	r3,0
   23c34:	14000d15 	stw	r16,52(r2)
   23c38:	18c00004 	addi	r3,r3,0
   23c3c:	18000326 	beq	r3,zero,23c4c <__register_exitproc+0x60>
   23c40:	00c00034 	movhi	r3,0
   23c44:	18c00017 	ldw	r3,0(r3)
   23c48:	10c03015 	stw	r3,192(r2)
   23c4c:	84400117 	ldw	r17,4(r16)
   23c50:	88800810 	cmplti	r2,r17,32
   23c54:	10000a1e 	bne	r2,zero,23c80 <__register_exitproc+0x94>
   23c58:	00bfffc4 	movi	r2,-1
   23c5c:	dfc00617 	ldw	ra,24(sp)
   23c60:	dd400517 	ldw	r21,20(sp)
   23c64:	dd000417 	ldw	r20,16(sp)
   23c68:	dcc00317 	ldw	r19,12(sp)
   23c6c:	dc800217 	ldw	r18,8(sp)
   23c70:	dc400117 	ldw	r17,4(sp)
   23c74:	dc000017 	ldw	r16,0(sp)
   23c78:	dec00704 	addi	sp,sp,28
   23c7c:	f800283a 	ret
   23c80:	90001926 	beq	r18,zero,23ce8 <__register_exitproc+0xfc>
   23c84:	80802217 	ldw	r2,136(r16)
   23c88:	1000091e 	bne	r2,zero,23cb0 <__register_exitproc+0xc4>
   23c8c:	00800034 	movhi	r2,0
   23c90:	10800004 	addi	r2,r2,0
   23c94:	103ff026 	beq	r2,zero,23c58 <__register_exitproc+0x6c>
   23c98:	01004204 	movi	r4,264
   23c9c:	00000000 	call	0 <__alt_mem_nios_system_shared_memory-0x2000>
   23ca0:	103fed26 	beq	r2,zero,23c58 <__register_exitproc+0x6c>
   23ca4:	10004015 	stw	zero,256(r2)
   23ca8:	10004115 	stw	zero,260(r2)
   23cac:	80802215 	stw	r2,136(r16)
   23cb0:	880890ba 	slli	r4,r17,2
   23cb4:	00c00044 	movi	r3,1
   23cb8:	1c46983a 	sll	r3,r3,r17
   23cbc:	1109883a 	add	r4,r2,r4
   23cc0:	25400015 	stw	r21,0(r4)
   23cc4:	11404017 	ldw	r5,256(r2)
   23cc8:	94800098 	cmpnei	r18,r18,2
   23ccc:	28cab03a 	or	r5,r5,r3
   23cd0:	11404015 	stw	r5,256(r2)
   23cd4:	25002015 	stw	r20,128(r4)
   23cd8:	9000031e 	bne	r18,zero,23ce8 <__register_exitproc+0xfc>
   23cdc:	11004117 	ldw	r4,260(r2)
   23ce0:	20c6b03a 	or	r3,r4,r3
   23ce4:	10c04115 	stw	r3,260(r2)
   23ce8:	88800044 	addi	r2,r17,1
   23cec:	8c400084 	addi	r17,r17,2
   23cf0:	882290ba 	slli	r17,r17,2
   23cf4:	80800115 	stw	r2,4(r16)
   23cf8:	0005883a 	mov	r2,zero
   23cfc:	8461883a 	add	r16,r16,r17
   23d00:	84c00015 	stw	r19,0(r16)
   23d04:	003fd506 	br	23c5c <__register_exitproc+0x70>

00023d08 <__call_exitprocs>:
   23d08:	defff604 	addi	sp,sp,-40
   23d0c:	008000b4 	movhi	r2,2
   23d10:	dd800615 	stw	r22,24(sp)
   23d14:	15915617 	ldw	r22,17752(r2)
   23d18:	dd400515 	stw	r21,20(sp)
   23d1c:	dd000415 	stw	r20,16(sp)
   23d20:	dfc00915 	stw	ra,36(sp)
   23d24:	df000815 	stw	fp,32(sp)
   23d28:	ddc00715 	stw	r23,28(sp)
   23d2c:	dcc00315 	stw	r19,12(sp)
   23d30:	dc800215 	stw	r18,8(sp)
   23d34:	dc400115 	stw	r17,4(sp)
   23d38:	dc000015 	stw	r16,0(sp)
   23d3c:	202b883a 	mov	r21,r4
   23d40:	2829883a 	mov	r20,r5
   23d44:	b4400d17 	ldw	r17,52(r22)
   23d48:	88000726 	beq	r17,zero,23d68 <__call_exitprocs+0x60>
   23d4c:	8c000117 	ldw	r16,4(r17)
   23d50:	8cc02217 	ldw	r19,136(r17)
   23d54:	84bfffc4 	addi	r18,r16,-1
   23d58:	802090ba 	slli	r16,r16,2
   23d5c:	9c2f883a 	add	r23,r19,r16
   23d60:	8c21883a 	add	r16,r17,r16
   23d64:	90000c0e 	bge	r18,zero,23d98 <__call_exitprocs+0x90>
   23d68:	dfc00917 	ldw	ra,36(sp)
   23d6c:	df000817 	ldw	fp,32(sp)
   23d70:	ddc00717 	ldw	r23,28(sp)
   23d74:	dd800617 	ldw	r22,24(sp)
   23d78:	dd400517 	ldw	r21,20(sp)
   23d7c:	dd000417 	ldw	r20,16(sp)
   23d80:	dcc00317 	ldw	r19,12(sp)
   23d84:	dc800217 	ldw	r18,8(sp)
   23d88:	dc400117 	ldw	r17,4(sp)
   23d8c:	dc000017 	ldw	r16,0(sp)
   23d90:	dec00a04 	addi	sp,sp,40
   23d94:	f800283a 	ret
   23d98:	a0000726 	beq	r20,zero,23db8 <__call_exitprocs+0xb0>
   23d9c:	9800041e 	bne	r19,zero,23db0 <__call_exitprocs+0xa8>
   23da0:	94bfffc4 	addi	r18,r18,-1
   23da4:	bdffff04 	addi	r23,r23,-4
   23da8:	843fff04 	addi	r16,r16,-4
   23dac:	003fed06 	br	23d64 <__call_exitprocs+0x5c>
   23db0:	b8c01f17 	ldw	r3,124(r23)
   23db4:	1d3ffa1e 	bne	r3,r20,23da0 <__call_exitprocs+0x98>
   23db8:	89000117 	ldw	r4,4(r17)
   23dbc:	80c00117 	ldw	r3,4(r16)
   23dc0:	213fffc4 	addi	r4,r4,-1
   23dc4:	24800f1e 	bne	r4,r18,23e04 <__call_exitprocs+0xfc>
   23dc8:	8c800115 	stw	r18,4(r17)
   23dcc:	183ff426 	beq	r3,zero,23da0 <__call_exitprocs+0x98>
   23dd0:	8f000117 	ldw	fp,4(r17)
   23dd4:	98000526 	beq	r19,zero,23dec <__call_exitprocs+0xe4>
   23dd8:	00800044 	movi	r2,1
   23ddc:	148c983a 	sll	r6,r2,r18
   23de0:	99004017 	ldw	r4,256(r19)
   23de4:	3108703a 	and	r4,r6,r4
   23de8:	2000081e 	bne	r4,zero,23e0c <__call_exitprocs+0x104>
   23dec:	183ee83a 	callr	r3
   23df0:	89000117 	ldw	r4,4(r17)
   23df4:	b0c00d17 	ldw	r3,52(r22)
   23df8:	273fd21e 	bne	r4,fp,23d44 <__call_exitprocs+0x3c>
   23dfc:	88ffe826 	beq	r17,r3,23da0 <__call_exitprocs+0x98>
   23e00:	003fd006 	br	23d44 <__call_exitprocs+0x3c>
   23e04:	80000115 	stw	zero,4(r16)
   23e08:	003ff006 	br	23dcc <__call_exitprocs+0xc4>
   23e0c:	99404117 	ldw	r5,260(r19)
   23e10:	b93fff17 	ldw	r4,-4(r23)
   23e14:	314c703a 	and	r6,r6,r5
   23e18:	3000041e 	bne	r6,zero,23e2c <__call_exitprocs+0x124>
   23e1c:	200b883a 	mov	r5,r4
   23e20:	a809883a 	mov	r4,r21
   23e24:	183ee83a 	callr	r3
   23e28:	003ff106 	br	23df0 <__call_exitprocs+0xe8>
   23e2c:	183ee83a 	callr	r3
   23e30:	003fef06 	br	23df0 <__call_exitprocs+0xe8>

00023e34 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   23e34:	defffd04 	addi	sp,sp,-12
   23e38:	df000215 	stw	fp,8(sp)
   23e3c:	df000204 	addi	fp,sp,8
   23e40:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   23e44:	0001883a 	nop
   23e48:	e0bffe17 	ldw	r2,-8(fp)
   23e4c:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   23e50:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   23e54:	10000226 	beq	r2,zero,23e60 <_exit+0x2c>
    ALT_SIM_FAIL();
   23e58:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
   23e5c:	00000106 	br	23e64 <_exit+0x30>
    ALT_SIM_PASS();
   23e60:	002af0b0 	cmpltui	zero,zero,43970
}
   23e64:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   23e68:	003fff06 	br	23e68 <_exit+0x34>
