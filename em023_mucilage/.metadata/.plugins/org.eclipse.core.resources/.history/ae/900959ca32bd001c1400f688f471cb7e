/* these test were created to show how to use the opencores I2C along with a driver found in
 * the I2C_opencores component to talk to various components. 
 * This test example uses a littel daughter board from microtronix
 * it has a I2c to parallel chip (PCA9554A) a EEPORM and real time clock. 
 * I chose not to impliment the real time clock. 
 * But you can see how the calls work
 * There are only 4 functions associalted with the I2C driver
 * I2C start  -  send start bit and address of the chip
 * I2C_read - read data
 * I2C_write. - write data
 * how and when each of these get used is based on the device you
 * are talking to. 
 * See the driver code for details of each function. 
 * */
#include <stdio.h>
#include "system.h"
#include "terasic_includes.h"
#include "water_sensor.h"

#define NUMBYTESSIZE 16
#define WRITE 0
#define READ 1
#define ADI_CFG_I2C_SENSOR1_ADDR (0x0Au)
#define eSensorResult 0
int main() {
	int data;
	int i;
	uint8_t m_i2c_address;

	/*alt_u32 timeout;
	uint8_t numbytes;
	unsigned int tempError;
	uint8_t Slave_Rx_Buffer[200] = {0};
	uint8_t Slave_Rx_Index = 0;
	char    tempChar = 0;
	bool exitloop = false;
	uint8_t initialcycle = 1;*/
	alt_u32 I2CA_BASE = WATER_I2C_OPENCORES_BASE;

	printf(" CODE IS STARTED IN I2C_TEST.C \n");

	////////////////////////////////////////////
	 uint8_t *pBuff;
	 typedef uint32_t SENSOR_RESULT;
	 uint16_t timeout = 20;
	 pBuff = &ADI_CFG_I2C_SENSOR1_ADDR;
	 I2CReadWrite(WRITE, SET_I2C_ADDRESS, pBuff, 1);
	 usleep(1000); //wait for slave to change its address
	 SENSOR_RESULT Result;
	 Result = SENSOR_ERROR_NONE;
	  *pBuff = 0; //set variable at pBuff to 0

	  do {
	    Result = I2CReadWrite(READ, GET_STATUS, pBuff, 1);
	   usleep(100);
	    timeout--;
	  } while ((*pBuff == 0) && (timeout > 0));

	  if (timeout == 0) {
		  eSensorResult =  SENSOR_ERROR_I2C;
	  }

	  if (*pBuff == 3){
		  eSensorResult = SENSOR_ERROR_PH;
	  }
	  eSensorResult = Result;











//////////////////////////////////////
/*	// most devices work at 100Khz  some faster
	Water_I2C_init(I2CA_BASE,ALT_CPU_FREQ,100000);
	Water_I2C_init(I2CA_BASE,ALT_CPU_FREQ,100000);
	// for the parallel io only the first 4 are output s

	// the PCA9554A   uses a command word right after the chip address word ( the start work)
	Water_I2C_start(I2CA_BASE,0x38,0);// chip address in write mode
	Water_I2C_write(I2CA_BASE,3,0);  // write to register 3 command
	Water_I2C_write(I2CA_BASE,0xf0,1);  // set the bottom 4 bits to outputs for the LEDs set the stop

	// now right to the leds
	Water_I2C_start(I2CA_BASE,0x38,0); // address the chip in write mode
	Water_I2C_write(I2CA_BASE,1,0);  // set command to the pca9554 to be output register
	Water_I2C_write(I2CA_BASE,5,1);  // write the data to the output register and set the stop

	//now read the dip switches
	// first set the command to 0
	Water_I2C_start(I2CA_BASE,0x38,0); //address the chip in write mode
	data =  Water_I2C_write(I2CA_BASE,0,0);  // set command to read input register.
	Water_I2C_start(I2CA_BASE,0x38,1); //send start again but this time in read mode
	data =  Water_I2C_read(I2CA_BASE,1);  // read the input register and send stop
	data = 0xff & (data >>4);
	printf("dip switch 0x%x\n",data);

	printf("\nNow writing and reading from the EEPROM\n");
	//address 0x50-57
	Water_I2C_start(I2CA_BASE,0x50,0); // chip address in write mode
	Water_I2C_write(I2CA_BASE,0,0);  // write to starting address of 0
	// now write the data
	for (i=0;i<7;i++)           // can only write 8 bites at a time
	{
		Water_I2C_write(I2CA_BASE,i,0);  // writ the data
	}
	Water_I2C_write(I2CA_BASE,i,1);  // write last one with last flag

	while ( Water_I2C_start(I2CA_BASE,0x50,0)); // make sure the write is done be fore continuing.
	// can ony burst 8 at a time.

	Water_I2C_write(I2CA_BASE,8,0);  // write to starting address of 8
	// now write the data
	for (i=0;i<7;i++)   // write the next 8 bytes
	{
		Water_I2C_write(I2CA_BASE,i+8,0);  //
	}
	Water_I2C_write(I2CA_BASE,i+8,1);  // write last one with last flag

	while ( Water_I2C_start(I2CA_BASE,0x50,0)); // make sure the write is done be fore continuing.

	//now read the values
	// first set the command to 0
	Water_I2C_start(I2CA_BASE,0x50,0); //set chip address and set to write/
	Water_I2C_write(I2CA_BASE,0,0);  // set address to 0.
	Water_I2C_start(I2CA_BASE,0x50,1); //set chip address in read mode
	for (i=0;i<15;i++)
	{
		data =  Water_I2C_read(I2CA_BASE,0);  // memory array
		//printf("\tdatttta = 0x%x\n",data);
//		printf("\tdatttta = 0x%d\n",data);
		printf("ASCII value of character %c = %d\n", data, data);
	}

	data =  Water_I2C_read(I2CA_BASE,1);  // last memory read
	//printf("\tdaaaata = 0x%x\n",data);
	printf("Value of character %c = %d\n", data, data);
	//printf("\tdaaaata = 0x%d\n",data);







	printf("Hello from Nios II!\n");

*/











///////////////////////////////////////////////////













	/*	Water_I2C_init(I2CA_BASE, ALT_CPU_FREQ, 100000);
	Water_I2C_start(I2CA_BASE, 0x4C, 1); //send start again but this time in read mode
	usleep(100);

	if (initialcycle) {
		numbytes = 0;
		myI2CReadWrite(READ, BYTES_TO_READ, (uint8_t *)&numbytes,1);
		usleep(100);

		while (numbytes > 0) {
			usleep(100);

			myI2CReadWrite(READ, BYTES_TO, &Slave_Rx_Buffer[0], numbytes);

			usleep(100);

			while (Slave_Rx_Index < numbytes) {

				tempChar = Slave_Rx_Buffer[Slave_Rx_Index];
				Slave_Rx_Buffer[Slave_Rx_Index] = '\0';
				if (tempChar != '~' && tempChar != '\0') {
					printf((const char *)&tempChar);
				}
				if(Slave_Rx_Index<numbytes){
					Slave_Rx_Index= Slave_Rx_Index+1;
				}

			}

			myI2CReadWrite(READ, BYTES_TO_READ, (uint8_t *)&numbytes, 1);
			usleep(100);
		}
		initialcycle =0;
	}*/
	/*timeout = 600;
	numbytes =0;
	myI2CReadWrite(READ, BYTES_TO_READ, (uint8_t *)&numbytes, 1); //numbytes can be 0 to 255, but there can be more than 255 bytes in slave buffer
	usleep(100);

	while (numbytes > 0) { //data available
		tempError = myI2CReadWrite(READ, BYTES_TO, &Slave_Rx_Buffer[0], numbytes);
		printf("temperror = %d" , tempError);
		if (tempError != SENSOR_ERROR_NONE) {
			printf("Error reading from sensor");
		}
		usleep(100);

		for (Slave_Rx_Index = 0; Slave_Rx_Index < numbytes; Slave_Rx_Index++) {
			tempChar = Slave_Rx_Buffer[Slave_Rx_Index];
			Slave_Rx_Buffer[Slave_Rx_Index] = '\0'; //clean buffer
			if (tempChar == '~') {
				exitloop = true;
			}
			else { //end message character received
				printf((const char *)&tempChar);
			}
		}
		myI2CReadWrite(READ, BYTES_TO_READ, (uint8_t *)&numbytes,1);

		usleep(100);
	}// end data available while loop

	usleep(100);
	timeout--;

	while (timeout > 0 && !exitloop);
	if (timeout == 0) {
		printf("Slave timeout.");
	}
	 usleep(100);*/
}

//end slave command loop
//end command received loop*/

