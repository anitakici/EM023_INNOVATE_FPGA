
em023_mucilage.elf:     file format elf32-littlenios2
em023_mucilage.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020224

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00004308 memsz 0x00004308 flags r-x
    LOAD off    0x00005328 vaddr 0x00024328 paddr 0x0002460c align 2**12
         filesz 0x000002e4 memsz 0x000002e4 flags rw-
    LOAD off    0x000058f0 vaddr 0x000248f0 paddr 0x000248f0 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003c80  00020224  00020224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000484  00023ea4  00023ea4  00004ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e4  00024328  0002460c  00005328  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  000248f0  000248f0  000058f0  2**2
                  ALLOC, SMALL_DATA
  6 .nios_system_shared_memory 00000000  00002000  00002000  0000560c  2**0
                  CONTENTS
  7 .nios_system_onchip_memory2 00000000  00024a10  00024a10  0000560c  2**0
                  CONTENTS
  8 .comment      0000002d  00000000  00000000  0000560c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000006f8  00000000  00000000  00005640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_info   0000966f  00000000  00000000  00005d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000349f  00000000  00000000  0000f3a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_line   00004c7d  00000000  00000000  00012846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_frame  00000f48  00000000  00000000  000174c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    000022bf  00000000  00000000  0001840c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00001a4b  00000000  00000000  0001a6cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_alt_sim_info 00000040  00000000  00000000  0001c118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000002f8  00000000  00000000  0001c158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .thread_model 00000003  00000000  00000000  0001e350  2**0
                  CONTENTS, READONLY
 19 .cpu          00000016  00000000  00000000  0001e353  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0001e369  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0001e36a  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0001e36b  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0001e36f  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0001e373  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000015  00000000  00000000  0001e377  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000015  00000000  00000000  0001e38c  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000015  00000000  00000000  0001e3a1  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  0001e3b6  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000025  00000000  00000000  0001e3be  2**0
                  CONTENTS, READONLY
 30 .jdi          0000fb5a  00000000  00000000  0001e3e3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020224 l    d  .text	00000000 .text
00023ea4 l    d  .rodata	00000000 .rodata
00024328 l    d  .rwdata	00000000 .rwdata
000248f0 l    d  .bss	00000000 .bss
00002000 l    d  .nios_system_shared_memory	00000000 .nios_system_shared_memory
00024a10 l    d  .nios_system_onchip_memory2	00000000 .nios_system_onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 c:/Users/kedic/Desktop/em023_mucilage/software/em023_mucilage_bsp//obj/HAL/src/crt0.o
0002025c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 I2C_core.c
00000000 l    df *ABS*	00000000 I2C_tests.c
00000000 l    df *ABS*	00000000 water_sensor.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00021e28 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00024328 l     O .rwdata	000000e4 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
000224d8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
00022670 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
000227b0 l     F .text	00000034 alt_dev_reg
0002440c l     O .rwdata	0000002c nios_system_jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00022ab0 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
00022d08 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00022e40 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00022e6c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000232d0 l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00023420 l     F .text	0000003c alt_get_errno
0002345c l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0002490c g     O .bss	00000004 alt_instruction_exception_handler
000225c4 g     F .text	0000007c alt_main
00021d7c g     F .text	00000080 _puts_r
00024910 g     O .bss	00000100 alt_irq
000205d4 g     F .text	00000068 ACK_check
0002460c g       *ABS*	00000000 __flash_rwdata_start
00020548 g     F .text	0000008c ACK_single_check
00002000 g       *ABS*	00000000 __alt_mem_nios_system_shared_memory
00021d34 g     F .text	00000048 printf
00021a24 g     F .text	00000100 Water_I2C_write
0002063c g     F .text	00000250 OC_I2C_Write
000238b4 g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000000c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
000248f0 g     O .bss	00000004 errno
00020000 g       *ABS*	00000000 __alt_mem_nios_system_onchip_memory2
000248f8 g     O .bss	00000004 alt_argv
0002c5e0 g       *ABS*	00000000 _gp
00022640 g     F .text	00000030 usleep
00024460 g     O .rwdata	00000180 alt_fd_list
000238d8 g     F .text	00000090 alt_find_dev
00020360 g     F .text	00000154 oc_i2c_init_ex
000233a4 g     F .text	0000007c alt_io_redirect
00023ea4 g       *ABS*	00000000 __DTOR_END__
00021dfc g     F .text	00000010 puts
00023b28 g     F .text	00000098 alt_exception_cause_generated_bad_addr
00022930 g     F .text	000000ec altera_avalon_jtag_uart_read
00021cf8 g     F .text	0000003c _printf_r
00021c18 g     F .text	00000064 .hidden __udivsi3
000245f8 g     O .rwdata	00000004 alt_max_fd
00021644 g     F .text	000000f8 Water_I2C_init
000245e0 g     O .rwdata	00000004 _global_impure_ptr
00024a10 g       *ABS*	00000000 __bss_end
000231e8 g     F .text	000000e8 alt_iic_isr_register
000237ac g     F .text	00000108 alt_tick
0002319c g     F .text	0000004c alt_ic_irq_enabled
00020d38 g     F .text	00000270 OC_I2CL_Write
00023708 g     F .text	000000a4 alt_alarm_stop
00024900 g     O .bss	00000004 alt_irq_active
0002088c g     F .text	00000064 ACK_judge_for_read
000200fc g     F .exceptions	000000c8 alt_irq_handler
00024438 g     O .rwdata	00000028 alt_dev_null
00020260 g     F .text	00000054 Write32_Data
00021978 g     F .text	000000ac Water_I2C_read
00022e20 g     F .text	00000020 alt_dcache_flush_all
0002460c g       *ABS*	00000000 __ram_rwdata_end
000245f0 g     O .rwdata	00000008 alt_dev_list
000226ac g     F .text	00000104 write
00024328 g       *ABS*	00000000 __ram_rodata_end
00021c7c g     F .text	0000005c .hidden __umodsi3
00024a10 g       *ABS*	00000000 end
0002173c g     F .text	00000160 myI2CReadWrite
000201c4 g     F .exceptions	00000060 alt_instruction_exception_entry
00023ea4 g       *ABS*	00000000 __CTOR_LIST__
00040000 g       *ABS*	00000000 __alt_stack_pointer
00022b2c g     F .text	00000084 alt_avalon_timer_sc_init
00022a1c g     F .text	00000094 altera_avalon_jtag_uart_write
00021e94 g     F .text	0000050c ___vfprintf_internal_r
00023d40 g     F .text	0000012c __call_exitprocs
00020224 g     F .text	0000003c _start
00024904 g     O .bss	00000004 _alt_tick_rate
00024908 g     O .bss	00000004 _alt_nticks
00022820 g     F .text	00000050 alt_sys_init
00023c24 g     F .text	0000011c __register_exitproc
000224b0 g     F .text	00000028 .hidden __mulsi3
00024328 g       *ABS*	00000000 __ram_rwdata_start
00023ea4 g       *ABS*	00000000 __ram_rodata_start
00022870 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00023a70 g     F .text	000000b8 alt_get_fd
00022bb0 g     F .text	00000158 alt_busy_sleep
00023bf4 g     F .text	00000030 memcmp
00024a10 g       *ABS*	00000000 __alt_stack_base
00020308 g     F .text	00000058 oc_i2c_init
00023968 g     F .text	00000108 alt_find_file
00022ea8 g     F .text	000000a8 alt_dev_llist_insert
000223b8 g     F .text	000000a8 __sfvwrite_small_dev
000248f0 g       *ABS*	00000000 __bss_start
00021cd8 g     F .text	00000020 memset
0002129c g     F .text	000003a8 main
000248fc g     O .bss	00000004 alt_envp
000228d0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000245fc g     O .rwdata	00000004 alt_errno
00021b24 g     F .text	00000080 .hidden __divsi3
000204b4 g     F .text	00000094 oc_i2c_uninit
00023ea4 g       *ABS*	00000000 __CTOR_END__
00023ea4 g       *ABS*	00000000 __flash_rodata_start
00023ea4 g       *ABS*	00000000 __DTOR_LIST__
000227e4 g     F .text	0000003c alt_irq_init
00023698 g     F .text	00000070 alt_release_fd
0002189c g     F .text	000000dc Water_I2C_start
00023bc0 g     F .text	00000014 atexit
00022460 g     F .text	00000050 _write_r
000245e4 g     O .rwdata	00000004 _impure_ptr
000248f4 g     O .bss	00000004 alt_argc
00022fb4 g     F .text	00000064 _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
000245e8 g     O .rwdata	00000008 alt_fs_list
000202b4 g     F .text	00000054 Read32_Data
000208f0 g     F .text	000001f0 OC_I2C_Read
00020020 g       *ABS*	00000000 __ram_exceptions_start
00023038 g     F .text	00000050 alt_ic_isr_register
0002460c g       *ABS*	00000000 _edata
00024a10 g       *ABS*	00000000 _end
00020224 g       *ABS*	00000000 __ram_exceptions_end
00023110 g     F .text	0000008c alt_ic_irq_disable
00020bf0 g     F .text	00000148 OC_I2C_Read_Continue
00023bd4 g     F .text	00000020 exit
00021ba4 g     F .text	00000074 .hidden __modsi3
00040000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00020fa8 g     F .text	000002f4 OC_I2CL_Read
00023e6c g     F .text	00000038 _exit
00021e0c g     F .text	0000001c strlen
00023538 g     F .text	00000160 open
00023018 g     F .text	00000020 alt_icache_flush_all
00024600 g     O .rwdata	00000004 alt_priority_mask
00023088 g     F .text	00000088 alt_ic_irq_enable
00020ae0 g     F .text	00000110 OC_I2C_Write_Addr
000223a0 g     F .text	00000018 __vfprintf_internal
00024604 g     O .rwdata	00000008 alt_alarm_list
00022f50 g     F .text	00000064 _do_ctors
00022d44 g     F .text	000000dc close
00022540 g     F .text	00000084 alt_load



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08408914 	ori	at,at,548
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201c40 	call	201c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffc15 	stw	r2,-16(fp)

  return active;
   20118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0ffff17 	ldw	r3,-4(fp)
   20130:	e0bffe17 	ldw	r2,-8(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001126 	beq	r2,zero,20180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	e0bffd17 	ldw	r2,-12(fp)
   20140:	100690fa 	slli	r3,r2,3
   20144:	008000b4 	movhi	r2,2
   20148:	1885883a 	add	r2,r3,r2
   2014c:	10d24417 	ldw	r3,18704(r2)
   20150:	e0bffd17 	ldw	r2,-12(fp)
   20154:	100890fa 	slli	r4,r2,3
   20158:	008000b4 	movhi	r2,2
   2015c:	2085883a 	add	r2,r4,r2
   20160:	10924517 	ldw	r2,18708(r2)
   20164:	1009883a 	mov	r4,r2
   20168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   2016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
   20170:	0005313a 	rdctl	r2,ipending
   20174:	e0bffb15 	stw	r2,-20(fp)
  return active;
   20178:	e0bffb17 	ldw	r2,-20(fp)
   2017c:	00000706 	br	2019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
   20180:	e0bffe17 	ldw	r2,-8(fp)
   20184:	1085883a 	add	r2,r2,r2
   20188:	e0bffe15 	stw	r2,-8(fp)
      i++;
   2018c:	e0bffd17 	ldw	r2,-12(fp)
   20190:	10800044 	addi	r2,r2,1
   20194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
   20198:	003fe406 	br	2012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
   2019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
   201a0:	e0bfff17 	ldw	r2,-4(fp)
   201a4:	103fde1e 	bne	r2,zero,20120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201a8:	0001883a 	nop
}
   201ac:	0001883a 	nop
   201b0:	e037883a 	mov	sp,fp
   201b4:	dfc00117 	ldw	ra,4(sp)
   201b8:	df000017 	ldw	fp,0(sp)
   201bc:	dec00204 	addi	sp,sp,8
   201c0:	f800283a 	ret

000201c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201c4:	defffb04 	addi	sp,sp,-20
   201c8:	dfc00415 	stw	ra,16(sp)
   201cc:	df000315 	stw	fp,12(sp)
   201d0:	df000304 	addi	fp,sp,12
   201d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
   201d8:	00bfffc4 	movi	r2,-1
   201dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
   201e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   201e4:	d0a0cb17 	ldw	r2,-31956(gp)
   201e8:	10000726 	beq	r2,zero,20208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   201ec:	d0a0cb17 	ldw	r2,-31956(gp)
   201f0:	e0ffff17 	ldw	r3,-4(fp)
   201f4:	e1bffe17 	ldw	r6,-8(fp)
   201f8:	e17ffd17 	ldw	r5,-12(fp)
   201fc:	1809883a 	mov	r4,r3
   20200:	103ee83a 	callr	r2
   20204:	00000206 	br	20210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   2020c:	0005883a 	mov	r2,zero
}
   20210:	e037883a 	mov	sp,fp
   20214:	dfc00117 	ldw	ra,4(sp)
   20218:	df000017 	ldw	fp,0(sp)
   2021c:	dec00204 	addi	sp,sp,8
   20220:	f800283a 	ret

Disassembly of section .text:

00020224 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20224:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
   20228:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   2022c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   20230:	d6b17814 	ori	gp,gp,50656
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20234:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20238:	10923c14 	ori	r2,r2,18672

    movhi r3, %hi(__bss_end)
   2023c:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   20240:	18d28414 	ori	r3,r3,18960

    beq r2, r3, 1f
   20244:	10c00326 	beq	r2,r3,20254 <_start+0x30>

0:
    stw zero, (r2)
   20248:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   2024c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   20250:	10fffd36 	bltu	r2,r3,20248 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20254:	00225400 	call	22540 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20258:	00225c40 	call	225c4 <alt_main>

0002025c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   2025c:	003fff06 	br	2025c <alt_after_alt_main>

00020260 <Write32_Data>:
#define SLEEP_TIME 250  //us
#define ACK_SLEEP_TIME 250 //us
#define TRUE 1
#define FALSE 0

bool Write32_Data(alt_32 base_address, alt_32 offset_address, alt_32 Data) {
   20260:	defffb04 	addi	sp,sp,-20
   20264:	df000415 	stw	fp,16(sp)
   20268:	df000404 	addi	fp,sp,16
   2026c:	e13ffe15 	stw	r4,-8(fp)
   20270:	e17ffd15 	stw	r5,-12(fp)
   20274:	e1bffc15 	stw	r6,-16(fp)
	bool bPass;
	IOWR(base_address, offset_address, Data);
   20278:	e0bffd17 	ldw	r2,-12(fp)
   2027c:	100490ba 	slli	r2,r2,2
   20280:	1007883a 	mov	r3,r2
   20284:	e0bffe17 	ldw	r2,-8(fp)
   20288:	1885883a 	add	r2,r3,r2
   2028c:	1007883a 	mov	r3,r2
   20290:	e0bffc17 	ldw	r2,-16(fp)
   20294:	18800035 	stwio	r2,0(r3)
	bPass = TRUE;
   20298:	00800044 	movi	r2,1
   2029c:	e0bfffc5 	stb	r2,-1(fp)
	return bPass;
   202a0:	e0bfffc3 	ldbu	r2,-1(fp)
}
   202a4:	e037883a 	mov	sp,fp
   202a8:	df000017 	ldw	fp,0(sp)
   202ac:	dec00104 	addi	sp,sp,4
   202b0:	f800283a 	ret

000202b4 <Read32_Data>:

bool Read32_Data(alt_32 base_address, alt_32 offset_address, alt_32 *pData32) {
   202b4:	defffb04 	addi	sp,sp,-20
   202b8:	df000415 	stw	fp,16(sp)
   202bc:	df000404 	addi	fp,sp,16
   202c0:	e13ffe15 	stw	r4,-8(fp)
   202c4:	e17ffd15 	stw	r5,-12(fp)
   202c8:	e1bffc15 	stw	r6,-16(fp)
	bool bPass;
	*pData32 = IORD(base_address, offset_address);
   202cc:	e0bffd17 	ldw	r2,-12(fp)
   202d0:	100490ba 	slli	r2,r2,2
   202d4:	1007883a 	mov	r3,r2
   202d8:	e0bffe17 	ldw	r2,-8(fp)
   202dc:	1885883a 	add	r2,r3,r2
   202e0:	10c00037 	ldwio	r3,0(r2)
   202e4:	e0bffc17 	ldw	r2,-16(fp)
   202e8:	10c00015 	stw	r3,0(r2)
	bPass = TRUE;
   202ec:	00800044 	movi	r2,1
   202f0:	e0bfffc5 	stb	r2,-1(fp)
	return bPass;
   202f4:	e0bfffc3 	ldbu	r2,-1(fp)
}
   202f8:	e037883a 	mov	sp,fp
   202fc:	df000017 	ldw	fp,0(sp)
   20300:	dec00104 	addi	sp,sp,4
   20304:	f800283a 	ret

00020308 <oc_i2c_init>:

bool oc_i2c_init(alt_32 i2c_base) {
   20308:	defffa04 	addi	sp,sp,-24
   2030c:	dfc00515 	stw	ra,20(sp)
   20310:	df000415 	stw	fp,16(sp)
   20314:	df000404 	addi	fp,sp,16
   20318:	e13ffc15 	stw	r4,-16(fp)
	bool bSuccess;
	const alt_32 ref_clk = 50 * 1000 * 1000; // 50MHz
   2031c:	0080bef4 	movhi	r2,763
   20320:	10bc2004 	addi	r2,r2,-3968
   20324:	e0bfff15 	stw	r2,-4(fp)
	const alt_32 i2c_clk = 400 * 1000; // 400KHz
   20328:	008001b4 	movhi	r2,6
   2032c:	1086a004 	addi	r2,r2,6784
   20330:	e0bffe15 	stw	r2,-8(fp)

	bSuccess = oc_i2c_init_ex(i2c_base, ref_clk, i2c_clk);
   20334:	e1bffe17 	ldw	r6,-8(fp)
   20338:	e17fff17 	ldw	r5,-4(fp)
   2033c:	e13ffc17 	ldw	r4,-16(fp)
   20340:	00203600 	call	20360 <oc_i2c_init_ex>
   20344:	e0bffdc5 	stb	r2,-9(fp)

	return bSuccess;
   20348:	e0bffdc3 	ldbu	r2,-9(fp)
}
   2034c:	e037883a 	mov	sp,fp
   20350:	dfc00117 	ldw	ra,4(sp)
   20354:	df000017 	ldw	fp,0(sp)
   20358:	dec00204 	addi	sp,sp,8
   2035c:	f800283a 	ret

00020360 <oc_i2c_init_ex>:

bool oc_i2c_init_ex(alt_32 i2c_base, alt_32 ref_clk, alt_32 i2c_clk) {
   20360:	defff704 	addi	sp,sp,-36
   20364:	dfc00815 	stw	ra,32(sp)
   20368:	df000715 	stw	fp,28(sp)
   2036c:	df000704 	addi	fp,sp,28
   20370:	e13ffb15 	stw	r4,-20(fp)
   20374:	e17ffa15 	stw	r5,-24(fp)
   20378:	e1bff915 	stw	r6,-28(fp)
	bool bSuccess = TRUE;
   2037c:	00800044 	movi	r2,1
   20380:	e0bfffc5 	stb	r2,-1(fp)
	alt_32 read_data;
	alt_32 prescale;
	alt_u8 prescale_high;
	alt_u8 prescale_low;
	const alt_u8 ControlValue = 0x80;
   20384:	00bfe004 	movi	r2,-128
   20388:	e0bfff85 	stb	r2,-2(fp)

	// I2c sysclock =50M hz
	// i2c scl max 400k
	//scl =sysclock/(prescale*5)
	prescale = (ref_clk / (5 * i2c_clk)) - 1;
   2038c:	e0fff917 	ldw	r3,-28(fp)
   20390:	1805883a 	mov	r2,r3
   20394:	100490ba 	slli	r2,r2,2
   20398:	10c5883a 	add	r2,r2,r3
   2039c:	100b883a 	mov	r5,r2
   203a0:	e13ffa17 	ldw	r4,-24(fp)
   203a4:	0021b240 	call	21b24 <__divsi3>
   203a8:	10bfffc4 	addi	r2,r2,-1
   203ac:	e0bffe15 	stw	r2,-8(fp)
	prescale_low = prescale & 0xFF;
   203b0:	e0bffe17 	ldw	r2,-8(fp)
   203b4:	e0bffdc5 	stb	r2,-9(fp)
	prescale_high = (prescale >> 8) & 0xFF;
   203b8:	e0bffe17 	ldw	r2,-8(fp)
   203bc:	1005d23a 	srai	r2,r2,8
   203c0:	e0bffd85 	stb	r2,-10(fp)

	IOWR(i2c_base, 0, prescale_low);	//write low byte of  prescale (reg 0)
   203c4:	e0bffb17 	ldw	r2,-20(fp)
   203c8:	e0fffdc3 	ldbu	r3,-9(fp)
   203cc:	10c00035 	stwio	r3,0(r2)
	IOWR(i2c_base, 1, prescale_high);	//write high byte of prescale (reg 1)
   203d0:	e0bffb17 	ldw	r2,-20(fp)
   203d4:	10800104 	addi	r2,r2,4
   203d8:	1007883a 	mov	r3,r2
   203dc:	e0bffd83 	ldbu	r2,-10(fp)
   203e0:	18800035 	stwio	r2,0(r3)

	//enable the I2C core, but disable the IRQ
	IOWR(i2c_base, 2, ControlValue);
   203e4:	e0bffb17 	ldw	r2,-20(fp)
   203e8:	10800204 	addi	r2,r2,8
   203ec:	1007883a 	mov	r3,r2
   203f0:	e0bfff83 	ldbu	r2,-2(fp)
   203f4:	18800035 	stwio	r2,0(r3)

	// check prescale low byte
	if (bSuccess) {
   203f8:	e0bfffc3 	ldbu	r2,-1(fp)
   203fc:	10000826 	beq	r2,zero,20420 <oc_i2c_init_ex+0xc0>
		read_data = IORD(i2c_base, 0);
   20400:	e0bffb17 	ldw	r2,-20(fp)
   20404:	10800037 	ldwio	r2,0(r2)
   20408:	e0bffc15 	stw	r2,-16(fp)
		if ((read_data & 0x00ff) != prescale_low) {
   2040c:	e0bffc17 	ldw	r2,-16(fp)
   20410:	10c03fcc 	andi	r3,r2,255
   20414:	e0bffdc3 	ldbu	r2,-9(fp)
   20418:	18800126 	beq	r3,r2,20420 <oc_i2c_init_ex+0xc0>
			bSuccess = FALSE;
   2041c:	e03fffc5 	stb	zero,-1(fp)
		}
	}

	// check prescale high byte
	if (bSuccess) {
   20420:	e0bfffc3 	ldbu	r2,-1(fp)
   20424:	10000926 	beq	r2,zero,2044c <oc_i2c_init_ex+0xec>
		read_data = IORD(i2c_base, 1);
   20428:	e0bffb17 	ldw	r2,-20(fp)
   2042c:	10800104 	addi	r2,r2,4
   20430:	10800037 	ldwio	r2,0(r2)
   20434:	e0bffc15 	stw	r2,-16(fp)
		if ((read_data & 0x00ff) != prescale_high) {
   20438:	e0bffc17 	ldw	r2,-16(fp)
   2043c:	10c03fcc 	andi	r3,r2,255
   20440:	e0bffd83 	ldbu	r2,-10(fp)
   20444:	18800126 	beq	r3,r2,2044c <oc_i2c_init_ex+0xec>
			bSuccess = FALSE;
   20448:	e03fffc5 	stb	zero,-1(fp)
		}
	}

	// check control
	if (bSuccess) {
   2044c:	e0bfffc3 	ldbu	r2,-1(fp)
   20450:	10000926 	beq	r2,zero,20478 <oc_i2c_init_ex+0x118>
		read_data = IORD(i2c_base, 2);
   20454:	e0bffb17 	ldw	r2,-20(fp)
   20458:	10800204 	addi	r2,r2,8
   2045c:	10800037 	ldwio	r2,0(r2)
   20460:	e0bffc15 	stw	r2,-16(fp)
		if ((read_data & 0x00ff) != ControlValue) {
   20464:	e0bffc17 	ldw	r2,-16(fp)
   20468:	10c03fcc 	andi	r3,r2,255
   2046c:	e0bfff83 	ldbu	r2,-2(fp)
   20470:	18800126 	beq	r3,r2,20478 <oc_i2c_init_ex+0x118>
			bSuccess = FALSE;
   20474:	e03fffc5 	stb	zero,-1(fp)
		}
	}

	if (bSuccess)
   20478:	e0bfffc3 	ldbu	r2,-1(fp)
   2047c:	10000426 	beq	r2,zero,20490 <oc_i2c_init_ex+0x130>
		printf("\nI2C core is enabled! \r\n");
   20480:	010000b4 	movhi	r4,2
   20484:	210fa904 	addi	r4,r4,16036
   20488:	0021dfc0 	call	21dfc <puts>
   2048c:	00000306 	br	2049c <oc_i2c_init_ex+0x13c>
	else
		printf("\nI2C core is not enabled successfully! \r\n");
   20490:	010000b4 	movhi	r4,2
   20494:	210faf04 	addi	r4,r4,16060
   20498:	0021dfc0 	call	21dfc <puts>

	return bSuccess;
   2049c:	e0bfffc3 	ldbu	r2,-1(fp)

}
   204a0:	e037883a 	mov	sp,fp
   204a4:	dfc00117 	ldw	ra,4(sp)
   204a8:	df000017 	ldw	fp,0(sp)
   204ac:	dec00204 	addi	sp,sp,8
   204b0:	f800283a 	ret

000204b4 <oc_i2c_uninit>:

bool oc_i2c_uninit(alt_32 i2c_base) {
   204b4:	defffb04 	addi	sp,sp,-20
   204b8:	dfc00415 	stw	ra,16(sp)
   204bc:	df000315 	stw	fp,12(sp)
   204c0:	df000304 	addi	fp,sp,12
   204c4:	e13ffd15 	stw	r4,-12(fp)
	bool bSuccess = TRUE;
   204c8:	00800044 	movi	r2,1
   204cc:	e0bfffc5 	stb	r2,-1(fp)
	alt_32 read_data;
	const alt_u8 ControlValue = 0x00;
   204d0:	e03fff85 	stb	zero,-2(fp)

	IOWR(i2c_base, 2, ControlValue);
   204d4:	e0bffd17 	ldw	r2,-12(fp)
   204d8:	10800204 	addi	r2,r2,8
   204dc:	1007883a 	mov	r3,r2
   204e0:	e0bfff83 	ldbu	r2,-2(fp)
   204e4:	18800035 	stwio	r2,0(r3)
	read_data = IORD(i2c_base, 2);
   204e8:	e0bffd17 	ldw	r2,-12(fp)
   204ec:	10800204 	addi	r2,r2,8
   204f0:	10800037 	ldwio	r2,0(r2)
   204f4:	e0bffe15 	stw	r2,-8(fp)
	if ((read_data & 0x00ff) != ControlValue) {
   204f8:	e0bffe17 	ldw	r2,-8(fp)
   204fc:	10c03fcc 	andi	r3,r2,255
   20500:	e0bfff83 	ldbu	r2,-2(fp)
   20504:	18800126 	beq	r3,r2,2050c <oc_i2c_uninit+0x58>
		bSuccess = FALSE;
   20508:	e03fffc5 	stb	zero,-1(fp)
	}

	if (bSuccess)
   2050c:	e0bfffc3 	ldbu	r2,-1(fp)
   20510:	10000426 	beq	r2,zero,20524 <oc_i2c_uninit+0x70>
		printf("\nI2C core  is disabled! \r\n");
   20514:	010000b4 	movhi	r4,2
   20518:	210fba04 	addi	r4,r4,16104
   2051c:	0021dfc0 	call	21dfc <puts>
   20520:	00000306 	br	20530 <oc_i2c_uninit+0x7c>
	else
		printf("\nI2C core is failed to disable! \r\n");
   20524:	010000b4 	movhi	r4,2
   20528:	210fc104 	addi	r4,r4,16132
   2052c:	0021dfc0 	call	21dfc <puts>

	return bSuccess;
   20530:	e0bfffc3 	ldbu	r2,-1(fp)

}
   20534:	e037883a 	mov	sp,fp
   20538:	dfc00117 	ldw	ra,4(sp)
   2053c:	df000017 	ldw	fp,0(sp)
   20540:	dec00204 	addi	sp,sp,8
   20544:	f800283a 	ret

00020548 <ACK_single_check>:

bool ACK_single_check(alt_32 i2c_base) {
   20548:	defffb04 	addi	sp,sp,-20
   2054c:	dfc00415 	stw	ra,16(sp)
   20550:	df000315 	stw	fp,12(sp)
   20554:	df000304 	addi	fp,sp,12
   20558:	e13ffd15 	stw	r4,-12(fp)
	bool bSuccess = TRUE;
   2055c:	00800044 	movi	r2,1
   20560:	e0bfffc5 	stb	r2,-1(fp)
	alt_32 read_data;

	usleep(ACK_SLEEP_TIME);
   20564:	01003e84 	movi	r4,250
   20568:	00226400 	call	22640 <usleep>
	read_data = IORD(i2c_base, 4);
   2056c:	e0bffd17 	ldw	r2,-12(fp)
   20570:	10800404 	addi	r2,r2,16
   20574:	10800037 	ldwio	r2,0(r2)
   20578:	e0bffe15 	stw	r2,-8(fp)
	if (read_data & 0x02)
   2057c:	e0bffe17 	ldw	r2,-8(fp)
   20580:	1080008c 	andi	r2,r2,2
   20584:	10000126 	beq	r2,zero,2058c <ACK_single_check+0x44>
		bSuccess = FALSE;
   20588:	e03fffc5 	stb	zero,-1(fp)
	if (bSuccess) {
   2058c:	e0bfffc3 	ldbu	r2,-1(fp)
   20590:	10000a26 	beq	r2,zero,205bc <ACK_single_check+0x74>
		usleep(ACK_SLEEP_TIME);
   20594:	01003e84 	movi	r4,250
   20598:	00226400 	call	22640 <usleep>
		read_data = IORD(i2c_base, 4);
   2059c:	e0bffd17 	ldw	r2,-12(fp)
   205a0:	10800404 	addi	r2,r2,16
   205a4:	10800037 	ldwio	r2,0(r2)
   205a8:	e0bffe15 	stw	r2,-8(fp)
		if (read_data & 0x80)
   205ac:	e0bffe17 	ldw	r2,-8(fp)
   205b0:	1080200c 	andi	r2,r2,128
   205b4:	10000126 	beq	r2,zero,205bc <ACK_single_check+0x74>
			bSuccess = FALSE;
   205b8:	e03fffc5 	stb	zero,-1(fp)
	}
	return bSuccess;
   205bc:	e0bfffc3 	ldbu	r2,-1(fp)
}
   205c0:	e037883a 	mov	sp,fp
   205c4:	dfc00117 	ldw	ra,4(sp)
   205c8:	df000017 	ldw	fp,0(sp)
   205cc:	dec00204 	addi	sp,sp,8
   205d0:	f800283a 	ret

000205d4 <ACK_check>:

bool ACK_check(alt_32 i2c_base) {
   205d4:	defffb04 	addi	sp,sp,-20
   205d8:	dfc00415 	stw	ra,16(sp)
   205dc:	df000315 	stw	fp,12(sp)
   205e0:	df000304 	addi	fp,sp,12
   205e4:	e13ffd15 	stw	r4,-12(fp)
	bool bSuccess = FALSE;
   205e8:	e03fffc5 	stb	zero,-1(fp)
	int i = 0;
   205ec:	e03ffe15 	stw	zero,-8(fp)

	while (!bSuccess && i++ < 10) {
   205f0:	00000306 	br	20600 <ACK_check+0x2c>
		bSuccess = ACK_single_check(i2c_base);
   205f4:	e13ffd17 	ldw	r4,-12(fp)
   205f8:	00205480 	call	20548 <ACK_single_check>
   205fc:	e0bfffc5 	stb	r2,-1(fp)
	while (!bSuccess && i++ < 10) {
   20600:	e0bfffc3 	ldbu	r2,-1(fp)
   20604:	1080005c 	xori	r2,r2,1
   20608:	10803fcc 	andi	r2,r2,255
   2060c:	10000526 	beq	r2,zero,20624 <ACK_check+0x50>
   20610:	e0bffe17 	ldw	r2,-8(fp)
   20614:	10c00044 	addi	r3,r2,1
   20618:	e0fffe15 	stw	r3,-8(fp)
   2061c:	10800290 	cmplti	r2,r2,10
   20620:	103ff41e 	bne	r2,zero,205f4 <ACK_check+0x20>
		//  if (!bSuccess)
		//	printf("no ack2 !!!!!!!!!!!!!!!!!!!!, i=%d\r\n", i);

	}

	return bSuccess;
   20624:	e0bfffc3 	ldbu	r2,-1(fp)
}
   20628:	e037883a 	mov	sp,fp
   2062c:	dfc00117 	ldw	ra,4(sp)
   20630:	df000017 	ldw	fp,0(sp)
   20634:	dec00204 	addi	sp,sp,8
   20638:	f800283a 	ret

0002063c <OC_I2C_Write>:

bool OC_I2C_Write(alt_32 i2c_base, alt_u8 device_address, alt_u8 sub_address,
		alt_u8 *pData, int nWriteLength) {
   2063c:	defff904 	addi	sp,sp,-28
   20640:	dfc00615 	stw	ra,24(sp)
   20644:	df000515 	stw	fp,20(sp)
   20648:	df000504 	addi	fp,sp,20
   2064c:	e13ffe15 	stw	r4,-8(fp)
   20650:	2805883a 	mov	r2,r5
   20654:	3007883a 	mov	r3,r6
   20658:	e1fffb15 	stw	r7,-20(fp)
   2065c:	e0bffd05 	stb	r2,-12(fp)
   20660:	1805883a 	mov	r2,r3
   20664:	e0bffc05 	stb	r2,-16(fp)
	//DWORD reg_data = 0x0;
	int i;

	//set the tx reg audio chip dev address with write bit
	if (!Write32_Data(i2c_base, 3, device_address)) {
   20668:	e0bffd03 	ldbu	r2,-12(fp)
   2066c:	100d883a 	mov	r6,r2
   20670:	014000c4 	movi	r5,3
   20674:	e13ffe17 	ldw	r4,-8(fp)
   20678:	00202600 	call	20260 <Write32_Data>
   2067c:	1080005c 	xori	r2,r2,1
   20680:	10803fcc 	andi	r2,r2,255
   20684:	10000526 	beq	r2,zero,2069c <OC_I2C_Write+0x60>
		printf("OC_I2C_Write error[0]\r\n");
   20688:	010000b4 	movhi	r4,2
   2068c:	210fca04 	addi	r4,r4,16168
   20690:	0021dfc0 	call	21dfc <puts>
		return FALSE;
   20694:	0005883a 	mov	r2,zero
   20698:	00007706 	br	20878 <OC_I2C_Write+0x23c>
	}
	//set STA and WR bits(bit7 and bit4)
	if (!Write32_Data(i2c_base, 4, 0x90)) {
   2069c:	01802404 	movi	r6,144
   206a0:	01400104 	movi	r5,4
   206a4:	e13ffe17 	ldw	r4,-8(fp)
   206a8:	00202600 	call	20260 <Write32_Data>
   206ac:	1080005c 	xori	r2,r2,1
   206b0:	10803fcc 	andi	r2,r2,255
   206b4:	10000526 	beq	r2,zero,206cc <OC_I2C_Write+0x90>
		printf("OC_I2C_Write error[1]\r\n");
   206b8:	010000b4 	movhi	r4,2
   206bc:	210fd004 	addi	r4,r4,16192
   206c0:	0021dfc0 	call	21dfc <puts>
		return FALSE;
   206c4:	0005883a 	mov	r2,zero
   206c8:	00006b06 	br	20878 <OC_I2C_Write+0x23c>
	}

	//wait TIP bit go to 0 to end Tx
	if (!ACK_check(i2c_base)) {
   206cc:	e13ffe17 	ldw	r4,-8(fp)
   206d0:	00205d40 	call	205d4 <ACK_check>
   206d4:	1080005c 	xori	r2,r2,1
   206d8:	10803fcc 	andi	r2,r2,255
   206dc:	10000526 	beq	r2,zero,206f4 <OC_I2C_Write+0xb8>
		printf("OC_I2C_Write error[2]\r\n");
   206e0:	010000b4 	movhi	r4,2
   206e4:	210fd604 	addi	r4,r4,16216
   206e8:	0021dfc0 	call	21dfc <puts>
		return FALSE;
   206ec:	0005883a 	mov	r2,zero
   206f0:	00006106 	br	20878 <OC_I2C_Write+0x23c>
	}
	// printf("\n receive ACK-device address! \n");

	//set the txr reg data with reg address + 1 data MSB
	if (!Write32_Data(i2c_base, 3, sub_address)) {
   206f4:	e0bffc03 	ldbu	r2,-16(fp)
   206f8:	100d883a 	mov	r6,r2
   206fc:	014000c4 	movi	r5,3
   20700:	e13ffe17 	ldw	r4,-8(fp)
   20704:	00202600 	call	20260 <Write32_Data>
   20708:	1080005c 	xori	r2,r2,1
   2070c:	10803fcc 	andi	r2,r2,255
   20710:	10000526 	beq	r2,zero,20728 <OC_I2C_Write+0xec>
		printf("OC_I2C_Write error[3]\r\n");
   20714:	010000b4 	movhi	r4,2
   20718:	210fdc04 	addi	r4,r4,16240
   2071c:	0021dfc0 	call	21dfc <puts>
		return FALSE;
   20720:	0005883a 	mov	r2,zero
   20724:	00005406 	br	20878 <OC_I2C_Write+0x23c>
	}

	//set WR bits(bit4)
	if (!Write32_Data(i2c_base, 4, 0x10)) {
   20728:	01800404 	movi	r6,16
   2072c:	01400104 	movi	r5,4
   20730:	e13ffe17 	ldw	r4,-8(fp)
   20734:	00202600 	call	20260 <Write32_Data>
   20738:	1080005c 	xori	r2,r2,1
   2073c:	10803fcc 	andi	r2,r2,255
   20740:	10000526 	beq	r2,zero,20758 <OC_I2C_Write+0x11c>
		printf("OC_I2C_Write error[4]\r\n");
   20744:	010000b4 	movhi	r4,2
   20748:	210fe204 	addi	r4,r4,16264
   2074c:	0021dfc0 	call	21dfc <puts>
		return FALSE;
   20750:	0005883a 	mov	r2,zero
   20754:	00004806 	br	20878 <OC_I2C_Write+0x23c>
	}

	//wait TIP bit go to 0 to end Tx
	if (!ACK_check(i2c_base)) {
   20758:	e13ffe17 	ldw	r4,-8(fp)
   2075c:	00205d40 	call	205d4 <ACK_check>
   20760:	1080005c 	xori	r2,r2,1
   20764:	10803fcc 	andi	r2,r2,255
   20768:	10000526 	beq	r2,zero,20780 <OC_I2C_Write+0x144>
		printf("OC_I2C_Write error[5]\r\n");
   2076c:	010000b4 	movhi	r4,2
   20770:	210fe804 	addi	r4,r4,16288
   20774:	0021dfc0 	call	21dfc <puts>
		return FALSE;
   20778:	0005883a 	mov	r2,zero
   2077c:	00003e06 	br	20878 <OC_I2C_Write+0x23c>
	}
	//  printf("\n receive ACK-reg address! \n");

#if 1
//        for( i=nWriteLength-1;i>=0;i--){
	for (i = 0; i < nWriteLength; i++) {
   20780:	e03fff15 	stw	zero,-4(fp)
   20784:	00002a06 	br	20830 <OC_I2C_Write+0x1f4>
		//set the txr reg data with the data
		if (!Write32_Data(i2c_base, 3, *(pData + i))) {
   20788:	e0bfff17 	ldw	r2,-4(fp)
   2078c:	e0fffb17 	ldw	r3,-20(fp)
   20790:	1885883a 	add	r2,r3,r2
   20794:	10800003 	ldbu	r2,0(r2)
   20798:	10803fcc 	andi	r2,r2,255
   2079c:	100d883a 	mov	r6,r2
   207a0:	014000c4 	movi	r5,3
   207a4:	e13ffe17 	ldw	r4,-8(fp)
   207a8:	00202600 	call	20260 <Write32_Data>
   207ac:	1080005c 	xori	r2,r2,1
   207b0:	10803fcc 	andi	r2,r2,255
   207b4:	10000526 	beq	r2,zero,207cc <OC_I2C_Write+0x190>
			printf("OC_I2C_Write error[6]\r\n");
   207b8:	010000b4 	movhi	r4,2
   207bc:	210fee04 	addi	r4,r4,16312
   207c0:	0021dfc0 	call	21dfc <puts>
			return FALSE;
   207c4:	0005883a 	mov	r2,zero
   207c8:	00002b06 	br	20878 <OC_I2C_Write+0x23c>
		}

		//set STO and WR bits(bit7 and bit4)
		if (!Write32_Data(i2c_base, 4, 0x10)) {
   207cc:	01800404 	movi	r6,16
   207d0:	01400104 	movi	r5,4
   207d4:	e13ffe17 	ldw	r4,-8(fp)
   207d8:	00202600 	call	20260 <Write32_Data>
   207dc:	1080005c 	xori	r2,r2,1
   207e0:	10803fcc 	andi	r2,r2,255
   207e4:	10000526 	beq	r2,zero,207fc <OC_I2C_Write+0x1c0>
			printf("OC_I2C_Write error[7]\r\n");
   207e8:	010000b4 	movhi	r4,2
   207ec:	210ff404 	addi	r4,r4,16336
   207f0:	0021dfc0 	call	21dfc <puts>
			return FALSE;
   207f4:	0005883a 	mov	r2,zero
   207f8:	00001f06 	br	20878 <OC_I2C_Write+0x23c>
		}

		//wait TIP bit go to 0 to end Tx
		if (!ACK_check(i2c_base)) {
   207fc:	e13ffe17 	ldw	r4,-8(fp)
   20800:	00205d40 	call	205d4 <ACK_check>
   20804:	1080005c 	xori	r2,r2,1
   20808:	10803fcc 	andi	r2,r2,255
   2080c:	10000526 	beq	r2,zero,20824 <OC_I2C_Write+0x1e8>
			printf("OC_I2C_Write error[8]\r\n");
   20810:	010000b4 	movhi	r4,2
   20814:	210ffa04 	addi	r4,r4,16360
   20818:	0021dfc0 	call	21dfc <puts>
			return FALSE;
   2081c:	0005883a 	mov	r2,zero
   20820:	00001506 	br	20878 <OC_I2C_Write+0x23c>
	for (i = 0; i < nWriteLength; i++) {
   20824:	e0bfff17 	ldw	r2,-4(fp)
   20828:	10800044 	addi	r2,r2,1
   2082c:	e0bfff15 	stw	r2,-4(fp)
   20830:	e0ffff17 	ldw	r3,-4(fp)
   20834:	e0800217 	ldw	r2,8(fp)
   20838:	18bfd316 	blt	r3,r2,20788 <OC_I2C_Write+0x14c>
	//wait TIP bit go to 0 to end Tx
	if(!ACK_check( i2c_base))
	return false;
#endif

	if (!Write32_Data(i2c_base, 4, 0x40)) {
   2083c:	01801004 	movi	r6,64
   20840:	01400104 	movi	r5,4
   20844:	e13ffe17 	ldw	r4,-8(fp)
   20848:	00202600 	call	20260 <Write32_Data>
   2084c:	1080005c 	xori	r2,r2,1
   20850:	10803fcc 	andi	r2,r2,255
   20854:	10000526 	beq	r2,zero,2086c <OC_I2C_Write+0x230>
		printf("OC_I2C_Write error[9]\r\n");
   20858:	010000b4 	movhi	r4,2
   2085c:	21100004 	addi	r4,r4,16384
   20860:	0021dfc0 	call	21dfc <puts>
		return FALSE;
   20864:	0005883a 	mov	r2,zero
   20868:	00000306 	br	20878 <OC_I2C_Write+0x23c>
	}
	//Sleep(10);
	//OS_msleep(1);
	usleep(SLEEP_TIME);
   2086c:	01003e84 	movi	r4,250
   20870:	00226400 	call	22640 <usleep>

	// printf("\n receive ACK-data! \n");

	return TRUE;
   20874:	00800044 	movi	r2,1

}
   20878:	e037883a 	mov	sp,fp
   2087c:	dfc00117 	ldw	ra,4(sp)
   20880:	df000017 	ldw	fp,0(sp)
   20884:	dec00204 	addi	sp,sp,8
   20888:	f800283a 	ret

0002088c <ACK_judge_for_read>:

bool ACK_judge_for_read(alt_32 i2c_base) {
   2088c:	defffb04 	addi	sp,sp,-20
   20890:	dfc00415 	stw	ra,16(sp)
   20894:	df000315 	stw	fp,12(sp)
   20898:	df000304 	addi	fp,sp,12
   2089c:	e13ffd15 	stw	r4,-12(fp)
	bool bSuccess;
	alt_32 this_data;

	// OS_msleep( SLEEP_TIME );
	usleep(ACK_SLEEP_TIME);
   208a0:	01003e84 	movi	r4,250
   208a4:	00226400 	call	22640 <usleep>
	//   while(this_data & 0x02)
//   {
//      this_data =  Read32_Data ( hPCIe, i2c_base, 4);
//   }
	bSuccess = Read32_Data(i2c_base, 4, &this_data);
   208a8:	e0bffe04 	addi	r2,fp,-8
   208ac:	100d883a 	mov	r6,r2
   208b0:	01400104 	movi	r5,4
   208b4:	e13ffd17 	ldw	r4,-12(fp)
   208b8:	00202b40 	call	202b4 <Read32_Data>
   208bc:	e0bfffc5 	stb	r2,-1(fp)
	if (bSuccess) {
   208c0:	e0bfffc3 	ldbu	r2,-1(fp)
   208c4:	10000426 	beq	r2,zero,208d8 <ACK_judge_for_read+0x4c>
		if (this_data & 0x02)
   208c8:	e0bffe17 	ldw	r2,-8(fp)
   208cc:	1080008c 	andi	r2,r2,2
   208d0:	10000126 	beq	r2,zero,208d8 <ACK_judge_for_read+0x4c>
			bSuccess = FALSE;
   208d4:	e03fffc5 	stb	zero,-1(fp)
	}
	//wait the rx ACK signal 0-valid

	return bSuccess;
   208d8:	e0bfffc3 	ldbu	r2,-1(fp)

}
   208dc:	e037883a 	mov	sp,fp
   208e0:	dfc00117 	ldw	ra,4(sp)
   208e4:	df000017 	ldw	fp,0(sp)
   208e8:	dec00204 	addi	sp,sp,8
   208ec:	f800283a 	ret

000208f0 <OC_I2C_Read>:

bool OC_I2C_Read(alt_32 i2c_base, alt_u8 device_address, alt_u8 sub_address,
		alt_u8 *pData8, int nReadLength) {
   208f0:	defff804 	addi	sp,sp,-32
   208f4:	dfc00715 	stw	ra,28(sp)
   208f8:	df000615 	stw	fp,24(sp)
   208fc:	df000604 	addi	fp,sp,24
   20900:	e13ffd15 	stw	r4,-12(fp)
   20904:	2805883a 	mov	r2,r5
   20908:	3007883a 	mov	r3,r6
   2090c:	e1fffa15 	stw	r7,-24(fp)
   20910:	e0bffc05 	stb	r2,-16(fp)
   20914:	1805883a 	mov	r2,r3
   20918:	e0bffb05 	stb	r2,-20(fp)
	//BYTE data = 0x0;
	alt_32 Data32;
	int i;

	//set the tx reg audio chip dev address with write bit
	IOWR(i2c_base, 3, device_address);
   2091c:	e0bffd17 	ldw	r2,-12(fp)
   20920:	10800304 	addi	r2,r2,12
   20924:	1007883a 	mov	r3,r2
   20928:	e0bffc03 	ldbu	r2,-16(fp)
   2092c:	18800035 	stwio	r2,0(r3)
	//set STA and WR bits(bit7 and bit4)
	IOWR(i2c_base, 4, 0x90);
   20930:	e0bffd17 	ldw	r2,-12(fp)
   20934:	10800404 	addi	r2,r2,16
   20938:	1007883a 	mov	r3,r2
   2093c:	00802404 	movi	r2,144
   20940:	18800035 	stwio	r2,0(r3)
	//wait TIP bit go to 0 to end Tx
	if (!ACK_check(i2c_base)) {
   20944:	e13ffd17 	ldw	r4,-12(fp)
   20948:	00205d40 	call	205d4 <ACK_check>
   2094c:	1080005c 	xori	r2,r2,1
   20950:	10803fcc 	andi	r2,r2,255
   20954:	10000526 	beq	r2,zero,2096c <OC_I2C_Read+0x7c>
		printf("OC_I2C_Read error[2]\r\n");
   20958:	010000b4 	movhi	r4,2
   2095c:	21100604 	addi	r4,r4,16408
   20960:	0021dfc0 	call	21dfc <puts>
		return FALSE;
   20964:	0005883a 	mov	r2,zero
   20968:	00005806 	br	20acc <OC_I2C_Read+0x1dc>
	}
	IOWR(i2c_base, 3, sub_address);
   2096c:	e0bffd17 	ldw	r2,-12(fp)
   20970:	10800304 	addi	r2,r2,12
   20974:	1007883a 	mov	r3,r2
   20978:	e0bffb03 	ldbu	r2,-20(fp)
   2097c:	18800035 	stwio	r2,0(r3)

	//set WR bits(bit4)
	IOWR(i2c_base, 4, 0x10);
   20980:	e0bffd17 	ldw	r2,-12(fp)
   20984:	10800404 	addi	r2,r2,16
   20988:	1007883a 	mov	r3,r2
   2098c:	00800404 	movi	r2,16
   20990:	18800035 	stwio	r2,0(r3)
	//wait TIP bit go to 0 to end Tx
	if (!ACK_check(i2c_base)) {
   20994:	e13ffd17 	ldw	r4,-12(fp)
   20998:	00205d40 	call	205d4 <ACK_check>
   2099c:	1080005c 	xori	r2,r2,1
   209a0:	10803fcc 	andi	r2,r2,255
   209a4:	10000526 	beq	r2,zero,209bc <OC_I2C_Read+0xcc>
		printf("OC_I2C_Read error[5]\r\n");
   209a8:	010000b4 	movhi	r4,2
   209ac:	21100c04 	addi	r4,r4,16432
   209b0:	0021dfc0 	call	21dfc <puts>
		return FALSE;
   209b4:	0005883a 	mov	r2,zero
   209b8:	00004406 	br	20acc <OC_I2C_Read+0x1dc>
	 */

	// printf("\n read receive ACK-reg address! \n");
	//read
	//set the tx reg audio chip dev address with read bit 1
	IOWR(i2c_base, 3, device_address | 0x01);
   209bc:	e0bffd17 	ldw	r2,-12(fp)
   209c0:	10800304 	addi	r2,r2,12
   209c4:	1007883a 	mov	r3,r2
   209c8:	e0bffc03 	ldbu	r2,-16(fp)
   209cc:	10800054 	ori	r2,r2,1
   209d0:	10803fcc 	andi	r2,r2,255
   209d4:	18800035 	stwio	r2,0(r3)

	//set STA and WR bits(bit7 and bit4)
	IOWR(i2c_base, 4, 0x90);
   209d8:	e0bffd17 	ldw	r2,-12(fp)
   209dc:	10800404 	addi	r2,r2,16
   209e0:	1007883a 	mov	r3,r2
   209e4:	00802404 	movi	r2,144
   209e8:	18800035 	stwio	r2,0(r3)

	//wait TIP bit go to 0 to end Tx
	if (!ACK_check(i2c_base)) {
   209ec:	e13ffd17 	ldw	r4,-12(fp)
   209f0:	00205d40 	call	205d4 <ACK_check>
   209f4:	1080005c 	xori	r2,r2,1
   209f8:	10803fcc 	andi	r2,r2,255
   209fc:	10000526 	beq	r2,zero,20a14 <OC_I2C_Read+0x124>
		printf("OC_I2C_Read error[8]\r\n");
   20a00:	010000b4 	movhi	r4,2
   20a04:	21101204 	addi	r4,r4,16456
   20a08:	0021dfc0 	call	21dfc <puts>
		return FALSE;
   20a0c:	0005883a 	mov	r2,zero
   20a10:	00002e06 	br	20acc <OC_I2C_Read+0x1dc>
	}

	for (i = 0; i < nReadLength; i++) {
   20a14:	e03fff15 	stw	zero,-4(fp)
   20a18:	00002106 	br	20aa0 <OC_I2C_Read+0x1b0>
		// printf("\n read receive ACK-device address(read)! \n");
		//set the RD and ACK bit(bit5 and bit3)
		IOWR(i2c_base, 4, ((i + 1) == nReadLength) ? 0x28 : 0x20);
   20a1c:	e0bffd17 	ldw	r2,-12(fp)
   20a20:	10800404 	addi	r2,r2,16
   20a24:	1009883a 	mov	r4,r2
   20a28:	e0bfff17 	ldw	r2,-4(fp)
   20a2c:	10800044 	addi	r2,r2,1
   20a30:	e0c00217 	ldw	r3,8(fp)
   20a34:	1880021e 	bne	r3,r2,20a40 <OC_I2C_Read+0x150>
   20a38:	00800a04 	movi	r2,40
   20a3c:	00000106 	br	20a44 <OC_I2C_Read+0x154>
   20a40:	00800804 	movi	r2,32
   20a44:	20800035 	stwio	r2,0(r4)

		if (!ACK_judge_for_read(i2c_base)) {
   20a48:	e13ffd17 	ldw	r4,-12(fp)
   20a4c:	002088c0 	call	2088c <ACK_judge_for_read>
   20a50:	1080005c 	xori	r2,r2,1
   20a54:	10803fcc 	andi	r2,r2,255
   20a58:	10000526 	beq	r2,zero,20a70 <OC_I2C_Read+0x180>
			printf("OC_I2C_Read error[10]\r\n");
   20a5c:	010000b4 	movhi	r4,2
   20a60:	21101804 	addi	r4,r4,16480
   20a64:	0021dfc0 	call	21dfc <puts>
			return FALSE;
   20a68:	0005883a 	mov	r2,zero
   20a6c:	00001706 	br	20acc <OC_I2C_Read+0x1dc>
		}
		// printf("\n read receive ACK-device address(read)! \n");

		Data32 = IORD(i2c_base, 3);
   20a70:	e0bffd17 	ldw	r2,-12(fp)
   20a74:	10800304 	addi	r2,r2,12
   20a78:	10800037 	ldwio	r2,0(r2)
   20a7c:	e0bffe15 	stw	r2,-8(fp)
//        printf("Data32_%d: %d\n", i, Data32);
		*(pData8 + i) = Data32 & 0xff;
   20a80:	e0bfff17 	ldw	r2,-4(fp)
   20a84:	e0fffa17 	ldw	r3,-24(fp)
   20a88:	1885883a 	add	r2,r3,r2
   20a8c:	e0fffe17 	ldw	r3,-8(fp)
   20a90:	10c00005 	stb	r3,0(r2)
	for (i = 0; i < nReadLength; i++) {
   20a94:	e0bfff17 	ldw	r2,-4(fp)
   20a98:	10800044 	addi	r2,r2,1
   20a9c:	e0bfff15 	stw	r2,-4(fp)
   20aa0:	e0ffff17 	ldw	r3,-4(fp)
   20aa4:	e0800217 	ldw	r2,8(fp)
   20aa8:	18bfdc16 	blt	r3,r2,20a1c <OC_I2C_Read+0x12c>
	}

	IOWR(i2c_base, 4, 0x40);
   20aac:	e0bffd17 	ldw	r2,-12(fp)
   20ab0:	10800404 	addi	r2,r2,16
   20ab4:	1007883a 	mov	r3,r2
   20ab8:	00801004 	movi	r2,64
   20abc:	18800035 	stwio	r2,0(r3)

	// Sleep(10);
	//OS_msleep(1);
	usleep(SLEEP_TIME);
   20ac0:	01003e84 	movi	r4,250
   20ac4:	00226400 	call	22640 <usleep>
	//  printf(" Read  [%02X] = %02Xh\r\n", sub_address, data);

	return TRUE;
   20ac8:	00800044 	movi	r2,1

}
   20acc:	e037883a 	mov	sp,fp
   20ad0:	dfc00117 	ldw	ra,4(sp)
   20ad4:	df000017 	ldw	fp,0(sp)
   20ad8:	dec00204 	addi	sp,sp,8
   20adc:	f800283a 	ret

00020ae0 <OC_I2C_Write_Addr>:

bool OC_I2C_Write_Addr(alt_32 i2c_base, alt_u8 device_address,
		alt_u8 sub_address, bool bStop) {
   20ae0:	defffa04 	addi	sp,sp,-24
   20ae4:	dfc00515 	stw	ra,20(sp)
   20ae8:	df000415 	stw	fp,16(sp)
   20aec:	df000404 	addi	fp,sp,16
   20af0:	e13fff15 	stw	r4,-4(fp)
   20af4:	2805883a 	mov	r2,r5
   20af8:	3009883a 	mov	r4,r6
   20afc:	3807883a 	mov	r3,r7
   20b00:	e0bffe05 	stb	r2,-8(fp)
   20b04:	2005883a 	mov	r2,r4
   20b08:	e0bffd05 	stb	r2,-12(fp)
   20b0c:	1805883a 	mov	r2,r3
   20b10:	e0bffc05 	stb	r2,-16(fp)
	//BYTE data = 0x0;
	alt_32 Data32;
	int i;

	//set the tx reg audio chip dev address with write bit
	IOWR(i2c_base, 3, device_address);
   20b14:	e0bfff17 	ldw	r2,-4(fp)
   20b18:	10800304 	addi	r2,r2,12
   20b1c:	1007883a 	mov	r3,r2
   20b20:	e0bffe03 	ldbu	r2,-8(fp)
   20b24:	18800035 	stwio	r2,0(r3)
	//set STA and WR bits(bit7 and bit4)
	IOWR(i2c_base, 4, 0x90);
   20b28:	e0bfff17 	ldw	r2,-4(fp)
   20b2c:	10800404 	addi	r2,r2,16
   20b30:	1007883a 	mov	r3,r2
   20b34:	00802404 	movi	r2,144
   20b38:	18800035 	stwio	r2,0(r3)
	//wait TIP bit go to 0 to end Tx
	if (!ACK_check(i2c_base)) {
   20b3c:	e13fff17 	ldw	r4,-4(fp)
   20b40:	00205d40 	call	205d4 <ACK_check>
   20b44:	1080005c 	xori	r2,r2,1
   20b48:	10803fcc 	andi	r2,r2,255
   20b4c:	10000526 	beq	r2,zero,20b64 <OC_I2C_Write_Addr+0x84>
		printf("OC_I2C_Read error[2]\r\n");
   20b50:	010000b4 	movhi	r4,2
   20b54:	21100604 	addi	r4,r4,16408
   20b58:	0021dfc0 	call	21dfc <puts>
		return FALSE;
   20b5c:	0005883a 	mov	r2,zero
   20b60:	00001e06 	br	20bdc <OC_I2C_Write_Addr+0xfc>
	}
	IOWR(i2c_base, 3, sub_address);
   20b64:	e0bfff17 	ldw	r2,-4(fp)
   20b68:	10800304 	addi	r2,r2,12
   20b6c:	1007883a 	mov	r3,r2
   20b70:	e0bffd03 	ldbu	r2,-12(fp)
   20b74:	18800035 	stwio	r2,0(r3)

	//set WR bits(bit4)
	IOWR(i2c_base, 4, 0x10);
   20b78:	e0bfff17 	ldw	r2,-4(fp)
   20b7c:	10800404 	addi	r2,r2,16
   20b80:	1007883a 	mov	r3,r2
   20b84:	00800404 	movi	r2,16
   20b88:	18800035 	stwio	r2,0(r3)
	//wait TIP bit go to 0 to end Tx
	if (!ACK_check(i2c_base)) {
   20b8c:	e13fff17 	ldw	r4,-4(fp)
   20b90:	00205d40 	call	205d4 <ACK_check>
   20b94:	1080005c 	xori	r2,r2,1
   20b98:	10803fcc 	andi	r2,r2,255
   20b9c:	10000526 	beq	r2,zero,20bb4 <OC_I2C_Write_Addr+0xd4>
		printf("OC_I2C_Read error[5]\r\n");
   20ba0:	010000b4 	movhi	r4,2
   20ba4:	21100c04 	addi	r4,r4,16432
   20ba8:	0021dfc0 	call	21dfc <puts>
		return FALSE;
   20bac:	0005883a 	mov	r2,zero
   20bb0:	00000a06 	br	20bdc <OC_I2C_Write_Addr+0xfc>
	}

	if (bStop) {
   20bb4:	e0bffc03 	ldbu	r2,-16(fp)
   20bb8:	10000726 	beq	r2,zero,20bd8 <OC_I2C_Write_Addr+0xf8>
		IOWR(i2c_base, 4, 0x40);
   20bbc:	e0bfff17 	ldw	r2,-4(fp)
   20bc0:	10800404 	addi	r2,r2,16
   20bc4:	1007883a 	mov	r3,r2
   20bc8:	00801004 	movi	r2,64
   20bcc:	18800035 	stwio	r2,0(r3)
		usleep(SLEEP_TIME);
   20bd0:	01003e84 	movi	r4,250
   20bd4:	00226400 	call	22640 <usleep>
	}

	return TRUE;
   20bd8:	00800044 	movi	r2,1

}
   20bdc:	e037883a 	mov	sp,fp
   20be0:	dfc00117 	ldw	ra,4(sp)
   20be4:	df000017 	ldw	fp,0(sp)
   20be8:	dec00204 	addi	sp,sp,8
   20bec:	f800283a 	ret

00020bf0 <OC_I2C_Read_Continue>:

bool OC_I2C_Read_Continue(alt_32 i2c_base, alt_u8 device_address,
		alt_u8 *pData8, int nReadLength) {
   20bf0:	defff804 	addi	sp,sp,-32
   20bf4:	dfc00715 	stw	ra,28(sp)
   20bf8:	df000615 	stw	fp,24(sp)
   20bfc:	df000604 	addi	fp,sp,24
   20c00:	e13ffd15 	stw	r4,-12(fp)
   20c04:	2805883a 	mov	r2,r5
   20c08:	e1bffb15 	stw	r6,-20(fp)
   20c0c:	e1fffa15 	stw	r7,-24(fp)
   20c10:	e0bffc05 	stb	r2,-16(fp)
	int i;
	alt_u32 Data32;

	IOWR(i2c_base, 3, device_address | 0x01);
   20c14:	e0bffd17 	ldw	r2,-12(fp)
   20c18:	10800304 	addi	r2,r2,12
   20c1c:	1007883a 	mov	r3,r2
   20c20:	e0bffc03 	ldbu	r2,-16(fp)
   20c24:	10800054 	ori	r2,r2,1
   20c28:	10803fcc 	andi	r2,r2,255
   20c2c:	18800035 	stwio	r2,0(r3)

	//set STA and WR bits(bit7 and bit4)
	IOWR(i2c_base, 4, 0x90);
   20c30:	e0bffd17 	ldw	r2,-12(fp)
   20c34:	10800404 	addi	r2,r2,16
   20c38:	1007883a 	mov	r3,r2
   20c3c:	00802404 	movi	r2,144
   20c40:	18800035 	stwio	r2,0(r3)
//usleep(5*1000);
	//wait TIP bit go to 0 to end Tx
	if (!ACK_check(i2c_base)) {
   20c44:	e13ffd17 	ldw	r4,-12(fp)
   20c48:	00205d40 	call	205d4 <ACK_check>
   20c4c:	1080005c 	xori	r2,r2,1
   20c50:	10803fcc 	andi	r2,r2,255
   20c54:	10000526 	beq	r2,zero,20c6c <OC_I2C_Read_Continue+0x7c>
		printf("OC_I2C_Read error[8]\r\n");
   20c58:	010000b4 	movhi	r4,2
   20c5c:	21101204 	addi	r4,r4,16456
   20c60:	0021dfc0 	call	21dfc <puts>
		return FALSE;
   20c64:	0005883a 	mov	r2,zero
   20c68:	00002e06 	br	20d24 <OC_I2C_Read_Continue+0x134>
	}

	for (i = 0; i < nReadLength; i++) {
   20c6c:	e03fff15 	stw	zero,-4(fp)
   20c70:	00002106 	br	20cf8 <OC_I2C_Read_Continue+0x108>
		// printf("\n read receive ACK-device address(read)! \n");
		//set the RD and ACK bit(bit5 and bit3)
		IOWR(i2c_base, 4, ((i + 1) == nReadLength) ? 0x28 : 0x20);
   20c74:	e0bffd17 	ldw	r2,-12(fp)
   20c78:	10800404 	addi	r2,r2,16
   20c7c:	1009883a 	mov	r4,r2
   20c80:	e0bfff17 	ldw	r2,-4(fp)
   20c84:	10800044 	addi	r2,r2,1
   20c88:	e0fffa17 	ldw	r3,-24(fp)
   20c8c:	1880021e 	bne	r3,r2,20c98 <OC_I2C_Read_Continue+0xa8>
   20c90:	00800a04 	movi	r2,40
   20c94:	00000106 	br	20c9c <OC_I2C_Read_Continue+0xac>
   20c98:	00800804 	movi	r2,32
   20c9c:	20800035 	stwio	r2,0(r4)

		if (!ACK_judge_for_read(i2c_base)) {
   20ca0:	e13ffd17 	ldw	r4,-12(fp)
   20ca4:	002088c0 	call	2088c <ACK_judge_for_read>
   20ca8:	1080005c 	xori	r2,r2,1
   20cac:	10803fcc 	andi	r2,r2,255
   20cb0:	10000526 	beq	r2,zero,20cc8 <OC_I2C_Read_Continue+0xd8>
			printf("OC_I2C_Read error[10]\r\n");
   20cb4:	010000b4 	movhi	r4,2
   20cb8:	21101804 	addi	r4,r4,16480
   20cbc:	0021dfc0 	call	21dfc <puts>
			return FALSE;
   20cc0:	0005883a 	mov	r2,zero
   20cc4:	00001706 	br	20d24 <OC_I2C_Read_Continue+0x134>
		}
		// printf("\n read receive ACK-device address(read)! \n");

		Data32 = IORD(i2c_base, 3);
   20cc8:	e0bffd17 	ldw	r2,-12(fp)
   20ccc:	10800304 	addi	r2,r2,12
   20cd0:	10800037 	ldwio	r2,0(r2)
   20cd4:	e0bffe15 	stw	r2,-8(fp)
		*(pData8 + i) = Data32 & 0xff;
   20cd8:	e0bfff17 	ldw	r2,-4(fp)
   20cdc:	e0fffb17 	ldw	r3,-20(fp)
   20ce0:	1885883a 	add	r2,r3,r2
   20ce4:	e0fffe17 	ldw	r3,-8(fp)
   20ce8:	10c00005 	stb	r3,0(r2)
	for (i = 0; i < nReadLength; i++) {
   20cec:	e0bfff17 	ldw	r2,-4(fp)
   20cf0:	10800044 	addi	r2,r2,1
   20cf4:	e0bfff15 	stw	r2,-4(fp)
   20cf8:	e0ffff17 	ldw	r3,-4(fp)
   20cfc:	e0bffa17 	ldw	r2,-24(fp)
   20d00:	18bfdc16 	blt	r3,r2,20c74 <OC_I2C_Read_Continue+0x84>
	}

	IOWR(i2c_base, 4, 0x40);
   20d04:	e0bffd17 	ldw	r2,-12(fp)
   20d08:	10800404 	addi	r2,r2,16
   20d0c:	1007883a 	mov	r3,r2
   20d10:	00801004 	movi	r2,64
   20d14:	18800035 	stwio	r2,0(r3)

	// Sleep(10);
	//OS_msleep(1);
	usleep(SLEEP_TIME);
   20d18:	01003e84 	movi	r4,250
   20d1c:	00226400 	call	22640 <usleep>
	//  printf(" Read  [%02X] = %02Xh\r\n", sub_address, data);

	return TRUE;
   20d20:	00800044 	movi	r2,1

}
   20d24:	e037883a 	mov	sp,fp
   20d28:	dfc00117 	ldw	ra,4(sp)
   20d2c:	df000017 	ldw	fp,0(sp)
   20d30:	dec00204 	addi	sp,sp,8
   20d34:	f800283a 	ret

00020d38 <OC_I2CL_Write>:

//  size > 2Kb
bool OC_I2CL_Write(alt_32 i2c_base, alt_u8 device_address, alt_u16 sub_address,
		alt_u8 *pData, int nWriteLength) {
   20d38:	defff804 	addi	sp,sp,-32
   20d3c:	dfc00715 	stw	ra,28(sp)
   20d40:	df000615 	stw	fp,24(sp)
   20d44:	df000604 	addi	fp,sp,24
   20d48:	e13ffd15 	stw	r4,-12(fp)
   20d4c:	2805883a 	mov	r2,r5
   20d50:	3007883a 	mov	r3,r6
   20d54:	e1fffa15 	stw	r7,-24(fp)
   20d58:	e0bffc05 	stb	r2,-16(fp)
   20d5c:	1805883a 	mov	r2,r3
   20d60:	e0bffb0d 	sth	r2,-20(fp)
	//DWORD reg_data = 0x0;
	alt_u8 AddrHigh, AddrLow;
	//int count= 0;

	AddrHigh = (sub_address >> 8) & 0xFF;
   20d64:	e0bffb0b 	ldhu	r2,-20(fp)
   20d68:	1004d23a 	srli	r2,r2,8
   20d6c:	e0bffec5 	stb	r2,-5(fp)
	AddrLow = sub_address & 0xFF;
   20d70:	e0bffb0b 	ldhu	r2,-20(fp)
   20d74:	e0bffe85 	stb	r2,-6(fp)

	int i;

	//set the tx reg audio chip dev address with write bit
	if (!Write32_Data(i2c_base, 3, device_address))
   20d78:	e0bffc03 	ldbu	r2,-16(fp)
   20d7c:	100d883a 	mov	r6,r2
   20d80:	014000c4 	movi	r5,3
   20d84:	e13ffd17 	ldw	r4,-12(fp)
   20d88:	00202600 	call	20260 <Write32_Data>
   20d8c:	1080005c 	xori	r2,r2,1
   20d90:	10803fcc 	andi	r2,r2,255
   20d94:	10000226 	beq	r2,zero,20da0 <OC_I2CL_Write+0x68>
		return FALSE;
   20d98:	0005883a 	mov	r2,zero
   20d9c:	00007d06 	br	20f94 <OC_I2CL_Write+0x25c>
	//set STA and WR bits(bit7 and bit4)
	if (!Write32_Data(i2c_base, 4, 0x90))   //0x90
   20da0:	01802404 	movi	r6,144
   20da4:	01400104 	movi	r5,4
   20da8:	e13ffd17 	ldw	r4,-12(fp)
   20dac:	00202600 	call	20260 <Write32_Data>
   20db0:	1080005c 	xori	r2,r2,1
   20db4:	10803fcc 	andi	r2,r2,255
   20db8:	10000226 	beq	r2,zero,20dc4 <OC_I2CL_Write+0x8c>
		return FALSE;
   20dbc:	0005883a 	mov	r2,zero
   20dc0:	00007406 	br	20f94 <OC_I2CL_Write+0x25c>

	//wait TIP bit go to 0 to end Tx
	if (!ACK_check(i2c_base)) {
   20dc4:	e13ffd17 	ldw	r4,-12(fp)
   20dc8:	00205d40 	call	205d4 <ACK_check>
   20dcc:	1080005c 	xori	r2,r2,1
   20dd0:	10803fcc 	andi	r2,r2,255
   20dd4:	10000526 	beq	r2,zero,20dec <OC_I2CL_Write+0xb4>
		printf("OC_I2CL_Write error[0]\r\n");
   20dd8:	010000b4 	movhi	r4,2
   20ddc:	21101e04 	addi	r4,r4,16504
   20de0:	0021dfc0 	call	21dfc <puts>
		return FALSE;
   20de4:	0005883a 	mov	r2,zero
   20de8:	00006a06 	br	20f94 <OC_I2CL_Write+0x25c>
	// printf("\n receive ACK-device address! \n");

	//set the txr reg data with reg address + 1 data MSB
	//  reg_data  = (sub_address << 1) & 0xFE;
	//reg_data |= ((data >> 8) & 0x01);
	if (!Write32_Data(i2c_base, 3, AddrHigh))   //reg_data&0xff);
   20dec:	e0bffec3 	ldbu	r2,-5(fp)
   20df0:	100d883a 	mov	r6,r2
   20df4:	014000c4 	movi	r5,3
   20df8:	e13ffd17 	ldw	r4,-12(fp)
   20dfc:	00202600 	call	20260 <Write32_Data>
   20e00:	1080005c 	xori	r2,r2,1
   20e04:	10803fcc 	andi	r2,r2,255
   20e08:	10000226 	beq	r2,zero,20e14 <OC_I2CL_Write+0xdc>
		return FALSE;
   20e0c:	0005883a 	mov	r2,zero
   20e10:	00006006 	br	20f94 <OC_I2CL_Write+0x25c>

	//set WR bits(bit4)
	if (!Write32_Data(i2c_base, 4, 0x10))
   20e14:	01800404 	movi	r6,16
   20e18:	01400104 	movi	r5,4
   20e1c:	e13ffd17 	ldw	r4,-12(fp)
   20e20:	00202600 	call	20260 <Write32_Data>
   20e24:	1080005c 	xori	r2,r2,1
   20e28:	10803fcc 	andi	r2,r2,255
   20e2c:	10000226 	beq	r2,zero,20e38 <OC_I2CL_Write+0x100>
		return FALSE;
   20e30:	0005883a 	mov	r2,zero
   20e34:	00005706 	br	20f94 <OC_I2CL_Write+0x25c>

	//wait TIP bit go to 0 to end Tx
	if (!ACK_check(i2c_base)) {
   20e38:	e13ffd17 	ldw	r4,-12(fp)
   20e3c:	00205d40 	call	205d4 <ACK_check>
   20e40:	1080005c 	xori	r2,r2,1
   20e44:	10803fcc 	andi	r2,r2,255
   20e48:	10000526 	beq	r2,zero,20e60 <OC_I2CL_Write+0x128>
		printf("OC_I2CL_Write error[1]\r\n");
   20e4c:	010000b4 	movhi	r4,2
   20e50:	21102404 	addi	r4,r4,16528
   20e54:	0021dfc0 	call	21dfc <puts>
		return FALSE;
   20e58:	0005883a 	mov	r2,zero
   20e5c:	00004d06 	br	20f94 <OC_I2CL_Write+0x25c>
	}
	// printf("\n receive ACK-reg high address! \n");

	//set the txr reg data with reg address + 1 data MSB
	if (!Write32_Data(i2c_base, 3, AddrLow))   //reg_data&0xff);
   20e60:	e0bffe83 	ldbu	r2,-6(fp)
   20e64:	100d883a 	mov	r6,r2
   20e68:	014000c4 	movi	r5,3
   20e6c:	e13ffd17 	ldw	r4,-12(fp)
   20e70:	00202600 	call	20260 <Write32_Data>
   20e74:	1080005c 	xori	r2,r2,1
   20e78:	10803fcc 	andi	r2,r2,255
   20e7c:	10000226 	beq	r2,zero,20e88 <OC_I2CL_Write+0x150>
		return FALSE;
   20e80:	0005883a 	mov	r2,zero
   20e84:	00004306 	br	20f94 <OC_I2CL_Write+0x25c>

	//set WR bits(bit4)
	Write32_Data(i2c_base, 4, 0x10);
   20e88:	01800404 	movi	r6,16
   20e8c:	01400104 	movi	r5,4
   20e90:	e13ffd17 	ldw	r4,-12(fp)
   20e94:	00202600 	call	20260 <Write32_Data>

	//wait TIP bit go to 0 to end Tx
	if (!ACK_check(i2c_base)) {
   20e98:	e13ffd17 	ldw	r4,-12(fp)
   20e9c:	00205d40 	call	205d4 <ACK_check>
   20ea0:	1080005c 	xori	r2,r2,1
   20ea4:	10803fcc 	andi	r2,r2,255
   20ea8:	10000526 	beq	r2,zero,20ec0 <OC_I2CL_Write+0x188>
		printf("OC_I2CL_Write error[2]\r\n");
   20eac:	010000b4 	movhi	r4,2
   20eb0:	21102a04 	addi	r4,r4,16552
   20eb4:	0021dfc0 	call	21dfc <puts>
		return FALSE;
   20eb8:	0005883a 	mov	r2,zero
   20ebc:	00003506 	br	20f94 <OC_I2CL_Write+0x25c>
	}
	//  printf("\n receive ACK-reg low address! \n");

#if 1
	//for( i=nWriteLength-1;i>=0;i--){
	for (i = 0; i < nWriteLength; i++) {
   20ec0:	e03fff15 	stw	zero,-4(fp)
   20ec4:	00002406 	br	20f58 <OC_I2CL_Write+0x220>

		//set the txr reg data with the other data 8 bit LSB
		if (!Write32_Data(i2c_base, 3, *(pData + i)))
   20ec8:	e0bfff17 	ldw	r2,-4(fp)
   20ecc:	e0fffa17 	ldw	r3,-24(fp)
   20ed0:	1885883a 	add	r2,r3,r2
   20ed4:	10800003 	ldbu	r2,0(r2)
   20ed8:	10803fcc 	andi	r2,r2,255
   20edc:	100d883a 	mov	r6,r2
   20ee0:	014000c4 	movi	r5,3
   20ee4:	e13ffd17 	ldw	r4,-12(fp)
   20ee8:	00202600 	call	20260 <Write32_Data>
   20eec:	1080005c 	xori	r2,r2,1
   20ef0:	10803fcc 	andi	r2,r2,255
   20ef4:	10000226 	beq	r2,zero,20f00 <OC_I2CL_Write+0x1c8>
			return FALSE;
   20ef8:	0005883a 	mov	r2,zero
   20efc:	00002506 	br	20f94 <OC_I2CL_Write+0x25c>

		//set STO and WR bits(bit7 and bit4)
		if (!Write32_Data(i2c_base, 4, 0x10))
   20f00:	01800404 	movi	r6,16
   20f04:	01400104 	movi	r5,4
   20f08:	e13ffd17 	ldw	r4,-12(fp)
   20f0c:	00202600 	call	20260 <Write32_Data>
   20f10:	1080005c 	xori	r2,r2,1
   20f14:	10803fcc 	andi	r2,r2,255
   20f18:	10000226 	beq	r2,zero,20f24 <OC_I2CL_Write+0x1ec>
			return FALSE;
   20f1c:	0005883a 	mov	r2,zero
   20f20:	00001c06 	br	20f94 <OC_I2CL_Write+0x25c>

		//wait TIP bit go to 0 to end Tx
		if (!ACK_check(i2c_base)) {
   20f24:	e13ffd17 	ldw	r4,-12(fp)
   20f28:	00205d40 	call	205d4 <ACK_check>
   20f2c:	1080005c 	xori	r2,r2,1
   20f30:	10803fcc 	andi	r2,r2,255
   20f34:	10000526 	beq	r2,zero,20f4c <OC_I2CL_Write+0x214>
			printf("OC_I2CL_Write error[3]\r\n");
   20f38:	010000b4 	movhi	r4,2
   20f3c:	21103004 	addi	r4,r4,16576
   20f40:	0021dfc0 	call	21dfc <puts>
			return FALSE;
   20f44:	0005883a 	mov	r2,zero
   20f48:	00001206 	br	20f94 <OC_I2CL_Write+0x25c>
	for (i = 0; i < nWriteLength; i++) {
   20f4c:	e0bfff17 	ldw	r2,-4(fp)
   20f50:	10800044 	addi	r2,r2,1
   20f54:	e0bfff15 	stw	r2,-4(fp)
   20f58:	e0ffff17 	ldw	r3,-4(fp)
   20f5c:	e0800217 	ldw	r2,8(fp)
   20f60:	18bfd916 	blt	r3,r2,20ec8 <OC_I2CL_Write+0x190>
	//wait TIP bit go to 0 to end Tx
	if(!ACK_check( i2c_base))
	return FALSE;

#endif
	if (!Write32_Data(i2c_base, 4, 0x40))
   20f64:	01801004 	movi	r6,64
   20f68:	01400104 	movi	r5,4
   20f6c:	e13ffd17 	ldw	r4,-12(fp)
   20f70:	00202600 	call	20260 <Write32_Data>
   20f74:	1080005c 	xori	r2,r2,1
   20f78:	10803fcc 	andi	r2,r2,255
   20f7c:	10000226 	beq	r2,zero,20f88 <OC_I2CL_Write+0x250>
		return FALSE;
   20f80:	0005883a 	mov	r2,zero
   20f84:	00000306 	br	20f94 <OC_I2CL_Write+0x25c>

	//OS_msleep(1);
	usleep(SLEEP_TIME);
   20f88:	01003e84 	movi	r4,250
   20f8c:	00226400 	call	22640 <usleep>
	//  printf("\n receive ACK-data! \n");

	return TRUE;
   20f90:	00800044 	movi	r2,1
}
   20f94:	e037883a 	mov	sp,fp
   20f98:	dfc00117 	ldw	ra,4(sp)
   20f9c:	df000017 	ldw	fp,0(sp)
   20fa0:	dec00204 	addi	sp,sp,8
   20fa4:	f800283a 	ret

00020fa8 <OC_I2CL_Read>:
 return TRUE;

 } */

bool OC_I2CL_Read(alt_32 i2c_base, alt_u8 device_address, alt_u16 sub_address,
		alt_u8 *pData8, int nReadLength) {
   20fa8:	defff704 	addi	sp,sp,-36
   20fac:	dfc00815 	stw	ra,32(sp)
   20fb0:	df000715 	stw	fp,28(sp)
   20fb4:	df000704 	addi	fp,sp,28
   20fb8:	e13ffc15 	stw	r4,-16(fp)
   20fbc:	2805883a 	mov	r2,r5
   20fc0:	3007883a 	mov	r3,r6
   20fc4:	e1fff915 	stw	r7,-28(fp)
   20fc8:	e0bffb05 	stb	r2,-20(fp)
   20fcc:	1805883a 	mov	r2,r3
   20fd0:	e0bffa0d 	sth	r2,-24(fp)
	int i;

	alt_u8 AddrHigh, AddrLow;
	alt_u8 DataHigh, DataLow;

	AddrHigh = (sub_address >> 8) & 0xFF;
   20fd4:	e0bffa0b 	ldhu	r2,-24(fp)
   20fd8:	1004d23a 	srli	r2,r2,8
   20fdc:	e0bffec5 	stb	r2,-5(fp)
	AddrLow = sub_address & 0xFF;
   20fe0:	e0bffa0b 	ldhu	r2,-24(fp)
   20fe4:	e0bffe85 	stb	r2,-6(fp)

	//set the tx reg audio chip dev address with write bit
	if (!Write32_Data(i2c_base, 3, device_address))
   20fe8:	e0bffb03 	ldbu	r2,-20(fp)
   20fec:	100d883a 	mov	r6,r2
   20ff0:	014000c4 	movi	r5,3
   20ff4:	e13ffc17 	ldw	r4,-16(fp)
   20ff8:	00202600 	call	20260 <Write32_Data>
   20ffc:	1080005c 	xori	r2,r2,1
   21000:	10803fcc 	andi	r2,r2,255
   21004:	10000226 	beq	r2,zero,21010 <OC_I2CL_Read+0x68>
		return FALSE;
   21008:	0005883a 	mov	r2,zero
   2100c:	00009e06 	br	21288 <OC_I2CL_Read+0x2e0>

	//set STA and WR bits(bit7 and bit4)
	if (!Write32_Data(i2c_base, 4, 0x90))
   21010:	01802404 	movi	r6,144
   21014:	01400104 	movi	r5,4
   21018:	e13ffc17 	ldw	r4,-16(fp)
   2101c:	00202600 	call	20260 <Write32_Data>
   21020:	1080005c 	xori	r2,r2,1
   21024:	10803fcc 	andi	r2,r2,255
   21028:	10000226 	beq	r2,zero,21034 <OC_I2CL_Read+0x8c>
		return FALSE;
   2102c:	0005883a 	mov	r2,zero
   21030:	00009506 	br	21288 <OC_I2CL_Read+0x2e0>

	//wait TIP bit go to 0 to end Tx
	if (!ACK_check(i2c_base)) {
   21034:	e13ffc17 	ldw	r4,-16(fp)
   21038:	00205d40 	call	205d4 <ACK_check>
   2103c:	1080005c 	xori	r2,r2,1
   21040:	10803fcc 	andi	r2,r2,255
   21044:	10000526 	beq	r2,zero,2105c <OC_I2CL_Read+0xb4>
		printf("OC_I2CL_Read error[0]\r\n");
   21048:	010000b4 	movhi	r4,2
   2104c:	21103604 	addi	r4,r4,16600
   21050:	0021dfc0 	call	21dfc <puts>
		return FALSE;
   21054:	0005883a 	mov	r2,zero
   21058:	00008b06 	br	21288 <OC_I2CL_Read+0x2e0>
	}
	//  printf("\n receive ACK-device address! \n");

	//set the txr reg data with reg address + 0

	if (!Write32_Data(i2c_base, 3, AddrHigh))   //reg_data&0xff);
   2105c:	e0bffec3 	ldbu	r2,-5(fp)
   21060:	100d883a 	mov	r6,r2
   21064:	014000c4 	movi	r5,3
   21068:	e13ffc17 	ldw	r4,-16(fp)
   2106c:	00202600 	call	20260 <Write32_Data>
   21070:	1080005c 	xori	r2,r2,1
   21074:	10803fcc 	andi	r2,r2,255
   21078:	10000226 	beq	r2,zero,21084 <OC_I2CL_Read+0xdc>
		return FALSE;
   2107c:	0005883a 	mov	r2,zero
   21080:	00008106 	br	21288 <OC_I2CL_Read+0x2e0>

	//set WR bits(bit4)
	if (!Write32_Data(i2c_base, 4, 0x10))
   21084:	01800404 	movi	r6,16
   21088:	01400104 	movi	r5,4
   2108c:	e13ffc17 	ldw	r4,-16(fp)
   21090:	00202600 	call	20260 <Write32_Data>
   21094:	1080005c 	xori	r2,r2,1
   21098:	10803fcc 	andi	r2,r2,255
   2109c:	10000226 	beq	r2,zero,210a8 <OC_I2CL_Read+0x100>
		return FALSE;
   210a0:	0005883a 	mov	r2,zero
   210a4:	00007806 	br	21288 <OC_I2CL_Read+0x2e0>

	//wait TIP bit go to 0 to end Tx
	if (!ACK_check(i2c_base)) {
   210a8:	e13ffc17 	ldw	r4,-16(fp)
   210ac:	00205d40 	call	205d4 <ACK_check>
   210b0:	1080005c 	xori	r2,r2,1
   210b4:	10803fcc 	andi	r2,r2,255
   210b8:	10000526 	beq	r2,zero,210d0 <OC_I2CL_Read+0x128>
		printf("OC_I2CL_Read error[1]\r\n");
   210bc:	010000b4 	movhi	r4,2
   210c0:	21103c04 	addi	r4,r4,16624
   210c4:	0021dfc0 	call	21dfc <puts>
		return FALSE;
   210c8:	0005883a 	mov	r2,zero
   210cc:	00006e06 	br	21288 <OC_I2CL_Read+0x2e0>
	}
//   printf("\n read receive ACK-reg High address! \n");

	//set the txr reg data with reg address + 0
	if (!Write32_Data(i2c_base, 3, AddrLow)) //;//reg_data&0xff);
   210d0:	e0bffe83 	ldbu	r2,-6(fp)
   210d4:	100d883a 	mov	r6,r2
   210d8:	014000c4 	movi	r5,3
   210dc:	e13ffc17 	ldw	r4,-16(fp)
   210e0:	00202600 	call	20260 <Write32_Data>
   210e4:	1080005c 	xori	r2,r2,1
   210e8:	10803fcc 	andi	r2,r2,255
   210ec:	10000226 	beq	r2,zero,210f8 <OC_I2CL_Read+0x150>
		return FALSE;
   210f0:	0005883a 	mov	r2,zero
   210f4:	00006406 	br	21288 <OC_I2CL_Read+0x2e0>
	//set WR bits(bit4)
	if (!Write32_Data(i2c_base, 4, 0x10))
   210f8:	01800404 	movi	r6,16
   210fc:	01400104 	movi	r5,4
   21100:	e13ffc17 	ldw	r4,-16(fp)
   21104:	00202600 	call	20260 <Write32_Data>
   21108:	1080005c 	xori	r2,r2,1
   2110c:	10803fcc 	andi	r2,r2,255
   21110:	10000226 	beq	r2,zero,2111c <OC_I2CL_Read+0x174>
		return FALSE;
   21114:	0005883a 	mov	r2,zero
   21118:	00005b06 	br	21288 <OC_I2CL_Read+0x2e0>

	//wait TIP bit go to 0 to end Tx
	if (!ACK_check(i2c_base)) {
   2111c:	e13ffc17 	ldw	r4,-16(fp)
   21120:	00205d40 	call	205d4 <ACK_check>
   21124:	1080005c 	xori	r2,r2,1
   21128:	10803fcc 	andi	r2,r2,255
   2112c:	10000526 	beq	r2,zero,21144 <OC_I2CL_Read+0x19c>
		printf("OC_I2CL_Read error[2]\r\n");
   21130:	010000b4 	movhi	r4,2
   21134:	21104204 	addi	r4,r4,16648
   21138:	0021dfc0 	call	21dfc <puts>
		return FALSE;
   2113c:	0005883a 	mov	r2,zero
   21140:	00005106 	br	21288 <OC_I2CL_Read+0x2e0>

	//  printf("\n read receive ACK-reg Low address! \n");

	//read
	//set the tx reg audio chip dev address with read bit 1
	if (!Write32_Data(i2c_base, 3, device_address | 0x01))
   21144:	e0bffb03 	ldbu	r2,-20(fp)
   21148:	10800054 	ori	r2,r2,1
   2114c:	10803fcc 	andi	r2,r2,255
   21150:	100d883a 	mov	r6,r2
   21154:	014000c4 	movi	r5,3
   21158:	e13ffc17 	ldw	r4,-16(fp)
   2115c:	00202600 	call	20260 <Write32_Data>
   21160:	1080005c 	xori	r2,r2,1
   21164:	10803fcc 	andi	r2,r2,255
   21168:	10000226 	beq	r2,zero,21174 <OC_I2CL_Read+0x1cc>
		return FALSE;
   2116c:	0005883a 	mov	r2,zero
   21170:	00004506 	br	21288 <OC_I2CL_Read+0x2e0>

	//set STA and WR bits(bit7 and bit4)
	if (!Write32_Data(i2c_base, 4, 0x90))
   21174:	01802404 	movi	r6,144
   21178:	01400104 	movi	r5,4
   2117c:	e13ffc17 	ldw	r4,-16(fp)
   21180:	00202600 	call	20260 <Write32_Data>
   21184:	1080005c 	xori	r2,r2,1
   21188:	10803fcc 	andi	r2,r2,255
   2118c:	10000226 	beq	r2,zero,21198 <OC_I2CL_Read+0x1f0>
		return FALSE;
   21190:	0005883a 	mov	r2,zero
   21194:	00003c06 	br	21288 <OC_I2CL_Read+0x2e0>

	//wait TIP bit go to 0 to end Tx
	if (!ACK_check(i2c_base)) {
   21198:	e13ffc17 	ldw	r4,-16(fp)
   2119c:	00205d40 	call	205d4 <ACK_check>
   211a0:	1080005c 	xori	r2,r2,1
   211a4:	10803fcc 	andi	r2,r2,255
   211a8:	10000526 	beq	r2,zero,211c0 <OC_I2CL_Read+0x218>
		printf("OC_I2CL_Read error[3]\r\n");
   211ac:	010000b4 	movhi	r4,2
   211b0:	21104804 	addi	r4,r4,16672
   211b4:	0021dfc0 	call	21dfc <puts>
		return FALSE;
   211b8:	0005883a 	mov	r2,zero
   211bc:	00003206 	br	21288 <OC_I2CL_Read+0x2e0>
//   printf("\n read receive ACK-device address(read)! \n");

	//read the rxr data

#if 1
	for (i = 0; i < nReadLength; i++) {
   211c0:	e03fff15 	stw	zero,-4(fp)
   211c4:	00002106 	br	2124c <OC_I2CL_Read+0x2a4>
		// printf("\n read receive ACK-device address(read)! \n");
		//set the RD and ACK bit(bit5 and bit3)
		IOWR(i2c_base, 4, ((i + 1) == nReadLength) ? 0x28 : 0x20);
   211c8:	e0bffc17 	ldw	r2,-16(fp)
   211cc:	10800404 	addi	r2,r2,16
   211d0:	1009883a 	mov	r4,r2
   211d4:	e0bfff17 	ldw	r2,-4(fp)
   211d8:	10800044 	addi	r2,r2,1
   211dc:	e0c00217 	ldw	r3,8(fp)
   211e0:	1880021e 	bne	r3,r2,211ec <OC_I2CL_Read+0x244>
   211e4:	00800a04 	movi	r2,40
   211e8:	00000106 	br	211f0 <OC_I2CL_Read+0x248>
   211ec:	00800804 	movi	r2,32
   211f0:	20800035 	stwio	r2,0(r4)

		if (!ACK_judge_for_read(i2c_base)) {
   211f4:	e13ffc17 	ldw	r4,-16(fp)
   211f8:	002088c0 	call	2088c <ACK_judge_for_read>
   211fc:	1080005c 	xori	r2,r2,1
   21200:	10803fcc 	andi	r2,r2,255
   21204:	10000526 	beq	r2,zero,2121c <OC_I2CL_Read+0x274>
			printf("OC_I2CL_Read error[4]\r\n");
   21208:	010000b4 	movhi	r4,2
   2120c:	21104e04 	addi	r4,r4,16696
   21210:	0021dfc0 	call	21dfc <puts>
			return FALSE;
   21214:	0005883a 	mov	r2,zero
   21218:	00001b06 	br	21288 <OC_I2CL_Read+0x2e0>
		}
		// printf("\n read receive ACK-device address(read)! \n");

		Data32 = IORD(i2c_base, 3);
   2121c:	e0bffc17 	ldw	r2,-16(fp)
   21220:	10800304 	addi	r2,r2,12
   21224:	10800037 	ldwio	r2,0(r2)
   21228:	e0bffd15 	stw	r2,-12(fp)
		*(pData8 + i) = Data32 & 0xff;
   2122c:	e0bfff17 	ldw	r2,-4(fp)
   21230:	e0fff917 	ldw	r3,-28(fp)
   21234:	1885883a 	add	r2,r3,r2
   21238:	e0fffd17 	ldw	r3,-12(fp)
   2123c:	10c00005 	stb	r3,0(r2)
	for (i = 0; i < nReadLength; i++) {
   21240:	e0bfff17 	ldw	r2,-4(fp)
   21244:	10800044 	addi	r2,r2,1
   21248:	e0bfff15 	stw	r2,-4(fp)
   2124c:	e0ffff17 	ldw	r3,-4(fp)
   21250:	e0800217 	ldw	r2,8(fp)
   21254:	18bfdc16 	blt	r3,r2,211c8 <OC_I2CL_Read+0x220>
	DataLow = Data32 & 0xff;

	pData16 = (DataHigh << 8) | DataLow;
#endif

	if (!Write32_Data(i2c_base, 4, 0x40))
   21258:	01801004 	movi	r6,64
   2125c:	01400104 	movi	r5,4
   21260:	e13ffc17 	ldw	r4,-16(fp)
   21264:	00202600 	call	20260 <Write32_Data>
   21268:	1080005c 	xori	r2,r2,1
   2126c:	10803fcc 	andi	r2,r2,255
   21270:	10000226 	beq	r2,zero,2127c <OC_I2CL_Read+0x2d4>
		return FALSE;
   21274:	0005883a 	mov	r2,zero
   21278:	00000306 	br	21288 <OC_I2CL_Read+0x2e0>

	//OS_msleep(1);
	usleep(SLEEP_TIME);
   2127c:	01003e84 	movi	r4,250
   21280:	00226400 	call	22640 <usleep>

	return TRUE;
   21284:	00800044 	movi	r2,1

}
   21288:	e037883a 	mov	sp,fp
   2128c:	dfc00117 	ldw	ra,4(sp)
   21290:	df000017 	ldw	fp,0(sp)
   21294:	dec00204 	addi	sp,sp,8
   21298:	f800283a 	ret

0002129c <main>:
#define WRITE 0
#define READ 1



int main() {
   2129c:	deffc804 	addi	sp,sp,-224
   212a0:	dfc03715 	stw	ra,220(sp)
   212a4:	df003615 	stw	fp,216(sp)
   212a8:	df003604 	addi	fp,sp,216
	int data;
	uint8_t i;
	volatile alt_u16 timeout;
	bool exitloop = false;
   212ac:	e03fff85 	stb	zero,-2(fp)
	volatile alt_u8 tempError;
	uint8_t numbytes;
	uint8_t Slave_Rx_Buffer[200] = {0};
   212b0:	e03fcc15 	stw	zero,-208(fp)
   212b4:	e0bfcd04 	addi	r2,fp,-204
   212b8:	00c03104 	movi	r3,196
   212bc:	180d883a 	mov	r6,r3
   212c0:	000b883a 	mov	r5,zero
   212c4:	1009883a 	mov	r4,r2
   212c8:	0021cd80 	call	21cd8 <memset>
	uint8_t Slave_Rx_Index = 0;
   212cc:	e03fff45 	stb	zero,-3(fp)
	char    tempChar = 0;
   212d0:	e03fcbc5 	stb	zero,-209(fp)

	volatile	alt_u8 initialcycle = 1;
   212d4:	00800044 	movi	r2,1
   212d8:	e0bfcb85 	stb	r2,-210(fp)
	volatile	alt_u32 I2CA_BASE = WATER_I2C_OPENCORES_BASE;
   212dc:	00800134 	movhi	r2,4
   212e0:	10844004 	addi	r2,r2,4352
   212e4:	e0bfca15 	stw	r2,-216(fp)

	Water_I2C_init(I2CA_BASE, ALT_CPU_FREQ, 100000);
   212e8:	e0bfca17 	ldw	r2,-216(fp)
   212ec:	018000b4 	movhi	r6,2
   212f0:	31a1a804 	addi	r6,r6,-31072
   212f4:	0140bef4 	movhi	r5,763
   212f8:	297c2004 	addi	r5,r5,-3968
   212fc:	1009883a 	mov	r4,r2
   21300:	00216440 	call	21644 <Water_I2C_init>
	printf(" CODE IS STARTED IN I2C_TEST.C \n");
   21304:	010000b4 	movhi	r4,2
   21308:	21105404 	addi	r4,r4,16720
   2130c:	0021dfc0 	call	21dfc <puts>
	usleep(100);
   21310:	01001904 	movi	r4,100
   21314:	00226400 	call	22640 <usleep>
	if (initialcycle) {
   21318:	e0bfcb83 	ldbu	r2,-210(fp)
   2131c:	10803fcc 	andi	r2,r2,255
   21320:	10006126 	beq	r2,zero,214a8 <main+0x20c>
		numbytes = 0;
   21324:	e03ffe05 	stb	zero,-8(fp)
		myI2CReadWrite(READ, BYTES_TO_READ, (uint8_t *)&numbytes,1);
   21328:	e0bffe04 	addi	r2,fp,-8
   2132c:	01c00044 	movi	r7,1
   21330:	100d883a 	mov	r6,r2
   21334:	01401844 	movi	r5,97
   21338:	01000044 	movi	r4,1
   2133c:	002173c0 	call	2173c <myI2CReadWrite>
		while (numbytes > 0) {
   21340:	00005506 	br	21498 <main+0x1fc>
			//myI2CReadWrite(READ, BYTES_TO, (uint8_t*)&Slave_Rx_Buffer[0], (alt_u16)numbytes);
			i = 0;
   21344:	e03fffc5 	stb	zero,-1(fp)
			Water_I2C_start(I2CA_BASE,0x4Cu,0);
   21348:	e0bfca17 	ldw	r2,-216(fp)
   2134c:	000d883a 	mov	r6,zero
   21350:	01401304 	movi	r5,76
   21354:	1009883a 	mov	r4,r2
   21358:	002189c0 	call	2189c <Water_I2C_start>
			Water_I2C_write(I2CA_BASE,BYTES_TO,1);
   2135c:	e0bfca17 	ldw	r2,-216(fp)
   21360:	10803fcc 	andi	r2,r2,255
   21364:	01800044 	movi	r6,1
   21368:	014018c4 	movi	r5,99
   2136c:	1009883a 	mov	r4,r2
   21370:	0021a240 	call	21a24 <Water_I2C_write>
			Water_I2C_start(I2CA_BASE,0x4Cu,1);
   21374:	e0bfca17 	ldw	r2,-216(fp)
   21378:	01800044 	movi	r6,1
   2137c:	01401304 	movi	r5,76
   21380:	1009883a 	mov	r4,r2
   21384:	002189c0 	call	2189c <Water_I2C_start>
			while (i <numbytes){
   21388:	00001406 	br	213dc <main+0x140>
				Slave_Rx_Buffer[i]= Water_I2C_read(BYTES_TO,numbytes);
   2138c:	e0bffe03 	ldbu	r2,-8(fp)
   21390:	10803fcc 	andi	r2,r2,255
   21394:	100b883a 	mov	r5,r2
   21398:	010018c4 	movi	r4,99
   2139c:	00219780 	call	21978 <Water_I2C_read>
   213a0:	1007883a 	mov	r3,r2
   213a4:	e0bfffc3 	ldbu	r2,-1(fp)
   213a8:	e085883a 	add	r2,fp,r2
   213ac:	10ffcc05 	stb	r3,-208(r2)
				printf("aabbbeeyyyy \n%d",Slave_Rx_Buffer[i]);
   213b0:	e0bfffc3 	ldbu	r2,-1(fp)
   213b4:	e085883a 	add	r2,fp,r2
   213b8:	10bfcc03 	ldbu	r2,-208(r2)
   213bc:	10803fcc 	andi	r2,r2,255
   213c0:	100b883a 	mov	r5,r2
   213c4:	010000b4 	movhi	r4,2
   213c8:	21105c04 	addi	r4,r4,16752
   213cc:	0021d340 	call	21d34 <printf>
				i=i+1;
   213d0:	e0bfffc3 	ldbu	r2,-1(fp)
   213d4:	10800044 	addi	r2,r2,1
   213d8:	e0bfffc5 	stb	r2,-1(fp)
			while (i <numbytes){
   213dc:	e0bffe03 	ldbu	r2,-8(fp)
   213e0:	e0ffffc3 	ldbu	r3,-1(fp)
   213e4:	10803fcc 	andi	r2,r2,255
   213e8:	18bfe836 	bltu	r3,r2,2138c <main+0xf0>
			}

			usleep(100);
   213ec:	01001904 	movi	r4,100
   213f0:	00226400 	call	22640 <usleep>
			while (Slave_Rx_Index < numbytes) {
   213f4:	00001c06 	br	21468 <main+0x1cc>
				tempChar = Slave_Rx_Buffer[Slave_Rx_Index];
   213f8:	e0bfff43 	ldbu	r2,-3(fp)
   213fc:	e085883a 	add	r2,fp,r2
   21400:	10bfcc03 	ldbu	r2,-208(r2)
   21404:	e0bfcbc5 	stb	r2,-209(fp)
				Slave_Rx_Buffer[Slave_Rx_Index] = '\0';
   21408:	e0bfff43 	ldbu	r2,-3(fp)
   2140c:	e085883a 	add	r2,fp,r2
   21410:	103fcc05 	stb	zero,-208(r2)
				if (tempChar != '~' && tempChar != '\0') {
   21414:	e0bfcbc3 	ldbu	r2,-209(fp)
   21418:	10803fcc 	andi	r2,r2,255
   2141c:	1080201c 	xori	r2,r2,128
   21420:	10bfe004 	addi	r2,r2,-128
   21424:	10801fa0 	cmpeqi	r2,r2,126
   21428:	1000081e 	bne	r2,zero,2144c <main+0x1b0>
   2142c:	e0bfcbc3 	ldbu	r2,-209(fp)
   21430:	10803fcc 	andi	r2,r2,255
   21434:	1080201c 	xori	r2,r2,128
   21438:	10bfe004 	addi	r2,r2,-128
   2143c:	10000326 	beq	r2,zero,2144c <main+0x1b0>
					printf((const char *)&tempChar);
   21440:	e0bfcbc4 	addi	r2,fp,-209
   21444:	1009883a 	mov	r4,r2
   21448:	0021d340 	call	21d34 <printf>
				}
				if(Slave_Rx_Index<numbytes){
   2144c:	e0bffe03 	ldbu	r2,-8(fp)
   21450:	e0ffff43 	ldbu	r3,-3(fp)
   21454:	10803fcc 	andi	r2,r2,255
   21458:	1880032e 	bgeu	r3,r2,21468 <main+0x1cc>
					Slave_Rx_Index= Slave_Rx_Index+1;
   2145c:	e0bfff43 	ldbu	r2,-3(fp)
   21460:	10800044 	addi	r2,r2,1
   21464:	e0bfff45 	stb	r2,-3(fp)
			while (Slave_Rx_Index < numbytes) {
   21468:	e0bffe03 	ldbu	r2,-8(fp)
   2146c:	e0ffff43 	ldbu	r3,-3(fp)
   21470:	10803fcc 	andi	r2,r2,255
   21474:	18bfe036 	bltu	r3,r2,213f8 <main+0x15c>
				}
			}
			myI2CReadWrite(READ, BYTES_TO_READ, (alt_u8 *)&numbytes, 1);
   21478:	e0bffe04 	addi	r2,fp,-8
   2147c:	01c00044 	movi	r7,1
   21480:	100d883a 	mov	r6,r2
   21484:	01401844 	movi	r5,97
   21488:	01000044 	movi	r4,1
   2148c:	002173c0 	call	2173c <myI2CReadWrite>
			usleep(100);
   21490:	01001904 	movi	r4,100
   21494:	00226400 	call	22640 <usleep>
		while (numbytes > 0) {
   21498:	e0bffe03 	ldbu	r2,-8(fp)
   2149c:	10803fcc 	andi	r2,r2,255
   214a0:	103fa81e 	bne	r2,zero,21344 <main+0xa8>
		}
		initialcycle=0;
   214a4:	e03fcb85 	stb	zero,-210(fp)
	}
	timeout = 600;
   214a8:	00809604 	movi	r2,600
   214ac:	e0bffe8d 	sth	r2,-6(fp)
	exitloop = false;
   214b0:	e03fff85 	stb	zero,-2(fp)

	do{
		usleep(2000);
   214b4:	0101f404 	movi	r4,2000
   214b8:	00226400 	call	22640 <usleep>
		numbytes =0;
   214bc:	e03ffe05 	stb	zero,-8(fp)
		myI2CReadWrite(READ, BYTES_TO_READ, (alt_u8 *)&numbytes, 1); //numbytes can be 0 to 255, but there can be more than 255 bytes in slave buffer
   214c0:	e0bffe04 	addi	r2,fp,-8
   214c4:	01c00044 	movi	r7,1
   214c8:	100d883a 	mov	r6,r2
   214cc:	01401844 	movi	r5,97
   214d0:	01000044 	movi	r4,1
   214d4:	002173c0 	call	2173c <myI2CReadWrite>
		usleep(50);
   214d8:	01000c84 	movi	r4,50
   214dc:	00226400 	call	22640 <usleep>

		while (numbytes > 0) { //data available
   214e0:	00003b06 	br	215d0 <main+0x334>
			tempError = myI2CReadWrite(READ, BYTES_TO, &Slave_Rx_Buffer[0], numbytes);
   214e4:	e0bffe03 	ldbu	r2,-8(fp)
   214e8:	10c03fcc 	andi	r3,r2,255
   214ec:	e0bfcc04 	addi	r2,fp,-208
   214f0:	180f883a 	mov	r7,r3
   214f4:	100d883a 	mov	r6,r2
   214f8:	014018c4 	movi	r5,99
   214fc:	01000044 	movi	r4,1
   21500:	002173c0 	call	2173c <myI2CReadWrite>
   21504:	e0bffe45 	stb	r2,-7(fp)
			printf("temperror = %d" , tempError);
   21508:	e0bffe43 	ldbu	r2,-7(fp)
   2150c:	10803fcc 	andi	r2,r2,255
   21510:	100b883a 	mov	r5,r2
   21514:	010000b4 	movhi	r4,2
   21518:	21106004 	addi	r4,r4,16768
   2151c:	0021d340 	call	21d34 <printf>
			if (tempError != 0) {
   21520:	e0bffe43 	ldbu	r2,-7(fp)
   21524:	10803fcc 	andi	r2,r2,255
   21528:	10000326 	beq	r2,zero,21538 <main+0x29c>
				printf("Error reading from sensor");
   2152c:	010000b4 	movhi	r4,2
   21530:	21106404 	addi	r4,r4,16784
   21534:	0021d340 	call	21d34 <printf>
			}
			usleep(100);
   21538:	01001904 	movi	r4,100
   2153c:	00226400 	call	22640 <usleep>

			for (Slave_Rx_Index = 0; Slave_Rx_Index < numbytes; Slave_Rx_Index++) {
   21540:	e03fff45 	stb	zero,-3(fp)
   21544:	00001606 	br	215a0 <main+0x304>
				tempChar = Slave_Rx_Buffer[Slave_Rx_Index];
   21548:	e0bfff43 	ldbu	r2,-3(fp)
   2154c:	e085883a 	add	r2,fp,r2
   21550:	10bfcc03 	ldbu	r2,-208(r2)
   21554:	e0bfcbc5 	stb	r2,-209(fp)
				Slave_Rx_Buffer[Slave_Rx_Index] = '\0'; //clean buffer
   21558:	e0bfff43 	ldbu	r2,-3(fp)
   2155c:	e085883a 	add	r2,fp,r2
   21560:	103fcc05 	stb	zero,-208(r2)
				if (tempChar == '~') {
   21564:	e0bfcbc3 	ldbu	r2,-209(fp)
   21568:	10803fcc 	andi	r2,r2,255
   2156c:	1080201c 	xori	r2,r2,128
   21570:	10bfe004 	addi	r2,r2,-128
   21574:	10801f98 	cmpnei	r2,r2,126
   21578:	1000031e 	bne	r2,zero,21588 <main+0x2ec>
					exitloop = true;
   2157c:	00800044 	movi	r2,1
   21580:	e0bfff85 	stb	r2,-2(fp)
   21584:	00000306 	br	21594 <main+0x2f8>
				}
				else { //end message character received
					printf((const char *)&tempChar);
   21588:	e0bfcbc4 	addi	r2,fp,-209
   2158c:	1009883a 	mov	r4,r2
   21590:	0021d340 	call	21d34 <printf>
			for (Slave_Rx_Index = 0; Slave_Rx_Index < numbytes; Slave_Rx_Index++) {
   21594:	e0bfff43 	ldbu	r2,-3(fp)
   21598:	10800044 	addi	r2,r2,1
   2159c:	e0bfff45 	stb	r2,-3(fp)
   215a0:	e0bffe03 	ldbu	r2,-8(fp)
   215a4:	e0ffff43 	ldbu	r3,-3(fp)
   215a8:	10803fcc 	andi	r2,r2,255
   215ac:	18bfe636 	bltu	r3,r2,21548 <main+0x2ac>
				}
			}
			myI2CReadWrite(READ, BYTES_TO_READ, (alt_u8 *)&numbytes,1);
   215b0:	e0bffe04 	addi	r2,fp,-8
   215b4:	01c00044 	movi	r7,1
   215b8:	100d883a 	mov	r6,r2
   215bc:	01401844 	movi	r5,97
   215c0:	01000044 	movi	r4,1
   215c4:	002173c0 	call	2173c <myI2CReadWrite>

			usleep(50);
   215c8:	01000c84 	movi	r4,50
   215cc:	00226400 	call	22640 <usleep>
		while (numbytes > 0) { //data available
   215d0:	e0bffe03 	ldbu	r2,-8(fp)
   215d4:	10803fcc 	andi	r2,r2,255
   215d8:	103fc21e 	bne	r2,zero,214e4 <main+0x248>
		}// end data available while loop

		usleep(10);
   215dc:	01000284 	movi	r4,10
   215e0:	00226400 	call	22640 <usleep>
		timeout--;
   215e4:	e0bffe8b 	ldhu	r2,-6(fp)
   215e8:	10bfffc4 	addi	r2,r2,-1
   215ec:	e0bffe8d 	sth	r2,-6(fp)

	}while (timeout > 0 && !exitloop);
   215f0:	e0bffe8b 	ldhu	r2,-6(fp)
   215f4:	10bfffcc 	andi	r2,r2,65535
   215f8:	10000426 	beq	r2,zero,2160c <main+0x370>
   215fc:	e0bfff83 	ldbu	r2,-2(fp)
   21600:	1080005c 	xori	r2,r2,1
   21604:	10803fcc 	andi	r2,r2,255
   21608:	103faa1e 	bne	r2,zero,214b4 <main+0x218>
	if (timeout == 0) {
   2160c:	e0bffe8b 	ldhu	r2,-6(fp)
   21610:	10bfffcc 	andi	r2,r2,65535
   21614:	1000031e 	bne	r2,zero,21624 <main+0x388>
		printf("Slave timeout.");
   21618:	010000b4 	movhi	r4,2
   2161c:	21106b04 	addi	r4,r4,16812
   21620:	0021d340 	call	21d34 <printf>
	}
	usleep(100);
   21624:	01001904 	movi	r4,100
   21628:	00226400 	call	22640 <usleep>
   2162c:	0005883a 	mov	r2,zero

}
   21630:	e037883a 	mov	sp,fp
   21634:	dfc00117 	ldw	ra,4(sp)
   21638:	df000017 	ldw	fp,0(sp)
   2163c:	dec00204 	addi	sp,sp,8
   21640:	f800283a 	ret

00021644 <Water_I2C_init>:
 base = the base address of the component
 clk = freuqency of the clock driving this component  ( in Hz)
 speed = SCL speed ie 100K, 400K ...            (in Hz)
 15-OCT-07 initial release
 *****************************************************************/
void Water_I2C_init(alt_u32 base, alt_u32 clk, alt_u32 speed) {
   21644:	defff904 	addi	sp,sp,-28
   21648:	dfc00615 	stw	ra,24(sp)
   2164c:	df000515 	stw	fp,20(sp)
   21650:	df000504 	addi	fp,sp,20
   21654:	e13ffe15 	stw	r4,-8(fp)
   21658:	e17ffd15 	stw	r5,-12(fp)
   2165c:	e1bffc15 	stw	r6,-16(fp)
	alt_u32 prescale = (clk / (5 * speed)) - 1;
   21660:	e0fffc17 	ldw	r3,-16(fp)
   21664:	1805883a 	mov	r2,r3
   21668:	100490ba 	slli	r2,r2,2
   2166c:	10c5883a 	add	r2,r2,r3
   21670:	100b883a 	mov	r5,r2
   21674:	e13ffd17 	ldw	r4,-12(fp)
   21678:	0021c180 	call	21c18 <__udivsi3>
   2167c:	10bfffc4 	addi	r2,r2,-1
   21680:	e0bfff15 	stw	r2,-4(fp)
#ifdef  I2C_DEBUG
	printf(
   21684:	e0bfff17 	ldw	r2,-4(fp)
   21688:	d8800015 	stw	r2,0(sp)
   2168c:	e1fffc17 	ldw	r7,-16(fp)
   21690:	e1bffd17 	ldw	r6,-12(fp)
   21694:	e17ffe17 	ldw	r5,-8(fp)
   21698:	010000b4 	movhi	r4,2
   2169c:	21106f04 	addi	r4,r4,16828
   216a0:	0021d340 	call	21d34 <printf>
			" Initializing  I2C at 0x%x, \n\twith clock speed 0x%x \n\tand SCL speed 0x%x \n\tand prescale 0x%x\n",
			base, clk, speed, prescale);
#endif
	IOWR_I2C_OPENCORES_CTR(base, 0x00); /* turn off the core*/
   216a4:	e0bffe17 	ldw	r2,-8(fp)
   216a8:	10800204 	addi	r2,r2,8
   216ac:	0007883a 	mov	r3,zero
   216b0:	10c00035 	stwio	r3,0(r2)

	IOWR_I2C_OPENCORES_CR(base, I2C_OPENCORES_CR_IACK_MSK); /* clear any penning IRQ*/
   216b4:	e0bffe17 	ldw	r2,-8(fp)
   216b8:	10800404 	addi	r2,r2,16
   216bc:	1007883a 	mov	r3,r2
   216c0:	00800044 	movi	r2,1
   216c4:	18800035 	stwio	r2,0(r3)

	IOWR_I2C_OPENCORES_PRERLO(base, (0xff & prescale)); /* load low prescale bit*/
   216c8:	e0bffe17 	ldw	r2,-8(fp)
   216cc:	e0ffff17 	ldw	r3,-4(fp)
   216d0:	18c03fcc 	andi	r3,r3,255
   216d4:	10c00035 	stwio	r3,0(r2)

	IOWR_I2C_OPENCORES_PRERHI(base, (0xff & (prescale >> 8))); /* load upper prescale bit */
   216d8:	e0bffe17 	ldw	r2,-8(fp)
   216dc:	10800104 	addi	r2,r2,4
   216e0:	1007883a 	mov	r3,r2
   216e4:	e0bfff17 	ldw	r2,-4(fp)
   216e8:	1004d23a 	srli	r2,r2,8
   216ec:	10803fcc 	andi	r2,r2,255
   216f0:	18800035 	stwio	r2,0(r3)

	IOWR_I2C_OPENCORES_CTR(base, I2C_OPENCORES_CTR_EN_MSK); /* turn on the core*/
   216f4:	e0bffe17 	ldw	r2,-8(fp)
   216f8:	10800204 	addi	r2,r2,8
   216fc:	1007883a 	mov	r3,r2
   21700:	00802004 	movi	r2,128
   21704:	18800035 	stwio	r2,0(r3)


	// reset
	oc_i2c_init_ex(I2CA_BASE_1, clk, speed);
   21708:	e0bffd17 	ldw	r2,-12(fp)
   2170c:	e0fffc17 	ldw	r3,-16(fp)
   21710:	180d883a 	mov	r6,r3
   21714:	100b883a 	mov	r5,r2
   21718:	01000134 	movhi	r4,4
   2171c:	21044004 	addi	r4,r4,4352
   21720:	00203600 	call	20360 <oc_i2c_init_ex>

}
   21724:	0001883a 	nop
   21728:	e037883a 	mov	sp,fp
   2172c:	dfc00117 	ldw	ra,4(sp)
   21730:	df000017 	ldw	fp,0(sp)
   21734:	dec00204 	addi	sp,sp,8
   21738:	f800283a 	ret

0002173c <myI2CReadWrite>:

	   @return returns result of I2C communication

	   @details
 */
uint8_t myI2CReadWrite(alt_u8 RW, alt_u8 RegAddr, uint8_t *pdata, alt_u16 size) {
   2173c:	defff904 	addi	sp,sp,-28
   21740:	dfc00615 	stw	ra,24(sp)
   21744:	df000515 	stw	fp,20(sp)
   21748:	df000504 	addi	fp,sp,20
   2174c:	2005883a 	mov	r2,r4
   21750:	2809883a 	mov	r4,r5
   21754:	e1bffc15 	stw	r6,-16(fp)
   21758:	3807883a 	mov	r3,r7
   2175c:	e0bffe05 	stb	r2,-8(fp)
   21760:	2005883a 	mov	r2,r4
   21764:	e0bffd05 	stb	r2,-12(fp)
   21768:	1805883a 	mov	r2,r3
   2176c:	e0bffb0d 	sth	r2,-20(fp)
	printf("annnnnn");
   21770:	010000b4 	movhi	r4,2
   21774:	21108704 	addi	r4,r4,16924
   21778:	0021d340 	call	21d34 <printf>
	uint8_t i=0;
   2177c:	e03fffc5 	stb	zero,-1(fp)
	if (RW == 1) {
   21780:	e0bffe03 	ldbu	r2,-8(fp)
   21784:	10800058 	cmpnei	r2,r2,1
   21788:	1000241e 	bne	r2,zero,2181c <myI2CReadWrite+0xe0>
		i = 0;
   2178c:	e03fffc5 	stb	zero,-1(fp)
		Water_I2C_start(I2CA_BASE_1,0x4Cu,0);
   21790:	000d883a 	mov	r6,zero
   21794:	01401304 	movi	r5,76
   21798:	01000134 	movhi	r4,4
   2179c:	21044004 	addi	r4,r4,4352
   217a0:	002189c0 	call	2189c <Water_I2C_start>
		Water_I2C_write(I2CA_BASE_1,RegAddr,0);
   217a4:	e0bffd03 	ldbu	r2,-12(fp)
   217a8:	000d883a 	mov	r6,zero
   217ac:	100b883a 	mov	r5,r2
   217b0:	0009883a 	mov	r4,zero
   217b4:	0021a240 	call	21a24 <Water_I2C_write>
		Water_I2C_start(I2CA_BASE_1,0x4Cu,0);
   217b8:	000d883a 	mov	r6,zero
   217bc:	01401304 	movi	r5,76
   217c0:	01000134 	movhi	r4,4
   217c4:	21044004 	addi	r4,r4,4352
   217c8:	002189c0 	call	2189c <Water_I2C_start>
		while (i <size){
   217cc:	00000e06 	br	21808 <myI2CReadWrite+0xcc>
			pdata[i]= Water_I2C_read(RegAddr,size);
   217d0:	e0bffd03 	ldbu	r2,-12(fp)
   217d4:	e0fffb0b 	ldhu	r3,-20(fp)
   217d8:	180b883a 	mov	r5,r3
   217dc:	1009883a 	mov	r4,r2
   217e0:	00219780 	call	21978 <Water_I2C_read>
   217e4:	1009883a 	mov	r4,r2
   217e8:	e0bfffc3 	ldbu	r2,-1(fp)
   217ec:	e0fffc17 	ldw	r3,-16(fp)
   217f0:	1885883a 	add	r2,r3,r2
   217f4:	2007883a 	mov	r3,r4
   217f8:	10c00005 	stb	r3,0(r2)
		//	printf("aabbbeeyyyy \n%d",pdata[i]);
			i=i+1;
   217fc:	e0bfffc3 	ldbu	r2,-1(fp)
   21800:	10800044 	addi	r2,r2,1
   21804:	e0bfffc5 	stb	r2,-1(fp)
		while (i <size){
   21808:	e0ffffc3 	ldbu	r3,-1(fp)
   2180c:	e0bffb0b 	ldhu	r2,-20(fp)
   21810:	18ffffcc 	andi	r3,r3,65535
   21814:	18bfee36 	bltu	r3,r2,217d0 <myI2CReadWrite+0x94>
   21818:	00001a06 	br	21884 <myI2CReadWrite+0x148>
		}

	} else if (RW == 0) {
   2181c:	e0bffe03 	ldbu	r2,-8(fp)
   21820:	1000181e 	bne	r2,zero,21884 <myI2CReadWrite+0x148>

		Water_I2C_start(I2CA_BASE_1,0x4Cu,0);
   21824:	000d883a 	mov	r6,zero
   21828:	01401304 	movi	r5,76
   2182c:	01000134 	movhi	r4,4
   21830:	21044004 	addi	r4,r4,4352
   21834:	002189c0 	call	2189c <Water_I2C_start>
		for (i = 0; i < size; i++){
   21838:	e03fffc5 	stb	zero,-1(fp)
   2183c:	00000c06 	br	21870 <myI2CReadWrite+0x134>
			Water_I2C_write(RegAddr,pdata[i],0);
   21840:	e13ffd03 	ldbu	r4,-12(fp)
   21844:	e0bfffc3 	ldbu	r2,-1(fp)
   21848:	e0fffc17 	ldw	r3,-16(fp)
   2184c:	1885883a 	add	r2,r3,r2
   21850:	10800003 	ldbu	r2,0(r2)
   21854:	10803fcc 	andi	r2,r2,255
   21858:	000d883a 	mov	r6,zero
   2185c:	100b883a 	mov	r5,r2
   21860:	0021a240 	call	21a24 <Water_I2C_write>
		for (i = 0; i < size; i++){
   21864:	e0bfffc3 	ldbu	r2,-1(fp)
   21868:	10800044 	addi	r2,r2,1
   2186c:	e0bfffc5 	stb	r2,-1(fp)
   21870:	e0ffffc3 	ldbu	r3,-1(fp)
   21874:	e0bffb0b 	ldhu	r2,-20(fp)
   21878:	18ffffcc 	andi	r3,r3,65535
   2187c:	18bff036 	bltu	r3,r2,21840 <myI2CReadWrite+0x104>
		}
		i = 0;
   21880:	e03fffc5 	stb	zero,-1(fp)
	}
	return 0;
   21884:	0005883a 	mov	r2,zero
}
   21888:	e037883a 	mov	sp,fp
   2188c:	dfc00117 	ldw	ra,4(sp)
   21890:	df000017 	ldw	fp,0(sp)
   21894:	dec00204 	addi	sp,sp,8
   21898:	f800283a 	ret

0002189c <Water_I2C_start>:
 return value
 0 if address is acknowledged
 1 if address was not acknowledged0x50
 15-OCT-07 initial release
 *****************************************************************/
int Water_I2C_start(alt_u32 base, alt_u32 add, alt_u8 read) {
   2189c:	defffb04 	addi	sp,sp,-20
   218a0:	dfc00415 	stw	ra,16(sp)
   218a4:	df000315 	stw	fp,12(sp)
   218a8:	df000304 	addi	fp,sp,12
   218ac:	e13fff15 	stw	r4,-4(fp)
   218b0:	e17ffe15 	stw	r5,-8(fp)
   218b4:	3005883a 	mov	r2,r6
   218b8:	e0bffd05 	stb	r2,-12(fp)
#ifdef  I2C_DEBUG
	printf(
   218bc:	e0bffd03 	ldbu	r2,-12(fp)
   218c0:	100f883a 	mov	r7,r2
   218c4:	e1bffe17 	ldw	r6,-8(fp)
   218c8:	e17fff17 	ldw	r5,-4(fp)
   218cc:	010000b4 	movhi	r4,2
   218d0:	21108904 	addi	r4,r4,16932
   218d4:	0021d340 	call	21d34 <printf>
			" Start  I2C at 0x%x, \n\twith address 0x%x \n\tand read 0x%x \n\tand prescale 0x%x\n",
			base, add, read);
#endif

	/* transmit the address shifted by one and the read/write bit*/
	IOWR_I2C_OPENCORES_TXR(base, ((add << 1) + (0x1 & read)));
   218d8:	e0bfff17 	ldw	r2,-4(fp)
   218dc:	10800304 	addi	r2,r2,12
   218e0:	1007883a 	mov	r3,r2
   218e4:	e0bffe17 	ldw	r2,-8(fp)
   218e8:	1085883a 	add	r2,r2,r2
   218ec:	1009883a 	mov	r4,r2
   218f0:	e0bffd03 	ldbu	r2,-12(fp)
   218f4:	1080004c 	andi	r2,r2,1
   218f8:	2085883a 	add	r2,r4,r2
   218fc:	18800035 	stwio	r2,0(r3)

	/* set start and write  bits which will start the transaction*/
	IOWR_I2C_OPENCORES_CR(base,
   21900:	e0bfff17 	ldw	r2,-4(fp)
   21904:	10800404 	addi	r2,r2,16
   21908:	1007883a 	mov	r3,r2
   2190c:	00802404 	movi	r2,144
   21910:	18800035 	stwio	r2,0(r3)
			I2C_OPENCORES_CR_STA_MSK | I2C_OPENCORES_CR_WR_MSK);

	/* wait for the transaction to be over.*/
	while ( IORD_I2C_OPENCORES_SR(base) & I2C_OPENCORES_SR_TIP_MSK)
   21914:	0001883a 	nop
   21918:	e0bfff17 	ldw	r2,-4(fp)
   2191c:	10800404 	addi	r2,r2,16
   21920:	10800037 	ldwio	r2,0(r2)
   21924:	1080008c 	andi	r2,r2,2
   21928:	103ffb1e 	bne	r2,zero,21918 <Water_I2C_start+0x7c>
		;

	/* now check to see if the address was acknowledged */
	if(IORD_I2C_OPENCORES_SR(base) & I2C_OPENCORES_SR_RXNACK_MSK)
   2192c:	e0bfff17 	ldw	r2,-4(fp)
   21930:	10800404 	addi	r2,r2,16
   21934:	10800037 	ldwio	r2,0(r2)
   21938:	1080200c 	andi	r2,r2,128
   2193c:	10000526 	beq	r2,zero,21954 <Water_I2C_start+0xb8>
	{
#ifdef  I2C_DEBUG
		printf("\tNOACK\n");
   21940:	010000b4 	movhi	r4,2
   21944:	21109d04 	addi	r4,r4,17012
   21948:	0021dfc0 	call	21dfc <puts>
#endif
		return (I2C_NOACK);
   2194c:	00800044 	movi	r2,1
   21950:	00000406 	br	21964 <Water_I2C_start+0xc8>
	}
	else
	{
#ifdef  I2C_DEBUG
		printf("\tACK\n");
   21954:	010000b4 	movhi	r4,2
   21958:	21109f04 	addi	r4,r4,17020
   2195c:	0021dfc0 	call	21dfc <puts>
#endif
		return (I2C_ACK);
   21960:	0005883a 	mov	r2,zero
	}
}
   21964:	e037883a 	mov	sp,fp
   21968:	dfc00117 	ldw	ra,4(sp)
   2196c:	df000017 	ldw	fp,0(sp)
   21970:	dec00204 	addi	sp,sp,8
   21974:	f800283a 	ret

00021978 <Water_I2C_read>:

 return value
 byte read back.
 15-OCT-07 initial release
 *****************************************************************/
alt_u32 Water_I2C_read(alt_u8 base, alt_u16 last) {
   21978:	defffc04 	addi	sp,sp,-16
   2197c:	dfc00315 	stw	ra,12(sp)
   21980:	df000215 	stw	fp,8(sp)
   21984:	df000204 	addi	fp,sp,8
   21988:	2005883a 	mov	r2,r4
   2198c:	2807883a 	mov	r3,r5
   21990:	e0bfff05 	stb	r2,-4(fp)
   21994:	1805883a 	mov	r2,r3
   21998:	e0bffe0d 	sth	r2,-8(fp)
#ifdef  I2C_DEBUG
	printf(" Read I2C at 0x%x, \n\twith last0x%x\n", base, last);
   2199c:	e0bfff03 	ldbu	r2,-4(fp)
   219a0:	e0fffe0b 	ldhu	r3,-8(fp)
   219a4:	180d883a 	mov	r6,r3
   219a8:	100b883a 	mov	r5,r2
   219ac:	010000b4 	movhi	r4,2
   219b0:	2110a104 	addi	r4,r4,17028
   219b4:	0021d340 	call	21d34 <printf>
#endif
	if (last) {
   219b8:	e0bffe0b 	ldhu	r2,-8(fp)
   219bc:	10000626 	beq	r2,zero,219d8 <Water_I2C_read+0x60>
		/* start a read and no ack and stop bit*/
		IOWR_I2C_OPENCORES_CR(base,
   219c0:	e0bfff03 	ldbu	r2,-4(fp)
   219c4:	10800404 	addi	r2,r2,16
   219c8:	1007883a 	mov	r3,r2
   219cc:	00801a04 	movi	r2,104
   219d0:	18800035 	stwio	r2,0(r3)
   219d4:	00000506 	br	219ec <Water_I2C_read+0x74>
				I2C_OPENCORES_CR_RD_MSK | I2C_OPENCORES_CR_NACK_MSK | I2C_OPENCORES_CR_STO_MSK);
	} else {
		/* start read*/
		IOWR_I2C_OPENCORES_CR(base, I2C_OPENCORES_CR_RD_MSK);
   219d8:	e0bfff03 	ldbu	r2,-4(fp)
   219dc:	10800404 	addi	r2,r2,16
   219e0:	1007883a 	mov	r3,r2
   219e4:	00800804 	movi	r2,32
   219e8:	18800035 	stwio	r2,0(r3)
	}
	/* wait for the trnasaction to be over.*/
	while ( IORD_I2C_OPENCORES_SR(base) & I2C_OPENCORES_SR_TIP_MSK)
   219ec:	0001883a 	nop
   219f0:	e0bfff03 	ldbu	r2,-4(fp)
   219f4:	10800404 	addi	r2,r2,16
   219f8:	10800037 	ldwio	r2,0(r2)
   219fc:	1080008c 	andi	r2,r2,2
   21a00:	103ffb1e 	bne	r2,zero,219f0 <Water_I2C_read+0x78>
		;
	/* now read the data */
	return (IORD_I2C_OPENCORES_RXR(base));
   21a04:	e0bfff03 	ldbu	r2,-4(fp)
   21a08:	10800304 	addi	r2,r2,12
   21a0c:	10800037 	ldwio	r2,0(r2)

}
   21a10:	e037883a 	mov	sp,fp
   21a14:	dfc00117 	ldw	ra,4(sp)
   21a18:	df000017 	ldw	fp,0(sp)
   21a1c:	dec00204 	addi	sp,sp,8
   21a20:	f800283a 	ret

00021a24 <Water_I2C_write>:
 return value
 0 if address is acknowledged
 1 if address was not acknowledged
 15-OCT-07 initial release
 *****************************************************************/
uint8_t Water_I2C_write(alt_u8 base, uint8_t data, alt_u16 last) {
   21a24:	defffb04 	addi	sp,sp,-20
   21a28:	dfc00415 	stw	ra,16(sp)
   21a2c:	df000315 	stw	fp,12(sp)
   21a30:	df000304 	addi	fp,sp,12
   21a34:	2005883a 	mov	r2,r4
   21a38:	2809883a 	mov	r4,r5
   21a3c:	3007883a 	mov	r3,r6
   21a40:	e0bfff05 	stb	r2,-4(fp)
   21a44:	2005883a 	mov	r2,r4
   21a48:	e0bffe05 	stb	r2,-8(fp)
   21a4c:	1805883a 	mov	r2,r3
   21a50:	e0bffd0d 	sth	r2,-12(fp)
#ifdef  I2C_DEBUG
	printf(" Read I2C at 0x%x, \n\twith data 0x%x,\n\twith last0x%x\n", base,
   21a54:	e0bfff03 	ldbu	r2,-4(fp)
   21a58:	e0fffe03 	ldbu	r3,-8(fp)
   21a5c:	e13ffd0b 	ldhu	r4,-12(fp)
   21a60:	200f883a 	mov	r7,r4
   21a64:	180d883a 	mov	r6,r3
   21a68:	100b883a 	mov	r5,r2
   21a6c:	010000b4 	movhi	r4,2
   21a70:	2110aa04 	addi	r4,r4,17064
   21a74:	0021d340 	call	21d34 <printf>
			data, last);
#endif
	/* transmit the data*/
	IOWR_I2C_OPENCORES_TXR(base, data);
   21a78:	e0bfff03 	ldbu	r2,-4(fp)
   21a7c:	10800304 	addi	r2,r2,12
   21a80:	1007883a 	mov	r3,r2
   21a84:	e0bffe03 	ldbu	r2,-8(fp)
   21a88:	18800035 	stwio	r2,0(r3)

	if (last) {
   21a8c:	e0bffd0b 	ldhu	r2,-12(fp)
   21a90:	10000626 	beq	r2,zero,21aac <Water_I2C_write+0x88>
		/* start a read and no ack and stop bit*/
		IOWR_I2C_OPENCORES_CR(base,
   21a94:	e0bfff03 	ldbu	r2,-4(fp)
   21a98:	10800404 	addi	r2,r2,16
   21a9c:	1007883a 	mov	r3,r2
   21aa0:	00801404 	movi	r2,80
   21aa4:	18800035 	stwio	r2,0(r3)
   21aa8:	00000506 	br	21ac0 <Water_I2C_write+0x9c>
				I2C_OPENCORES_CR_WR_MSK | I2C_OPENCORES_CR_STO_MSK);
	} else {
		/* start read*/
		IOWR_I2C_OPENCORES_CR(base, I2C_OPENCORES_CR_WR_MSK);
   21aac:	e0bfff03 	ldbu	r2,-4(fp)
   21ab0:	10800404 	addi	r2,r2,16
   21ab4:	1007883a 	mov	r3,r2
   21ab8:	00800404 	movi	r2,16
   21abc:	18800035 	stwio	r2,0(r3)
	}
	/* wait for the trnasaction to be over.*/
	while ( IORD_I2C_OPENCORES_SR(base) & I2C_OPENCORES_SR_TIP_MSK)
   21ac0:	0001883a 	nop
   21ac4:	e0bfff03 	ldbu	r2,-4(fp)
   21ac8:	10800404 	addi	r2,r2,16
   21acc:	10800037 	ldwio	r2,0(r2)
   21ad0:	1080008c 	andi	r2,r2,2
   21ad4:	103ffb1e 	bne	r2,zero,21ac4 <Water_I2C_write+0xa0>
		;

	/* now check to see if the address was acknowledged */
	if(IORD_I2C_OPENCORES_SR(base) & I2C_OPENCORES_SR_RXNACK_MSK)
   21ad8:	e0bfff03 	ldbu	r2,-4(fp)
   21adc:	10800404 	addi	r2,r2,16
   21ae0:	10800037 	ldwio	r2,0(r2)
   21ae4:	1080200c 	andi	r2,r2,128
   21ae8:	10000526 	beq	r2,zero,21b00 <Water_I2C_write+0xdc>
	{
#ifdef  I2C_DEBUG
		printf("\tNOACK\n");
   21aec:	010000b4 	movhi	r4,2
   21af0:	21109d04 	addi	r4,r4,17012
   21af4:	0021dfc0 	call	21dfc <puts>
#endif
		return (I2C_NOACK);
   21af8:	00800044 	movi	r2,1
   21afc:	00000406 	br	21b10 <Water_I2C_write+0xec>
	}
	else
	{
#ifdef  I2C_DEBUG
		printf("\tACK\n");
   21b00:	010000b4 	movhi	r4,2
   21b04:	21109f04 	addi	r4,r4,17020
   21b08:	0021dfc0 	call	21dfc <puts>
#endif
		return (I2C_ACK);
   21b0c:	0005883a 	mov	r2,zero
	}

}
   21b10:	e037883a 	mov	sp,fp
   21b14:	dfc00117 	ldw	ra,4(sp)
   21b18:	df000017 	ldw	fp,0(sp)
   21b1c:	dec00204 	addi	sp,sp,8
   21b20:	f800283a 	ret

00021b24 <__divsi3>:
   21b24:	20001a16 	blt	r4,zero,21b90 <__divsi3+0x6c>
   21b28:	000f883a 	mov	r7,zero
   21b2c:	2800020e 	bge	r5,zero,21b38 <__divsi3+0x14>
   21b30:	014bc83a 	sub	r5,zero,r5
   21b34:	39c0005c 	xori	r7,r7,1
   21b38:	200d883a 	mov	r6,r4
   21b3c:	00c00044 	movi	r3,1
   21b40:	2900092e 	bgeu	r5,r4,21b68 <__divsi3+0x44>
   21b44:	00800804 	movi	r2,32
   21b48:	00c00044 	movi	r3,1
   21b4c:	00000106 	br	21b54 <__divsi3+0x30>
   21b50:	10001226 	beq	r2,zero,21b9c <__divsi3+0x78>
   21b54:	294b883a 	add	r5,r5,r5
   21b58:	10bfffc4 	addi	r2,r2,-1
   21b5c:	18c7883a 	add	r3,r3,r3
   21b60:	293ffb36 	bltu	r5,r4,21b50 <__divsi3+0x2c>
   21b64:	18000d26 	beq	r3,zero,21b9c <__divsi3+0x78>
   21b68:	0005883a 	mov	r2,zero
   21b6c:	31400236 	bltu	r6,r5,21b78 <__divsi3+0x54>
   21b70:	314dc83a 	sub	r6,r6,r5
   21b74:	10c4b03a 	or	r2,r2,r3
   21b78:	1806d07a 	srli	r3,r3,1
   21b7c:	280ad07a 	srli	r5,r5,1
   21b80:	183ffa1e 	bne	r3,zero,21b6c <__divsi3+0x48>
   21b84:	38000126 	beq	r7,zero,21b8c <__divsi3+0x68>
   21b88:	0085c83a 	sub	r2,zero,r2
   21b8c:	f800283a 	ret
   21b90:	0109c83a 	sub	r4,zero,r4
   21b94:	01c00044 	movi	r7,1
   21b98:	003fe406 	br	21b2c <__divsi3+0x8>
   21b9c:	0005883a 	mov	r2,zero
   21ba0:	003ff806 	br	21b84 <__divsi3+0x60>

00021ba4 <__modsi3>:
   21ba4:	20001916 	blt	r4,zero,21c0c <__modsi3+0x68>
   21ba8:	000f883a 	mov	r7,zero
   21bac:	2005883a 	mov	r2,r4
   21bb0:	2800010e 	bge	r5,zero,21bb8 <__modsi3+0x14>
   21bb4:	014bc83a 	sub	r5,zero,r5
   21bb8:	00c00044 	movi	r3,1
   21bbc:	2900092e 	bgeu	r5,r4,21be4 <__modsi3+0x40>
   21bc0:	01800804 	movi	r6,32
   21bc4:	00c00044 	movi	r3,1
   21bc8:	00000106 	br	21bd0 <__modsi3+0x2c>
   21bcc:	30000d26 	beq	r6,zero,21c04 <__modsi3+0x60>
   21bd0:	294b883a 	add	r5,r5,r5
   21bd4:	31bfffc4 	addi	r6,r6,-1
   21bd8:	18c7883a 	add	r3,r3,r3
   21bdc:	293ffb36 	bltu	r5,r4,21bcc <__modsi3+0x28>
   21be0:	18000826 	beq	r3,zero,21c04 <__modsi3+0x60>
   21be4:	1806d07a 	srli	r3,r3,1
   21be8:	11400136 	bltu	r2,r5,21bf0 <__modsi3+0x4c>
   21bec:	1145c83a 	sub	r2,r2,r5
   21bf0:	280ad07a 	srli	r5,r5,1
   21bf4:	183ffb1e 	bne	r3,zero,21be4 <__modsi3+0x40>
   21bf8:	38000126 	beq	r7,zero,21c00 <__modsi3+0x5c>
   21bfc:	0085c83a 	sub	r2,zero,r2
   21c00:	f800283a 	ret
   21c04:	2005883a 	mov	r2,r4
   21c08:	003ffb06 	br	21bf8 <__modsi3+0x54>
   21c0c:	0109c83a 	sub	r4,zero,r4
   21c10:	01c00044 	movi	r7,1
   21c14:	003fe506 	br	21bac <__modsi3+0x8>

00021c18 <__udivsi3>:
   21c18:	200d883a 	mov	r6,r4
   21c1c:	2900152e 	bgeu	r5,r4,21c74 <__udivsi3+0x5c>
   21c20:	28001416 	blt	r5,zero,21c74 <__udivsi3+0x5c>
   21c24:	00800804 	movi	r2,32
   21c28:	00c00044 	movi	r3,1
   21c2c:	00000206 	br	21c38 <__udivsi3+0x20>
   21c30:	10000e26 	beq	r2,zero,21c6c <__udivsi3+0x54>
   21c34:	28000516 	blt	r5,zero,21c4c <__udivsi3+0x34>
   21c38:	294b883a 	add	r5,r5,r5
   21c3c:	10bfffc4 	addi	r2,r2,-1
   21c40:	18c7883a 	add	r3,r3,r3
   21c44:	293ffa36 	bltu	r5,r4,21c30 <__udivsi3+0x18>
   21c48:	18000826 	beq	r3,zero,21c6c <__udivsi3+0x54>
   21c4c:	0005883a 	mov	r2,zero
   21c50:	31400236 	bltu	r6,r5,21c5c <__udivsi3+0x44>
   21c54:	314dc83a 	sub	r6,r6,r5
   21c58:	10c4b03a 	or	r2,r2,r3
   21c5c:	1806d07a 	srli	r3,r3,1
   21c60:	280ad07a 	srli	r5,r5,1
   21c64:	183ffa1e 	bne	r3,zero,21c50 <__udivsi3+0x38>
   21c68:	f800283a 	ret
   21c6c:	0005883a 	mov	r2,zero
   21c70:	f800283a 	ret
   21c74:	00c00044 	movi	r3,1
   21c78:	003ff406 	br	21c4c <__udivsi3+0x34>

00021c7c <__umodsi3>:
   21c7c:	2005883a 	mov	r2,r4
   21c80:	2900132e 	bgeu	r5,r4,21cd0 <__umodsi3+0x54>
   21c84:	28001216 	blt	r5,zero,21cd0 <__umodsi3+0x54>
   21c88:	01800804 	movi	r6,32
   21c8c:	00c00044 	movi	r3,1
   21c90:	00000206 	br	21c9c <__umodsi3+0x20>
   21c94:	30000c26 	beq	r6,zero,21cc8 <__umodsi3+0x4c>
   21c98:	28000516 	blt	r5,zero,21cb0 <__umodsi3+0x34>
   21c9c:	294b883a 	add	r5,r5,r5
   21ca0:	31bfffc4 	addi	r6,r6,-1
   21ca4:	18c7883a 	add	r3,r3,r3
   21ca8:	293ffa36 	bltu	r5,r4,21c94 <__umodsi3+0x18>
   21cac:	18000626 	beq	r3,zero,21cc8 <__umodsi3+0x4c>
   21cb0:	1806d07a 	srli	r3,r3,1
   21cb4:	11400136 	bltu	r2,r5,21cbc <__umodsi3+0x40>
   21cb8:	1145c83a 	sub	r2,r2,r5
   21cbc:	280ad07a 	srli	r5,r5,1
   21cc0:	183ffb1e 	bne	r3,zero,21cb0 <__umodsi3+0x34>
   21cc4:	f800283a 	ret
   21cc8:	2005883a 	mov	r2,r4
   21ccc:	f800283a 	ret
   21cd0:	00c00044 	movi	r3,1
   21cd4:	003ff606 	br	21cb0 <__umodsi3+0x34>

00021cd8 <memset>:
   21cd8:	2005883a 	mov	r2,r4
   21cdc:	218d883a 	add	r6,r4,r6
   21ce0:	2007883a 	mov	r3,r4
   21ce4:	1980011e 	bne	r3,r6,21cec <memset+0x14>
   21ce8:	f800283a 	ret
   21cec:	18c00044 	addi	r3,r3,1
   21cf0:	197fffc5 	stb	r5,-1(r3)
   21cf4:	003ffb06 	br	21ce4 <memset+0xc>

00021cf8 <_printf_r>:
   21cf8:	defffd04 	addi	sp,sp,-12
   21cfc:	dfc00015 	stw	ra,0(sp)
   21d00:	d9800115 	stw	r6,4(sp)
   21d04:	d9c00215 	stw	r7,8(sp)
   21d08:	21800217 	ldw	r6,8(r4)
   21d0c:	00c000b4 	movhi	r3,2
   21d10:	18c8ee04 	addi	r3,r3,9144
   21d14:	30c00115 	stw	r3,4(r6)
   21d18:	280d883a 	mov	r6,r5
   21d1c:	21400217 	ldw	r5,8(r4)
   21d20:	d9c00104 	addi	r7,sp,4
   21d24:	0021e940 	call	21e94 <___vfprintf_internal_r>
   21d28:	dfc00017 	ldw	ra,0(sp)
   21d2c:	dec00304 	addi	sp,sp,12
   21d30:	f800283a 	ret

00021d34 <printf>:
   21d34:	defffc04 	addi	sp,sp,-16
   21d38:	dfc00015 	stw	ra,0(sp)
   21d3c:	d9400115 	stw	r5,4(sp)
   21d40:	d9800215 	stw	r6,8(sp)
   21d44:	d9c00315 	stw	r7,12(sp)
   21d48:	008000b4 	movhi	r2,2
   21d4c:	10d17917 	ldw	r3,17892(r2)
   21d50:	008000b4 	movhi	r2,2
   21d54:	1088ee04 	addi	r2,r2,9144
   21d58:	19400217 	ldw	r5,8(r3)
   21d5c:	d9800104 	addi	r6,sp,4
   21d60:	28800115 	stw	r2,4(r5)
   21d64:	200b883a 	mov	r5,r4
   21d68:	19000217 	ldw	r4,8(r3)
   21d6c:	00223a00 	call	223a0 <__vfprintf_internal>
   21d70:	dfc00017 	ldw	ra,0(sp)
   21d74:	dec00404 	addi	sp,sp,16
   21d78:	f800283a 	ret

00021d7c <_puts_r>:
   21d7c:	defffd04 	addi	sp,sp,-12
   21d80:	dc000015 	stw	r16,0(sp)
   21d84:	2021883a 	mov	r16,r4
   21d88:	2809883a 	mov	r4,r5
   21d8c:	dfc00215 	stw	ra,8(sp)
   21d90:	dc400115 	stw	r17,4(sp)
   21d94:	2823883a 	mov	r17,r5
   21d98:	0021e0c0 	call	21e0c <strlen>
   21d9c:	81400217 	ldw	r5,8(r16)
   21da0:	00c000b4 	movhi	r3,2
   21da4:	18c8ee04 	addi	r3,r3,9144
   21da8:	28c00115 	stw	r3,4(r5)
   21dac:	100f883a 	mov	r7,r2
   21db0:	880d883a 	mov	r6,r17
   21db4:	8009883a 	mov	r4,r16
   21db8:	00223b80 	call	223b8 <__sfvwrite_small_dev>
   21dbc:	10ffffe0 	cmpeqi	r3,r2,-1
   21dc0:	1800091e 	bne	r3,zero,21de8 <_puts_r+0x6c>
   21dc4:	81400217 	ldw	r5,8(r16)
   21dc8:	018000b4 	movhi	r6,2
   21dcc:	01c00044 	movi	r7,1
   21dd0:	28800117 	ldw	r2,4(r5)
   21dd4:	3190b804 	addi	r6,r6,17120
   21dd8:	8009883a 	mov	r4,r16
   21ddc:	103ee83a 	callr	r2
   21de0:	10bfffe0 	cmpeqi	r2,r2,-1
   21de4:	0085c83a 	sub	r2,zero,r2
   21de8:	dfc00217 	ldw	ra,8(sp)
   21dec:	dc400117 	ldw	r17,4(sp)
   21df0:	dc000017 	ldw	r16,0(sp)
   21df4:	dec00304 	addi	sp,sp,12
   21df8:	f800283a 	ret

00021dfc <puts>:
   21dfc:	008000b4 	movhi	r2,2
   21e00:	200b883a 	mov	r5,r4
   21e04:	11117917 	ldw	r4,17892(r2)
   21e08:	0021d7c1 	jmpi	21d7c <_puts_r>

00021e0c <strlen>:
   21e0c:	2005883a 	mov	r2,r4
   21e10:	10c00007 	ldb	r3,0(r2)
   21e14:	1800021e 	bne	r3,zero,21e20 <strlen+0x14>
   21e18:	1105c83a 	sub	r2,r2,r4
   21e1c:	f800283a 	ret
   21e20:	10800044 	addi	r2,r2,1
   21e24:	003ffa06 	br	21e10 <strlen+0x4>

00021e28 <print_repeat>:
   21e28:	defffb04 	addi	sp,sp,-20
   21e2c:	dc800315 	stw	r18,12(sp)
   21e30:	dc400215 	stw	r17,8(sp)
   21e34:	dc000115 	stw	r16,4(sp)
   21e38:	dfc00415 	stw	ra,16(sp)
   21e3c:	2025883a 	mov	r18,r4
   21e40:	2823883a 	mov	r17,r5
   21e44:	d9800005 	stb	r6,0(sp)
   21e48:	3821883a 	mov	r16,r7
   21e4c:	04000716 	blt	zero,r16,21e6c <print_repeat+0x44>
   21e50:	0005883a 	mov	r2,zero
   21e54:	dfc00417 	ldw	ra,16(sp)
   21e58:	dc800317 	ldw	r18,12(sp)
   21e5c:	dc400217 	ldw	r17,8(sp)
   21e60:	dc000117 	ldw	r16,4(sp)
   21e64:	dec00504 	addi	sp,sp,20
   21e68:	f800283a 	ret
   21e6c:	88800117 	ldw	r2,4(r17)
   21e70:	01c00044 	movi	r7,1
   21e74:	d80d883a 	mov	r6,sp
   21e78:	880b883a 	mov	r5,r17
   21e7c:	9009883a 	mov	r4,r18
   21e80:	103ee83a 	callr	r2
   21e84:	843fffc4 	addi	r16,r16,-1
   21e88:	103ff026 	beq	r2,zero,21e4c <print_repeat+0x24>
   21e8c:	00bfffc4 	movi	r2,-1
   21e90:	003ff006 	br	21e54 <print_repeat+0x2c>

00021e94 <___vfprintf_internal_r>:
   21e94:	deffe604 	addi	sp,sp,-104
   21e98:	df001815 	stw	fp,96(sp)
   21e9c:	ddc01715 	stw	r23,92(sp)
   21ea0:	dd801615 	stw	r22,88(sp)
   21ea4:	dd001415 	stw	r20,80(sp)
   21ea8:	dcc01315 	stw	r19,76(sp)
   21eac:	dc801215 	stw	r18,72(sp)
   21eb0:	dc401115 	stw	r17,68(sp)
   21eb4:	dc001015 	stw	r16,64(sp)
   21eb8:	dfc01915 	stw	ra,100(sp)
   21ebc:	dd401515 	stw	r21,84(sp)
   21ec0:	2021883a 	mov	r16,r4
   21ec4:	282f883a 	mov	r23,r5
   21ec8:	d9800515 	stw	r6,20(sp)
   21ecc:	3839883a 	mov	fp,r7
   21ed0:	002d883a 	mov	r22,zero
   21ed4:	d8000215 	stw	zero,8(sp)
   21ed8:	0027883a 	mov	r19,zero
   21edc:	0029883a 	mov	r20,zero
   21ee0:	0025883a 	mov	r18,zero
   21ee4:	0023883a 	mov	r17,zero
   21ee8:	d8000115 	stw	zero,4(sp)
   21eec:	d8000015 	stw	zero,0(sp)
   21ef0:	0005883a 	mov	r2,zero
   21ef4:	00000206 	br	21f00 <___vfprintf_internal_r+0x6c>
   21ef8:	114000e0 	cmpeqi	r5,r2,3
   21efc:	28003f1e 	bne	r5,zero,21ffc <___vfprintf_internal_r+0x168>
   21f00:	d8c00517 	ldw	r3,20(sp)
   21f04:	19000003 	ldbu	r4,0(r3)
   21f08:	18c00044 	addi	r3,r3,1
   21f0c:	d8c00515 	stw	r3,20(sp)
   21f10:	21803fcc 	andi	r6,r4,255
   21f14:	3180201c 	xori	r6,r6,128
   21f18:	31bfe004 	addi	r6,r6,-128
   21f1c:	30001426 	beq	r6,zero,21f70 <___vfprintf_internal_r+0xdc>
   21f20:	114000a0 	cmpeqi	r5,r2,2
   21f24:	2800231e 	bne	r5,zero,21fb4 <___vfprintf_internal_r+0x120>
   21f28:	114000c8 	cmpgei	r5,r2,3
   21f2c:	283ff21e 	bne	r5,zero,21ef8 <___vfprintf_internal_r+0x64>
   21f30:	10000426 	beq	r2,zero,21f44 <___vfprintf_internal_r+0xb0>
   21f34:	10800060 	cmpeqi	r2,r2,1
   21f38:	10001a1e 	bne	r2,zero,21fa4 <___vfprintf_internal_r+0x110>
   21f3c:	00800084 	movi	r2,2
   21f40:	003fef06 	br	21f00 <___vfprintf_internal_r+0x6c>
   21f44:	31800960 	cmpeqi	r6,r6,37
   21f48:	3000fe1e 	bne	r6,zero,22344 <___vfprintf_internal_r+0x4b0>
   21f4c:	b8800117 	ldw	r2,4(r23)
   21f50:	d9000805 	stb	r4,32(sp)
   21f54:	01c00044 	movi	r7,1
   21f58:	d9800804 	addi	r6,sp,32
   21f5c:	b80b883a 	mov	r5,r23
   21f60:	8009883a 	mov	r4,r16
   21f64:	103ee83a 	callr	r2
   21f68:	10001d26 	beq	r2,zero,21fe0 <___vfprintf_internal_r+0x14c>
   21f6c:	05bfffc4 	movi	r22,-1
   21f70:	b005883a 	mov	r2,r22
   21f74:	dfc01917 	ldw	ra,100(sp)
   21f78:	df001817 	ldw	fp,96(sp)
   21f7c:	ddc01717 	ldw	r23,92(sp)
   21f80:	dd801617 	ldw	r22,88(sp)
   21f84:	dd401517 	ldw	r21,84(sp)
   21f88:	dd001417 	ldw	r20,80(sp)
   21f8c:	dcc01317 	ldw	r19,76(sp)
   21f90:	dc801217 	ldw	r18,72(sp)
   21f94:	dc401117 	ldw	r17,68(sp)
   21f98:	dc001017 	ldw	r16,64(sp)
   21f9c:	dec01a04 	addi	sp,sp,104
   21fa0:	f800283a 	ret
   21fa4:	30800c20 	cmpeqi	r2,r6,48
   21fa8:	1000ef1e 	bne	r2,zero,22368 <___vfprintf_internal_r+0x4d4>
   21fac:	30800958 	cmpnei	r2,r6,37
   21fb0:	103fe626 	beq	r2,zero,21f4c <___vfprintf_internal_r+0xb8>
   21fb4:	217ff404 	addi	r5,r4,-48
   21fb8:	29403fcc 	andi	r5,r5,255
   21fbc:	288002a8 	cmpgeui	r2,r5,10
   21fc0:	10000b1e 	bne	r2,zero,21ff0 <___vfprintf_internal_r+0x15c>
   21fc4:	88bfffe0 	cmpeqi	r2,r17,-1
   21fc8:	1000071e 	bne	r2,zero,21fe8 <___vfprintf_internal_r+0x154>
   21fcc:	880490ba 	slli	r2,r17,2
   21fd0:	1463883a 	add	r17,r2,r17
   21fd4:	8822907a 	slli	r17,r17,1
   21fd8:	2c63883a 	add	r17,r5,r17
   21fdc:	003fd706 	br	21f3c <___vfprintf_internal_r+0xa8>
   21fe0:	b5800044 	addi	r22,r22,1
   21fe4:	003fc606 	br	21f00 <___vfprintf_internal_r+0x6c>
   21fe8:	0023883a 	mov	r17,zero
   21fec:	003ffa06 	br	21fd8 <___vfprintf_internal_r+0x144>
   21ff0:	30800ba0 	cmpeqi	r2,r6,46
   21ff4:	1000e11e 	bne	r2,zero,2237c <___vfprintf_internal_r+0x4e8>
   21ff8:	00800084 	movi	r2,2
   21ffc:	213ff404 	addi	r4,r4,-48
   22000:	21003fcc 	andi	r4,r4,255
   22004:	214002a8 	cmpgeui	r5,r4,10
   22008:	2800091e 	bne	r5,zero,22030 <___vfprintf_internal_r+0x19c>
   2200c:	917fffe0 	cmpeqi	r5,r18,-1
   22010:	2800051e 	bne	r5,zero,22028 <___vfprintf_internal_r+0x194>
   22014:	900a90ba 	slli	r5,r18,2
   22018:	2ca5883a 	add	r18,r5,r18
   2201c:	9024907a 	slli	r18,r18,1
   22020:	24a5883a 	add	r18,r4,r18
   22024:	003fb606 	br	21f00 <___vfprintf_internal_r+0x6c>
   22028:	0025883a 	mov	r18,zero
   2202c:	003ffc06 	br	22020 <___vfprintf_internal_r+0x18c>
   22030:	30801b20 	cmpeqi	r2,r6,108
   22034:	1000cf1e 	bne	r2,zero,22374 <___vfprintf_internal_r+0x4e0>
   22038:	90bfffe0 	cmpeqi	r2,r18,-1
   2203c:	10000f1e 	bne	r2,zero,2207c <___vfprintf_internal_r+0x1e8>
   22040:	d8000015 	stw	zero,0(sp)
   22044:	30801be0 	cmpeqi	r2,r6,111
   22048:	1000ce1e 	bne	r2,zero,22384 <___vfprintf_internal_r+0x4f0>
   2204c:	30801c08 	cmpgei	r2,r6,112
   22050:	1000171e 	bne	r2,zero,220b0 <___vfprintf_internal_r+0x21c>
   22054:	308018e0 	cmpeqi	r2,r6,99
   22058:	1000a31e 	bne	r2,zero,222e8 <___vfprintf_internal_r+0x454>
   2205c:	30801908 	cmpgei	r2,r6,100
   22060:	1000081e 	bne	r2,zero,22084 <___vfprintf_internal_r+0x1f0>
   22064:	31801620 	cmpeqi	r6,r6,88
   22068:	303fa126 	beq	r6,zero,21ef0 <___vfprintf_internal_r+0x5c>
   2206c:	00800044 	movi	r2,1
   22070:	d8800215 	stw	r2,8(sp)
   22074:	05000404 	movi	r20,16
   22078:	0000c306 	br	22388 <___vfprintf_internal_r+0x4f4>
   2207c:	04800044 	movi	r18,1
   22080:	003ff006 	br	22044 <___vfprintf_internal_r+0x1b0>
   22084:	30801920 	cmpeqi	r2,r6,100
   22088:	1000021e 	bne	r2,zero,22094 <___vfprintf_internal_r+0x200>
   2208c:	31801a60 	cmpeqi	r6,r6,105
   22090:	303f9726 	beq	r6,zero,21ef0 <___vfprintf_internal_r+0x5c>
   22094:	e0800104 	addi	r2,fp,4
   22098:	d8800415 	stw	r2,16(sp)
   2209c:	9800ba26 	beq	r19,zero,22388 <___vfprintf_internal_r+0x4f4>
   220a0:	e5400017 	ldw	r21,0(fp)
   220a4:	a8002216 	blt	r21,zero,22130 <___vfprintf_internal_r+0x29c>
   220a8:	04c00044 	movi	r19,1
   220ac:	0000ba06 	br	22398 <___vfprintf_internal_r+0x504>
   220b0:	30801d60 	cmpeqi	r2,r6,117
   220b4:	1000b41e 	bne	r2,zero,22388 <___vfprintf_internal_r+0x4f4>
   220b8:	30801e20 	cmpeqi	r2,r6,120
   220bc:	103fed1e 	bne	r2,zero,22074 <___vfprintf_internal_r+0x1e0>
   220c0:	31801ce0 	cmpeqi	r6,r6,115
   220c4:	303f8a26 	beq	r6,zero,21ef0 <___vfprintf_internal_r+0x5c>
   220c8:	e5400017 	ldw	r21,0(fp)
   220cc:	e0800104 	addi	r2,fp,4
   220d0:	d8800315 	stw	r2,12(sp)
   220d4:	a809883a 	mov	r4,r21
   220d8:	0021e0c0 	call	21e0c <strlen>
   220dc:	888fc83a 	sub	r7,r17,r2
   220e0:	1039883a 	mov	fp,r2
   220e4:	01c0080e 	bge	zero,r7,22108 <___vfprintf_internal_r+0x274>
   220e8:	01800804 	movi	r6,32
   220ec:	b80b883a 	mov	r5,r23
   220f0:	8009883a 	mov	r4,r16
   220f4:	d9c00415 	stw	r7,16(sp)
   220f8:	0021e280 	call	21e28 <print_repeat>
   220fc:	103f9b1e 	bne	r2,zero,21f6c <___vfprintf_internal_r+0xd8>
   22100:	d9c00417 	ldw	r7,16(sp)
   22104:	b1ed883a 	add	r22,r22,r7
   22108:	b8800117 	ldw	r2,4(r23)
   2210c:	e00f883a 	mov	r7,fp
   22110:	a80d883a 	mov	r6,r21
   22114:	b80b883a 	mov	r5,r23
   22118:	8009883a 	mov	r4,r16
   2211c:	103ee83a 	callr	r2
   22120:	103f921e 	bne	r2,zero,21f6c <___vfprintf_internal_r+0xd8>
   22124:	b72d883a 	add	r22,r22,fp
   22128:	df000317 	ldw	fp,12(sp)
   2212c:	003f7406 	br	21f00 <___vfprintf_internal_r+0x6c>
   22130:	056bc83a 	sub	r21,zero,r21
   22134:	04c00044 	movi	r19,1
   22138:	00c00044 	movi	r3,1
   2213c:	df000804 	addi	fp,sp,32
   22140:	e00d883a 	mov	r6,fp
   22144:	a8002e1e 	bne	r21,zero,22200 <___vfprintf_internal_r+0x36c>
   22148:	e185c83a 	sub	r2,fp,r6
   2214c:	d8800315 	stw	r2,12(sp)
   22150:	9085c83a 	sub	r2,r18,r2
   22154:	0080090e 	bge	zero,r2,2217c <___vfprintf_internal_r+0x2e8>
   22158:	e085883a 	add	r2,fp,r2
   2215c:	d9001004 	addi	r4,sp,64
   22160:	e100042e 	bgeu	fp,r4,22174 <___vfprintf_internal_r+0x2e0>
   22164:	e7000044 	addi	fp,fp,1
   22168:	01000c04 	movi	r4,48
   2216c:	e13fffc5 	stb	r4,-1(fp)
   22170:	e0bffa1e 	bne	fp,r2,2215c <___vfprintf_internal_r+0x2c8>
   22174:	e185c83a 	sub	r2,fp,r6
   22178:	d8800315 	stw	r2,12(sp)
   2217c:	d8800317 	ldw	r2,12(sp)
   22180:	1897883a 	add	r11,r3,r2
   22184:	d8800017 	ldw	r2,0(sp)
   22188:	8aebc83a 	sub	r21,r17,r11
   2218c:	10003526 	beq	r2,zero,22264 <___vfprintf_internal_r+0x3d0>
   22190:	18000a26 	beq	r3,zero,221bc <___vfprintf_internal_r+0x328>
   22194:	00800b44 	movi	r2,45
   22198:	d88007c5 	stb	r2,31(sp)
   2219c:	b8800117 	ldw	r2,4(r23)
   221a0:	01c00044 	movi	r7,1
   221a4:	d98007c4 	addi	r6,sp,31
   221a8:	b80b883a 	mov	r5,r23
   221ac:	8009883a 	mov	r4,r16
   221b0:	103ee83a 	callr	r2
   221b4:	103f6d1e 	bne	r2,zero,21f6c <___vfprintf_internal_r+0xd8>
   221b8:	b5800044 	addi	r22,r22,1
   221bc:	0540070e 	bge	zero,r21,221dc <___vfprintf_internal_r+0x348>
   221c0:	a80f883a 	mov	r7,r21
   221c4:	01800c04 	movi	r6,48
   221c8:	b80b883a 	mov	r5,r23
   221cc:	8009883a 	mov	r4,r16
   221d0:	0021e280 	call	21e28 <print_repeat>
   221d4:	103f651e 	bne	r2,zero,21f6c <___vfprintf_internal_r+0xd8>
   221d8:	b56d883a 	add	r22,r22,r21
   221dc:	d8800317 	ldw	r2,12(sp)
   221e0:	b72d883a 	add	r22,r22,fp
   221e4:	172bc83a 	sub	r21,r2,fp
   221e8:	af05883a 	add	r2,r21,fp
   221ec:	b707c83a 	sub	r3,r22,fp
   221f0:	00803216 	blt	zero,r2,222bc <___vfprintf_internal_r+0x428>
   221f4:	df000417 	ldw	fp,16(sp)
   221f8:	182d883a 	mov	r22,r3
   221fc:	003f3c06 	br	21ef0 <___vfprintf_internal_r+0x5c>
   22200:	a809883a 	mov	r4,r21
   22204:	a00b883a 	mov	r5,r20
   22208:	d8c00615 	stw	r3,24(sp)
   2220c:	0021c180 	call	21c18 <__udivsi3>
   22210:	1009883a 	mov	r4,r2
   22214:	a00b883a 	mov	r5,r20
   22218:	d8800315 	stw	r2,12(sp)
   2221c:	00224b00 	call	224b0 <__mulsi3>
   22220:	a8abc83a 	sub	r21,r21,r2
   22224:	a8800288 	cmpgei	r2,r21,10
   22228:	d9000317 	ldw	r4,12(sp)
   2222c:	d8c00617 	ldw	r3,24(sp)
   22230:	d9800804 	addi	r6,sp,32
   22234:	1000051e 	bne	r2,zero,2224c <___vfprintf_internal_r+0x3b8>
   22238:	ad400c04 	addi	r21,r21,48
   2223c:	e7000044 	addi	fp,fp,1
   22240:	e57fffc5 	stb	r21,-1(fp)
   22244:	202b883a 	mov	r21,r4
   22248:	003fbe06 	br	22144 <___vfprintf_internal_r+0x2b0>
   2224c:	d8800217 	ldw	r2,8(sp)
   22250:	10000226 	beq	r2,zero,2225c <___vfprintf_internal_r+0x3c8>
   22254:	ad400dc4 	addi	r21,r21,55
   22258:	003ff806 	br	2223c <___vfprintf_internal_r+0x3a8>
   2225c:	ad4015c4 	addi	r21,r21,87
   22260:	003ff606 	br	2223c <___vfprintf_internal_r+0x3a8>
   22264:	0540090e 	bge	zero,r21,2228c <___vfprintf_internal_r+0x3f8>
   22268:	a80f883a 	mov	r7,r21
   2226c:	01800804 	movi	r6,32
   22270:	b80b883a 	mov	r5,r23
   22274:	8009883a 	mov	r4,r16
   22278:	d8c00615 	stw	r3,24(sp)
   2227c:	0021e280 	call	21e28 <print_repeat>
   22280:	103f3a1e 	bne	r2,zero,21f6c <___vfprintf_internal_r+0xd8>
   22284:	d8c00617 	ldw	r3,24(sp)
   22288:	b56d883a 	add	r22,r22,r21
   2228c:	183fd326 	beq	r3,zero,221dc <___vfprintf_internal_r+0x348>
   22290:	00800b44 	movi	r2,45
   22294:	d88007c5 	stb	r2,31(sp)
   22298:	b8800117 	ldw	r2,4(r23)
   2229c:	01c00044 	movi	r7,1
   222a0:	d98007c4 	addi	r6,sp,31
   222a4:	b80b883a 	mov	r5,r23
   222a8:	8009883a 	mov	r4,r16
   222ac:	103ee83a 	callr	r2
   222b0:	103f2e1e 	bne	r2,zero,21f6c <___vfprintf_internal_r+0xd8>
   222b4:	b5800044 	addi	r22,r22,1
   222b8:	003fc806 	br	221dc <___vfprintf_internal_r+0x348>
   222bc:	e0bfffc3 	ldbu	r2,-1(fp)
   222c0:	01c00044 	movi	r7,1
   222c4:	d98007c4 	addi	r6,sp,31
   222c8:	d88007c5 	stb	r2,31(sp)
   222cc:	b8800117 	ldw	r2,4(r23)
   222d0:	b80b883a 	mov	r5,r23
   222d4:	8009883a 	mov	r4,r16
   222d8:	e73fffc4 	addi	fp,fp,-1
   222dc:	103ee83a 	callr	r2
   222e0:	103fc126 	beq	r2,zero,221e8 <___vfprintf_internal_r+0x354>
   222e4:	003f2106 	br	21f6c <___vfprintf_internal_r+0xd8>
   222e8:	88800090 	cmplti	r2,r17,2
   222ec:	1000081e 	bne	r2,zero,22310 <___vfprintf_internal_r+0x47c>
   222f0:	8d7fffc4 	addi	r21,r17,-1
   222f4:	a80f883a 	mov	r7,r21
   222f8:	01800804 	movi	r6,32
   222fc:	b80b883a 	mov	r5,r23
   22300:	8009883a 	mov	r4,r16
   22304:	0021e280 	call	21e28 <print_repeat>
   22308:	103f181e 	bne	r2,zero,21f6c <___vfprintf_internal_r+0xd8>
   2230c:	b56d883a 	add	r22,r22,r21
   22310:	e0800017 	ldw	r2,0(fp)
   22314:	01c00044 	movi	r7,1
   22318:	d9800804 	addi	r6,sp,32
   2231c:	d8800805 	stb	r2,32(sp)
   22320:	b8800117 	ldw	r2,4(r23)
   22324:	b80b883a 	mov	r5,r23
   22328:	8009883a 	mov	r4,r16
   2232c:	e5400104 	addi	r21,fp,4
   22330:	103ee83a 	callr	r2
   22334:	103f0d1e 	bne	r2,zero,21f6c <___vfprintf_internal_r+0xd8>
   22338:	b5800044 	addi	r22,r22,1
   2233c:	a839883a 	mov	fp,r21
   22340:	003eef06 	br	21f00 <___vfprintf_internal_r+0x6c>
   22344:	d8000215 	stw	zero,8(sp)
   22348:	d8000115 	stw	zero,4(sp)
   2234c:	d8000015 	stw	zero,0(sp)
   22350:	04c00044 	movi	r19,1
   22354:	05000284 	movi	r20,10
   22358:	04bfffc4 	movi	r18,-1
   2235c:	047fffc4 	movi	r17,-1
   22360:	00800044 	movi	r2,1
   22364:	003ee606 	br	21f00 <___vfprintf_internal_r+0x6c>
   22368:	00800044 	movi	r2,1
   2236c:	d8800015 	stw	r2,0(sp)
   22370:	003ef206 	br	21f3c <___vfprintf_internal_r+0xa8>
   22374:	00800044 	movi	r2,1
   22378:	d8800115 	stw	r2,4(sp)
   2237c:	008000c4 	movi	r2,3
   22380:	003edf06 	br	21f00 <___vfprintf_internal_r+0x6c>
   22384:	05000204 	movi	r20,8
   22388:	e0800104 	addi	r2,fp,4
   2238c:	d8800415 	stw	r2,16(sp)
   22390:	e5400017 	ldw	r21,0(fp)
   22394:	0027883a 	mov	r19,zero
   22398:	0007883a 	mov	r3,zero
   2239c:	003f6706 	br	2213c <___vfprintf_internal_r+0x2a8>

000223a0 <__vfprintf_internal>:
   223a0:	008000b4 	movhi	r2,2
   223a4:	300f883a 	mov	r7,r6
   223a8:	280d883a 	mov	r6,r5
   223ac:	200b883a 	mov	r5,r4
   223b0:	11117917 	ldw	r4,17892(r2)
   223b4:	0021e941 	jmpi	21e94 <___vfprintf_internal_r>

000223b8 <__sfvwrite_small_dev>:
   223b8:	2880000b 	ldhu	r2,0(r5)
   223bc:	1080020c 	andi	r2,r2,8
   223c0:	10002526 	beq	r2,zero,22458 <__sfvwrite_small_dev+0xa0>
   223c4:	2880008f 	ldh	r2,2(r5)
   223c8:	defffb04 	addi	sp,sp,-20
   223cc:	dcc00315 	stw	r19,12(sp)
   223d0:	dc800215 	stw	r18,8(sp)
   223d4:	dc400115 	stw	r17,4(sp)
   223d8:	dc000015 	stw	r16,0(sp)
   223dc:	dfc00415 	stw	ra,16(sp)
   223e0:	2027883a 	mov	r19,r4
   223e4:	2821883a 	mov	r16,r5
   223e8:	3025883a 	mov	r18,r6
   223ec:	3823883a 	mov	r17,r7
   223f0:	1000100e 	bge	r2,zero,22434 <__sfvwrite_small_dev+0x7c>
   223f4:	8080000b 	ldhu	r2,0(r16)
   223f8:	10801014 	ori	r2,r2,64
   223fc:	8080000d 	sth	r2,0(r16)
   22400:	00bfffc4 	movi	r2,-1
   22404:	00000d06 	br	2243c <__sfvwrite_small_dev+0x84>
   22408:	88810050 	cmplti	r2,r17,1025
   2240c:	880f883a 	mov	r7,r17
   22410:	1000011e 	bne	r2,zero,22418 <__sfvwrite_small_dev+0x60>
   22414:	01c10004 	movi	r7,1024
   22418:	8140008f 	ldh	r5,2(r16)
   2241c:	900d883a 	mov	r6,r18
   22420:	9809883a 	mov	r4,r19
   22424:	00224600 	call	22460 <_write_r>
   22428:	00bff20e 	bge	zero,r2,223f4 <__sfvwrite_small_dev+0x3c>
   2242c:	88a3c83a 	sub	r17,r17,r2
   22430:	90a5883a 	add	r18,r18,r2
   22434:	047ff416 	blt	zero,r17,22408 <__sfvwrite_small_dev+0x50>
   22438:	0005883a 	mov	r2,zero
   2243c:	dfc00417 	ldw	ra,16(sp)
   22440:	dcc00317 	ldw	r19,12(sp)
   22444:	dc800217 	ldw	r18,8(sp)
   22448:	dc400117 	ldw	r17,4(sp)
   2244c:	dc000017 	ldw	r16,0(sp)
   22450:	dec00504 	addi	sp,sp,20
   22454:	f800283a 	ret
   22458:	00bfffc4 	movi	r2,-1
   2245c:	f800283a 	ret

00022460 <_write_r>:
   22460:	defffe04 	addi	sp,sp,-8
   22464:	dc000015 	stw	r16,0(sp)
   22468:	008000b4 	movhi	r2,2
   2246c:	2021883a 	mov	r16,r4
   22470:	2809883a 	mov	r4,r5
   22474:	300b883a 	mov	r5,r6
   22478:	380d883a 	mov	r6,r7
   2247c:	dfc00115 	stw	ra,4(sp)
   22480:	10123c15 	stw	zero,18672(r2)
   22484:	00226ac0 	call	226ac <write>
   22488:	10ffffd8 	cmpnei	r3,r2,-1
   2248c:	1800041e 	bne	r3,zero,224a0 <_write_r+0x40>
   22490:	00c000b4 	movhi	r3,2
   22494:	18d23c17 	ldw	r3,18672(r3)
   22498:	18000126 	beq	r3,zero,224a0 <_write_r+0x40>
   2249c:	80c00015 	stw	r3,0(r16)
   224a0:	dfc00117 	ldw	ra,4(sp)
   224a4:	dc000017 	ldw	r16,0(sp)
   224a8:	dec00204 	addi	sp,sp,8
   224ac:	f800283a 	ret

000224b0 <__mulsi3>:
   224b0:	0005883a 	mov	r2,zero
   224b4:	20000726 	beq	r4,zero,224d4 <__mulsi3+0x24>
   224b8:	20c0004c 	andi	r3,r4,1
   224bc:	2008d07a 	srli	r4,r4,1
   224c0:	18000126 	beq	r3,zero,224c8 <__mulsi3+0x18>
   224c4:	1145883a 	add	r2,r2,r5
   224c8:	294b883a 	add	r5,r5,r5
   224cc:	203ffa1e 	bne	r4,zero,224b8 <__mulsi3+0x8>
   224d0:	f800283a 	ret
   224d4:	f800283a 	ret

000224d8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   224d8:	defffc04 	addi	sp,sp,-16
   224dc:	df000315 	stw	fp,12(sp)
   224e0:	df000304 	addi	fp,sp,12
   224e4:	e13fff15 	stw	r4,-4(fp)
   224e8:	e17ffe15 	stw	r5,-8(fp)
   224ec:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
   224f0:	e0fffe17 	ldw	r3,-8(fp)
   224f4:	e0bfff17 	ldw	r2,-4(fp)
   224f8:	18800c26 	beq	r3,r2,2252c <alt_load_section+0x54>
  {
    while( to != end )
   224fc:	00000806 	br	22520 <alt_load_section+0x48>
    {
      *to++ = *from++;
   22500:	e0ffff17 	ldw	r3,-4(fp)
   22504:	18800104 	addi	r2,r3,4
   22508:	e0bfff15 	stw	r2,-4(fp)
   2250c:	e0bffe17 	ldw	r2,-8(fp)
   22510:	11000104 	addi	r4,r2,4
   22514:	e13ffe15 	stw	r4,-8(fp)
   22518:	18c00017 	ldw	r3,0(r3)
   2251c:	10c00015 	stw	r3,0(r2)
    while( to != end )
   22520:	e0fffe17 	ldw	r3,-8(fp)
   22524:	e0bffd17 	ldw	r2,-12(fp)
   22528:	18bff51e 	bne	r3,r2,22500 <alt_load_section+0x28>
    }
  }
}
   2252c:	0001883a 	nop
   22530:	e037883a 	mov	sp,fp
   22534:	df000017 	ldw	fp,0(sp)
   22538:	dec00104 	addi	sp,sp,4
   2253c:	f800283a 	ret

00022540 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   22540:	defffe04 	addi	sp,sp,-8
   22544:	dfc00115 	stw	ra,4(sp)
   22548:	df000015 	stw	fp,0(sp)
   2254c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   22550:	018000b4 	movhi	r6,2
   22554:	31918304 	addi	r6,r6,17932
   22558:	014000b4 	movhi	r5,2
   2255c:	2950ca04 	addi	r5,r5,17192
   22560:	010000b4 	movhi	r4,2
   22564:	21118304 	addi	r4,r4,17932
   22568:	00224d80 	call	224d8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   2256c:	018000b4 	movhi	r6,2
   22570:	31808904 	addi	r6,r6,548
   22574:	014000b4 	movhi	r5,2
   22578:	29400804 	addi	r5,r5,32
   2257c:	010000b4 	movhi	r4,2
   22580:	21000804 	addi	r4,r4,32
   22584:	00224d80 	call	224d8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   22588:	018000b4 	movhi	r6,2
   2258c:	3190ca04 	addi	r6,r6,17192
   22590:	014000b4 	movhi	r5,2
   22594:	294fa904 	addi	r5,r5,16036
   22598:	010000b4 	movhi	r4,2
   2259c:	210fa904 	addi	r4,r4,16036
   225a0:	00224d80 	call	224d8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   225a4:	0022e200 	call	22e20 <alt_dcache_flush_all>
  alt_icache_flush_all();
   225a8:	00230180 	call	23018 <alt_icache_flush_all>
}
   225ac:	0001883a 	nop
   225b0:	e037883a 	mov	sp,fp
   225b4:	dfc00117 	ldw	ra,4(sp)
   225b8:	df000017 	ldw	fp,0(sp)
   225bc:	dec00204 	addi	sp,sp,8
   225c0:	f800283a 	ret

000225c4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   225c4:	defffd04 	addi	sp,sp,-12
   225c8:	dfc00215 	stw	ra,8(sp)
   225cc:	df000115 	stw	fp,4(sp)
   225d0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   225d4:	0009883a 	mov	r4,zero
   225d8:	00227e40 	call	227e4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   225dc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   225e0:	00228200 	call	22820 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   225e4:	018000b4 	movhi	r6,2
   225e8:	3190b904 	addi	r6,r6,17124
   225ec:	014000b4 	movhi	r5,2
   225f0:	2950b904 	addi	r5,r5,17124
   225f4:	010000b4 	movhi	r4,2
   225f8:	2110b904 	addi	r4,r4,17124
   225fc:	00233a40 	call	233a4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   22600:	0022f500 	call	22f50 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   22604:	010000b4 	movhi	r4,2
   22608:	210bed04 	addi	r4,r4,12212
   2260c:	0023bc00 	call	23bc0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   22610:	d0a0c517 	ldw	r2,-31980(gp)
   22614:	d0e0c617 	ldw	r3,-31976(gp)
   22618:	d120c717 	ldw	r4,-31972(gp)
   2261c:	200d883a 	mov	r6,r4
   22620:	180b883a 	mov	r5,r3
   22624:	1009883a 	mov	r4,r2
   22628:	002129c0 	call	2129c <main>
   2262c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   22630:	01000044 	movi	r4,1
   22634:	0022d440 	call	22d44 <close>
  exit (result);
   22638:	e13fff17 	ldw	r4,-4(fp)
   2263c:	0023bd40 	call	23bd4 <exit>

00022640 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
   22640:	defffd04 	addi	sp,sp,-12
   22644:	dfc00215 	stw	ra,8(sp)
   22648:	df000115 	stw	fp,4(sp)
   2264c:	df000104 	addi	fp,sp,4
   22650:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
   22654:	e13fff17 	ldw	r4,-4(fp)
   22658:	0022bb00 	call	22bb0 <alt_busy_sleep>
}
   2265c:	e037883a 	mov	sp,fp
   22660:	dfc00117 	ldw	ra,4(sp)
   22664:	df000017 	ldw	fp,0(sp)
   22668:	dec00204 	addi	sp,sp,8
   2266c:	f800283a 	ret

00022670 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   22670:	defffe04 	addi	sp,sp,-8
   22674:	dfc00115 	stw	ra,4(sp)
   22678:	df000015 	stw	fp,0(sp)
   2267c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   22680:	d0a00717 	ldw	r2,-32740(gp)
   22684:	10000326 	beq	r2,zero,22694 <alt_get_errno+0x24>
   22688:	d0a00717 	ldw	r2,-32740(gp)
   2268c:	103ee83a 	callr	r2
   22690:	00000106 	br	22698 <alt_get_errno+0x28>
   22694:	d0a0c404 	addi	r2,gp,-31984
}
   22698:	e037883a 	mov	sp,fp
   2269c:	dfc00117 	ldw	ra,4(sp)
   226a0:	df000017 	ldw	fp,0(sp)
   226a4:	dec00204 	addi	sp,sp,8
   226a8:	f800283a 	ret

000226ac <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   226ac:	defff904 	addi	sp,sp,-28
   226b0:	dfc00615 	stw	ra,24(sp)
   226b4:	df000515 	stw	fp,20(sp)
   226b8:	df000504 	addi	fp,sp,20
   226bc:	e13ffd15 	stw	r4,-12(fp)
   226c0:	e17ffc15 	stw	r5,-16(fp)
   226c4:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   226c8:	e0bffd17 	ldw	r2,-12(fp)
   226cc:	10000916 	blt	r2,zero,226f4 <write+0x48>
   226d0:	e0fffd17 	ldw	r3,-12(fp)
   226d4:	1805883a 	mov	r2,r3
   226d8:	1085883a 	add	r2,r2,r2
   226dc:	10c5883a 	add	r2,r2,r3
   226e0:	100490ba 	slli	r2,r2,2
   226e4:	00c000b4 	movhi	r3,2
   226e8:	18d11804 	addi	r3,r3,17504
   226ec:	10c5883a 	add	r2,r2,r3
   226f0:	00000106 	br	226f8 <write+0x4c>
   226f4:	0005883a 	mov	r2,zero
   226f8:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
   226fc:	e0bfff17 	ldw	r2,-4(fp)
   22700:	10002126 	beq	r2,zero,22788 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   22704:	e0bfff17 	ldw	r2,-4(fp)
   22708:	10800217 	ldw	r2,8(r2)
   2270c:	108000cc 	andi	r2,r2,3
   22710:	10001826 	beq	r2,zero,22774 <write+0xc8>
   22714:	e0bfff17 	ldw	r2,-4(fp)
   22718:	10800017 	ldw	r2,0(r2)
   2271c:	10800617 	ldw	r2,24(r2)
   22720:	10001426 	beq	r2,zero,22774 <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   22724:	e0bfff17 	ldw	r2,-4(fp)
   22728:	10800017 	ldw	r2,0(r2)
   2272c:	10800617 	ldw	r2,24(r2)
   22730:	e0fffb17 	ldw	r3,-20(fp)
   22734:	180d883a 	mov	r6,r3
   22738:	e17ffc17 	ldw	r5,-16(fp)
   2273c:	e13fff17 	ldw	r4,-4(fp)
   22740:	103ee83a 	callr	r2
   22744:	e0bffe15 	stw	r2,-8(fp)
   22748:	e0bffe17 	ldw	r2,-8(fp)
   2274c:	1000070e 	bge	r2,zero,2276c <write+0xc0>
      {
        ALT_ERRNO = -rval;
   22750:	00226700 	call	22670 <alt_get_errno>
   22754:	1007883a 	mov	r3,r2
   22758:	e0bffe17 	ldw	r2,-8(fp)
   2275c:	0085c83a 	sub	r2,zero,r2
   22760:	18800015 	stw	r2,0(r3)
        return -1;
   22764:	00bfffc4 	movi	r2,-1
   22768:	00000c06 	br	2279c <write+0xf0>
      }
      return rval;
   2276c:	e0bffe17 	ldw	r2,-8(fp)
   22770:	00000a06 	br	2279c <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
   22774:	00226700 	call	22670 <alt_get_errno>
   22778:	1007883a 	mov	r3,r2
   2277c:	00800344 	movi	r2,13
   22780:	18800015 	stw	r2,0(r3)
   22784:	00000406 	br	22798 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   22788:	00226700 	call	22670 <alt_get_errno>
   2278c:	1007883a 	mov	r3,r2
   22790:	00801444 	movi	r2,81
   22794:	18800015 	stw	r2,0(r3)
  }
  return -1;
   22798:	00bfffc4 	movi	r2,-1
}
   2279c:	e037883a 	mov	sp,fp
   227a0:	dfc00117 	ldw	ra,4(sp)
   227a4:	df000017 	ldw	fp,0(sp)
   227a8:	dec00204 	addi	sp,sp,8
   227ac:	f800283a 	ret

000227b0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   227b0:	defffd04 	addi	sp,sp,-12
   227b4:	dfc00215 	stw	ra,8(sp)
   227b8:	df000115 	stw	fp,4(sp)
   227bc:	df000104 	addi	fp,sp,4
   227c0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   227c4:	d1600404 	addi	r5,gp,-32752
   227c8:	e13fff17 	ldw	r4,-4(fp)
   227cc:	0022ea80 	call	22ea8 <alt_dev_llist_insert>
}
   227d0:	e037883a 	mov	sp,fp
   227d4:	dfc00117 	ldw	ra,4(sp)
   227d8:	df000017 	ldw	fp,0(sp)
   227dc:	dec00204 	addi	sp,sp,8
   227e0:	f800283a 	ret

000227e4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   227e4:	defffd04 	addi	sp,sp,-12
   227e8:	dfc00215 	stw	ra,8(sp)
   227ec:	df000115 	stw	fp,4(sp)
   227f0:	df000104 	addi	fp,sp,4
   227f4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS_SYSTEM_NIOS2_GEN2, nios_system_nios2_gen2);
   227f8:	00238b40 	call	238b4 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   227fc:	00800044 	movi	r2,1
   22800:	1001703a 	wrctl	status,r2
}
   22804:	0001883a 	nop
    alt_irq_cpu_enable_interrupts();
}
   22808:	0001883a 	nop
   2280c:	e037883a 	mov	sp,fp
   22810:	dfc00117 	ldw	ra,4(sp)
   22814:	df000017 	ldw	fp,0(sp)
   22818:	dec00204 	addi	sp,sp,8
   2281c:	f800283a 	ret

00022820 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   22820:	defffe04 	addi	sp,sp,-8
   22824:	dfc00115 	stw	ra,4(sp)
   22828:	df000015 	stw	fp,0(sp)
   2282c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( NIOS_SYSTEM_TIMER, nios_system_timer);
   22830:	01c0fa04 	movi	r7,1000
   22834:	01800044 	movi	r6,1
   22838:	000b883a 	mov	r5,zero
   2283c:	01000134 	movhi	r4,4
   22840:	21041804 	addi	r4,r4,4192
   22844:	0022b2c0 	call	22b2c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( NIOS_SYSTEM_JTAG_UART, nios_system_jtag_uart);
   22848:	010000b4 	movhi	r4,2
   2284c:	21110304 	addi	r4,r4,17420
   22850:	00227b00 	call	227b0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( NIOS_SYSTEM_SYSID_QSYS, nios_system_sysid_qsys);
   22854:	0001883a 	nop
}
   22858:	0001883a 	nop
   2285c:	e037883a 	mov	sp,fp
   22860:	dfc00117 	ldw	ra,4(sp)
   22864:	df000017 	ldw	fp,0(sp)
   22868:	dec00204 	addi	sp,sp,8
   2286c:	f800283a 	ret

00022870 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   22870:	defffa04 	addi	sp,sp,-24
   22874:	dfc00515 	stw	ra,20(sp)
   22878:	df000415 	stw	fp,16(sp)
   2287c:	df000404 	addi	fp,sp,16
   22880:	e13ffe15 	stw	r4,-8(fp)
   22884:	e17ffd15 	stw	r5,-12(fp)
   22888:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2288c:	e0bffe17 	ldw	r2,-8(fp)
   22890:	10800017 	ldw	r2,0(r2)
   22894:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   22898:	e0bfff17 	ldw	r2,-4(fp)
   2289c:	10c00a04 	addi	r3,r2,40
   228a0:	e0bffe17 	ldw	r2,-8(fp)
   228a4:	10800217 	ldw	r2,8(r2)
   228a8:	100f883a 	mov	r7,r2
   228ac:	e1bffc17 	ldw	r6,-16(fp)
   228b0:	e17ffd17 	ldw	r5,-12(fp)
   228b4:	1809883a 	mov	r4,r3
   228b8:	00229300 	call	22930 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   228bc:	e037883a 	mov	sp,fp
   228c0:	dfc00117 	ldw	ra,4(sp)
   228c4:	df000017 	ldw	fp,0(sp)
   228c8:	dec00204 	addi	sp,sp,8
   228cc:	f800283a 	ret

000228d0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   228d0:	defffa04 	addi	sp,sp,-24
   228d4:	dfc00515 	stw	ra,20(sp)
   228d8:	df000415 	stw	fp,16(sp)
   228dc:	df000404 	addi	fp,sp,16
   228e0:	e13ffe15 	stw	r4,-8(fp)
   228e4:	e17ffd15 	stw	r5,-12(fp)
   228e8:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   228ec:	e0bffe17 	ldw	r2,-8(fp)
   228f0:	10800017 	ldw	r2,0(r2)
   228f4:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   228f8:	e0bfff17 	ldw	r2,-4(fp)
   228fc:	10c00a04 	addi	r3,r2,40
   22900:	e0bffe17 	ldw	r2,-8(fp)
   22904:	10800217 	ldw	r2,8(r2)
   22908:	100f883a 	mov	r7,r2
   2290c:	e1bffc17 	ldw	r6,-16(fp)
   22910:	e17ffd17 	ldw	r5,-12(fp)
   22914:	1809883a 	mov	r4,r3
   22918:	0022a1c0 	call	22a1c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   2291c:	e037883a 	mov	sp,fp
   22920:	dfc00117 	ldw	ra,4(sp)
   22924:	df000017 	ldw	fp,0(sp)
   22928:	dec00204 	addi	sp,sp,8
   2292c:	f800283a 	ret

00022930 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   22930:	defff704 	addi	sp,sp,-36
   22934:	df000815 	stw	fp,32(sp)
   22938:	df000804 	addi	fp,sp,32
   2293c:	e13ffb15 	stw	r4,-20(fp)
   22940:	e17ffa15 	stw	r5,-24(fp)
   22944:	e1bff915 	stw	r6,-28(fp)
   22948:	e1fff815 	stw	r7,-32(fp)
  unsigned int base = sp->base;
   2294c:	e0bffb17 	ldw	r2,-20(fp)
   22950:	10800017 	ldw	r2,0(r2)
   22954:	e0bffe15 	stw	r2,-8(fp)

  char * ptr = buffer;
   22958:	e0bffa17 	ldw	r2,-24(fp)
   2295c:	e0bfff15 	stw	r2,-4(fp)
  char * end = buffer + space;
   22960:	e0bff917 	ldw	r2,-28(fp)
   22964:	e0fffa17 	ldw	r3,-24(fp)
   22968:	1885883a 	add	r2,r3,r2
   2296c:	e0bffd15 	stw	r2,-12(fp)

  while (ptr < end)
   22970:	00001206 	br	229bc <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   22974:	e0bffe17 	ldw	r2,-8(fp)
   22978:	10800037 	ldwio	r2,0(r2)
   2297c:	e0bffc15 	stw	r2,-16(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   22980:	e0bffc17 	ldw	r2,-16(fp)
   22984:	10a0000c 	andi	r2,r2,32768
   22988:	10000626 	beq	r2,zero,229a4 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   2298c:	e0bfff17 	ldw	r2,-4(fp)
   22990:	10c00044 	addi	r3,r2,1
   22994:	e0ffff15 	stw	r3,-4(fp)
   22998:	e0fffc17 	ldw	r3,-16(fp)
   2299c:	10c00005 	stb	r3,0(r2)
   229a0:	00000606 	br	229bc <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   229a4:	e0ffff17 	ldw	r3,-4(fp)
   229a8:	e0bffa17 	ldw	r2,-24(fp)
   229ac:	1880071e 	bne	r3,r2,229cc <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   229b0:	e0bff817 	ldw	r2,-32(fp)
   229b4:	1090000c 	andi	r2,r2,16384
   229b8:	1000061e 	bne	r2,zero,229d4 <altera_avalon_jtag_uart_read+0xa4>
  while (ptr < end)
   229bc:	e0ffff17 	ldw	r3,-4(fp)
   229c0:	e0bffd17 	ldw	r2,-12(fp)
   229c4:	18bfeb36 	bltu	r3,r2,22974 <altera_avalon_jtag_uart_read+0x44>
   229c8:	00000306 	br	229d8 <altera_avalon_jtag_uart_read+0xa8>
      break;
   229cc:	0001883a 	nop
   229d0:	00000106 	br	229d8 <altera_avalon_jtag_uart_read+0xa8>
      break;   
   229d4:	0001883a 	nop
    
  }

  if (ptr != buffer)
   229d8:	e0ffff17 	ldw	r3,-4(fp)
   229dc:	e0bffa17 	ldw	r2,-24(fp)
   229e0:	18800426 	beq	r3,r2,229f4 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   229e4:	e0ffff17 	ldw	r3,-4(fp)
   229e8:	e0bffa17 	ldw	r2,-24(fp)
   229ec:	1885c83a 	sub	r2,r3,r2
   229f0:	00000606 	br	22a0c <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   229f4:	e0bff817 	ldw	r2,-32(fp)
   229f8:	1090000c 	andi	r2,r2,16384
   229fc:	10000226 	beq	r2,zero,22a08 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   22a00:	00bffd44 	movi	r2,-11
   22a04:	00000106 	br	22a0c <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   22a08:	00bffec4 	movi	r2,-5
}
   22a0c:	e037883a 	mov	sp,fp
   22a10:	df000017 	ldw	fp,0(sp)
   22a14:	dec00104 	addi	sp,sp,4
   22a18:	f800283a 	ret

00022a1c <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   22a1c:	defff904 	addi	sp,sp,-28
   22a20:	df000615 	stw	fp,24(sp)
   22a24:	df000604 	addi	fp,sp,24
   22a28:	e13ffd15 	stw	r4,-12(fp)
   22a2c:	e17ffc15 	stw	r5,-16(fp)
   22a30:	e1bffb15 	stw	r6,-20(fp)
   22a34:	e1fffa15 	stw	r7,-24(fp)
  unsigned int base = sp->base;
   22a38:	e0bffd17 	ldw	r2,-12(fp)
   22a3c:	10800017 	ldw	r2,0(r2)
   22a40:	e0bfff15 	stw	r2,-4(fp)

  const char * end = ptr + count;
   22a44:	e0bffb17 	ldw	r2,-20(fp)
   22a48:	e0fffc17 	ldw	r3,-16(fp)
   22a4c:	1885883a 	add	r2,r3,r2
   22a50:	e0bffe15 	stw	r2,-8(fp)

  while (ptr < end)
   22a54:	00000e06 	br	22a90 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   22a58:	e0bfff17 	ldw	r2,-4(fp)
   22a5c:	10800104 	addi	r2,r2,4
   22a60:	10800037 	ldwio	r2,0(r2)
   22a64:	10bfffec 	andhi	r2,r2,65535
   22a68:	10000926 	beq	r2,zero,22a90 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   22a6c:	e0ffff17 	ldw	r3,-4(fp)
   22a70:	e0bffc17 	ldw	r2,-16(fp)
   22a74:	11000044 	addi	r4,r2,1
   22a78:	e13ffc15 	stw	r4,-16(fp)
   22a7c:	10800003 	ldbu	r2,0(r2)
   22a80:	10803fcc 	andi	r2,r2,255
   22a84:	1080201c 	xori	r2,r2,128
   22a88:	10bfe004 	addi	r2,r2,-128
   22a8c:	18800035 	stwio	r2,0(r3)
  while (ptr < end)
   22a90:	e0fffc17 	ldw	r3,-16(fp)
   22a94:	e0bffe17 	ldw	r2,-8(fp)
   22a98:	18bfef36 	bltu	r3,r2,22a58 <altera_avalon_jtag_uart_write+0x3c>

  return count;
   22a9c:	e0bffb17 	ldw	r2,-20(fp)
}
   22aa0:	e037883a 	mov	sp,fp
   22aa4:	df000017 	ldw	fp,0(sp)
   22aa8:	dec00104 	addi	sp,sp,4
   22aac:	f800283a 	ret

00022ab0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   22ab0:	defffa04 	addi	sp,sp,-24
   22ab4:	dfc00515 	stw	ra,20(sp)
   22ab8:	df000415 	stw	fp,16(sp)
   22abc:	df000404 	addi	fp,sp,16
   22ac0:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   22ac4:	0007883a 	mov	r3,zero
   22ac8:	e0bffc17 	ldw	r2,-16(fp)
   22acc:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   22ad0:	e0bffc17 	ldw	r2,-16(fp)
   22ad4:	10800104 	addi	r2,r2,4
   22ad8:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
   22adc:	0005303a 	rdctl	r2,status
   22ae0:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   22ae4:	e0fffd17 	ldw	r3,-12(fp)
   22ae8:	00bfff84 	movi	r2,-2
   22aec:	1884703a 	and	r2,r3,r2
   22af0:	1001703a 	wrctl	status,r2
  return context;
   22af4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   22af8:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
   22afc:	00237ac0 	call	237ac <alt_tick>
   22b00:	e0bfff17 	ldw	r2,-4(fp)
   22b04:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   22b08:	e0bffe17 	ldw	r2,-8(fp)
   22b0c:	1001703a 	wrctl	status,r2
}
   22b10:	0001883a 	nop
  alt_irq_enable_all(cpu_sr);
}
   22b14:	0001883a 	nop
   22b18:	e037883a 	mov	sp,fp
   22b1c:	dfc00117 	ldw	ra,4(sp)
   22b20:	df000017 	ldw	fp,0(sp)
   22b24:	dec00204 	addi	sp,sp,8
   22b28:	f800283a 	ret

00022b2c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   22b2c:	defff804 	addi	sp,sp,-32
   22b30:	dfc00715 	stw	ra,28(sp)
   22b34:	df000615 	stw	fp,24(sp)
   22b38:	df000604 	addi	fp,sp,24
   22b3c:	e13ffe15 	stw	r4,-8(fp)
   22b40:	e17ffd15 	stw	r5,-12(fp)
   22b44:	e1bffc15 	stw	r6,-16(fp)
   22b48:	e1fffb15 	stw	r7,-20(fp)
   22b4c:	e0bffb17 	ldw	r2,-20(fp)
   22b50:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   22b54:	d0a0c917 	ldw	r2,-31964(gp)
   22b58:	1000031e 	bne	r2,zero,22b68 <alt_avalon_timer_sc_init+0x3c>
  {
    _alt_tick_rate = nticks;
   22b5c:	e0bfff17 	ldw	r2,-4(fp)
   22b60:	d0a0c915 	stw	r2,-31964(gp)
    return 0;
   22b64:	00000106 	br	22b6c <alt_avalon_timer_sc_init+0x40>
  }
  else
  {
    return -1;
   22b68:	0001883a 	nop
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   22b6c:	e0bffe17 	ldw	r2,-8(fp)
   22b70:	10800104 	addi	r2,r2,4
   22b74:	00c001c4 	movi	r3,7
   22b78:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   22b7c:	d8000015 	stw	zero,0(sp)
   22b80:	e1fffe17 	ldw	r7,-8(fp)
   22b84:	018000b4 	movhi	r6,2
   22b88:	318aac04 	addi	r6,r6,10928
   22b8c:	e17ffc17 	ldw	r5,-16(fp)
   22b90:	e13ffd17 	ldw	r4,-12(fp)
   22b94:	00230380 	call	23038 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   22b98:	0001883a 	nop
   22b9c:	e037883a 	mov	sp,fp
   22ba0:	dfc00117 	ldw	ra,4(sp)
   22ba4:	df000017 	ldw	fp,0(sp)
   22ba8:	dec00204 	addi	sp,sp,8
   22bac:	f800283a 	ret

00022bb0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   22bb0:	defffa04 	addi	sp,sp,-24
   22bb4:	dfc00515 	stw	ra,20(sp)
   22bb8:	df000415 	stw	fp,16(sp)
   22bbc:	df000404 	addi	fp,sp,16
   22bc0:	e13ffc15 	stw	r4,-16(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
   22bc4:	00800244 	movi	r2,9
   22bc8:	e0bffe15 	stw	r2,-8(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
   22bcc:	014003f4 	movhi	r5,15
   22bd0:	29509004 	addi	r5,r5,16960
   22bd4:	e13ffe17 	ldw	r4,-8(fp)
   22bd8:	00224b00 	call	224b0 <__mulsi3>
   22bdc:	100b883a 	mov	r5,r2
   22be0:	0100bef4 	movhi	r4,763
   22be4:	213c2004 	addi	r4,r4,-3968
   22be8:	0021c180 	call	21c18 <__udivsi3>
  big_loops = us / (INT_MAX/
   22bec:	100b883a 	mov	r5,r2
   22bf0:	01200034 	movhi	r4,32768
   22bf4:	213fffc4 	addi	r4,r4,-1
   22bf8:	0021c180 	call	21c18 <__udivsi3>
   22bfc:	100b883a 	mov	r5,r2
   22c00:	e13ffc17 	ldw	r4,-16(fp)
   22c04:	0021c180 	call	21c18 <__udivsi3>
   22c08:	e0bffd15 	stw	r2,-12(fp)

  if (big_loops)
   22c0c:	e0bffd17 	ldw	r2,-12(fp)
   22c10:	10002a26 	beq	r2,zero,22cbc <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
   22c14:	e03fff15 	stw	zero,-4(fp)
   22c18:	00001706 	br	22c78 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   22c1c:	00a00034 	movhi	r2,32768
   22c20:	10bfffc4 	addi	r2,r2,-1
   22c24:	10bfffc4 	addi	r2,r2,-1
   22c28:	103ffe1e 	bne	r2,zero,22c24 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
   22c2c:	014003f4 	movhi	r5,15
   22c30:	29509004 	addi	r5,r5,16960
   22c34:	e13ffe17 	ldw	r4,-8(fp)
   22c38:	00224b00 	call	224b0 <__mulsi3>
      us -= (INT_MAX/(ALT_CPU_FREQ/
   22c3c:	100b883a 	mov	r5,r2
   22c40:	0100bef4 	movhi	r4,763
   22c44:	213c2004 	addi	r4,r4,-3968
   22c48:	0021c180 	call	21c18 <__udivsi3>
   22c4c:	100b883a 	mov	r5,r2
   22c50:	01200034 	movhi	r4,32768
   22c54:	213fffc4 	addi	r4,r4,-1
   22c58:	0021c180 	call	21c18 <__udivsi3>
   22c5c:	1007883a 	mov	r3,r2
   22c60:	e0bffc17 	ldw	r2,-16(fp)
   22c64:	10c5c83a 	sub	r2,r2,r3
   22c68:	e0bffc15 	stw	r2,-16(fp)
    for(i=0;i<big_loops;i++)
   22c6c:	e0bfff17 	ldw	r2,-4(fp)
   22c70:	10800044 	addi	r2,r2,1
   22c74:	e0bfff15 	stw	r2,-4(fp)
   22c78:	e0ffff17 	ldw	r3,-4(fp)
   22c7c:	e0bffd17 	ldw	r2,-12(fp)
   22c80:	18bfe616 	blt	r3,r2,22c1c <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   22c84:	014003f4 	movhi	r5,15
   22c88:	29509004 	addi	r5,r5,16960
   22c8c:	e13ffe17 	ldw	r4,-8(fp)
   22c90:	00224b00 	call	224b0 <__mulsi3>
   22c94:	100b883a 	mov	r5,r2
   22c98:	0100bef4 	movhi	r4,763
   22c9c:	213c2004 	addi	r4,r4,-3968
   22ca0:	0021c180 	call	21c18 <__udivsi3>
   22ca4:	e17ffc17 	ldw	r5,-16(fp)
   22ca8:	1009883a 	mov	r4,r2
   22cac:	00224b00 	call	224b0 <__mulsi3>
    __asm__ volatile (
   22cb0:	10bfffc4 	addi	r2,r2,-1
   22cb4:	103ffe1e 	bne	r2,zero,22cb0 <alt_busy_sleep+0x100>
   22cb8:	00000d06 	br	22cf0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
   22cbc:	014003f4 	movhi	r5,15
   22cc0:	29509004 	addi	r5,r5,16960
   22cc4:	e13ffe17 	ldw	r4,-8(fp)
   22cc8:	00224b00 	call	224b0 <__mulsi3>
   22ccc:	100b883a 	mov	r5,r2
   22cd0:	0100bef4 	movhi	r4,763
   22cd4:	213c2004 	addi	r4,r4,-3968
   22cd8:	0021c180 	call	21c18 <__udivsi3>
   22cdc:	e17ffc17 	ldw	r5,-16(fp)
   22ce0:	1009883a 	mov	r4,r2
   22ce4:	00224b00 	call	224b0 <__mulsi3>
    __asm__ volatile (
   22ce8:	10bfffc4 	addi	r2,r2,-1
   22cec:	00bffe16 	blt	zero,r2,22ce8 <alt_busy_sleep+0x138>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
   22cf0:	0005883a 	mov	r2,zero
}
   22cf4:	e037883a 	mov	sp,fp
   22cf8:	dfc00117 	ldw	ra,4(sp)
   22cfc:	df000017 	ldw	fp,0(sp)
   22d00:	dec00204 	addi	sp,sp,8
   22d04:	f800283a 	ret

00022d08 <alt_get_errno>:
{
   22d08:	defffe04 	addi	sp,sp,-8
   22d0c:	dfc00115 	stw	ra,4(sp)
   22d10:	df000015 	stw	fp,0(sp)
   22d14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   22d18:	d0a00717 	ldw	r2,-32740(gp)
   22d1c:	10000326 	beq	r2,zero,22d2c <alt_get_errno+0x24>
   22d20:	d0a00717 	ldw	r2,-32740(gp)
   22d24:	103ee83a 	callr	r2
   22d28:	00000106 	br	22d30 <alt_get_errno+0x28>
   22d2c:	d0a0c404 	addi	r2,gp,-31984
}
   22d30:	e037883a 	mov	sp,fp
   22d34:	dfc00117 	ldw	ra,4(sp)
   22d38:	df000017 	ldw	fp,0(sp)
   22d3c:	dec00204 	addi	sp,sp,8
   22d40:	f800283a 	ret

00022d44 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   22d44:	defffb04 	addi	sp,sp,-20
   22d48:	dfc00415 	stw	ra,16(sp)
   22d4c:	df000315 	stw	fp,12(sp)
   22d50:	df000304 	addi	fp,sp,12
   22d54:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   22d58:	e0bffd17 	ldw	r2,-12(fp)
   22d5c:	10000916 	blt	r2,zero,22d84 <close+0x40>
   22d60:	e0fffd17 	ldw	r3,-12(fp)
   22d64:	1805883a 	mov	r2,r3
   22d68:	1085883a 	add	r2,r2,r2
   22d6c:	10c5883a 	add	r2,r2,r3
   22d70:	100490ba 	slli	r2,r2,2
   22d74:	00c000b4 	movhi	r3,2
   22d78:	18d11804 	addi	r3,r3,17504
   22d7c:	10c5883a 	add	r2,r2,r3
   22d80:	00000106 	br	22d88 <close+0x44>
   22d84:	0005883a 	mov	r2,zero
   22d88:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
   22d8c:	e0bfff17 	ldw	r2,-4(fp)
   22d90:	10001926 	beq	r2,zero,22df8 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   22d94:	e0bfff17 	ldw	r2,-4(fp)
   22d98:	10800017 	ldw	r2,0(r2)
   22d9c:	10800417 	ldw	r2,16(r2)
   22da0:	10000626 	beq	r2,zero,22dbc <close+0x78>
   22da4:	e0bfff17 	ldw	r2,-4(fp)
   22da8:	10800017 	ldw	r2,0(r2)
   22dac:	10800417 	ldw	r2,16(r2)
   22db0:	e13fff17 	ldw	r4,-4(fp)
   22db4:	103ee83a 	callr	r2
   22db8:	00000106 	br	22dc0 <close+0x7c>
   22dbc:	0005883a 	mov	r2,zero
   22dc0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   22dc4:	e13ffd17 	ldw	r4,-12(fp)
   22dc8:	00236980 	call	23698 <alt_release_fd>
    if (rval < 0)
   22dcc:	e0bffe17 	ldw	r2,-8(fp)
   22dd0:	1000070e 	bge	r2,zero,22df0 <close+0xac>
    {
      ALT_ERRNO = -rval;
   22dd4:	0022d080 	call	22d08 <alt_get_errno>
   22dd8:	1007883a 	mov	r3,r2
   22ddc:	e0bffe17 	ldw	r2,-8(fp)
   22de0:	0085c83a 	sub	r2,zero,r2
   22de4:	18800015 	stw	r2,0(r3)
      return -1;
   22de8:	00bfffc4 	movi	r2,-1
   22dec:	00000706 	br	22e0c <close+0xc8>
    }
    return 0;
   22df0:	0005883a 	mov	r2,zero
   22df4:	00000506 	br	22e0c <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   22df8:	0022d080 	call	22d08 <alt_get_errno>
   22dfc:	1007883a 	mov	r3,r2
   22e00:	00801444 	movi	r2,81
   22e04:	18800015 	stw	r2,0(r3)
    return -1;
   22e08:	00bfffc4 	movi	r2,-1
  }
}
   22e0c:	e037883a 	mov	sp,fp
   22e10:	dfc00117 	ldw	ra,4(sp)
   22e14:	df000017 	ldw	fp,0(sp)
   22e18:	dec00204 	addi	sp,sp,8
   22e1c:	f800283a 	ret

00022e20 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   22e20:	deffff04 	addi	sp,sp,-4
   22e24:	df000015 	stw	fp,0(sp)
   22e28:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   22e2c:	0001883a 	nop
   22e30:	e037883a 	mov	sp,fp
   22e34:	df000017 	ldw	fp,0(sp)
   22e38:	dec00104 	addi	sp,sp,4
   22e3c:	f800283a 	ret

00022e40 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   22e40:	defffc04 	addi	sp,sp,-16
   22e44:	df000315 	stw	fp,12(sp)
   22e48:	df000304 	addi	fp,sp,12
   22e4c:	e13fff15 	stw	r4,-4(fp)
   22e50:	e17ffe15 	stw	r5,-8(fp)
   22e54:	e1bffd15 	stw	r6,-12(fp)
  return len;
   22e58:	e0bffd17 	ldw	r2,-12(fp)
}
   22e5c:	e037883a 	mov	sp,fp
   22e60:	df000017 	ldw	fp,0(sp)
   22e64:	dec00104 	addi	sp,sp,4
   22e68:	f800283a 	ret

00022e6c <alt_get_errno>:
{
   22e6c:	defffe04 	addi	sp,sp,-8
   22e70:	dfc00115 	stw	ra,4(sp)
   22e74:	df000015 	stw	fp,0(sp)
   22e78:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   22e7c:	d0a00717 	ldw	r2,-32740(gp)
   22e80:	10000326 	beq	r2,zero,22e90 <alt_get_errno+0x24>
   22e84:	d0a00717 	ldw	r2,-32740(gp)
   22e88:	103ee83a 	callr	r2
   22e8c:	00000106 	br	22e94 <alt_get_errno+0x28>
   22e90:	d0a0c404 	addi	r2,gp,-31984
}
   22e94:	e037883a 	mov	sp,fp
   22e98:	dfc00117 	ldw	ra,4(sp)
   22e9c:	df000017 	ldw	fp,0(sp)
   22ea0:	dec00204 	addi	sp,sp,8
   22ea4:	f800283a 	ret

00022ea8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   22ea8:	defffa04 	addi	sp,sp,-24
   22eac:	dfc00515 	stw	ra,20(sp)
   22eb0:	df000415 	stw	fp,16(sp)
   22eb4:	df000404 	addi	fp,sp,16
   22eb8:	e13ffd15 	stw	r4,-12(fp)
   22ebc:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   22ec0:	e0bffd17 	ldw	r2,-12(fp)
   22ec4:	10000326 	beq	r2,zero,22ed4 <alt_dev_llist_insert+0x2c>
   22ec8:	e0bffd17 	ldw	r2,-12(fp)
   22ecc:	10800217 	ldw	r2,8(r2)
   22ed0:	1000061e 	bne	r2,zero,22eec <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   22ed4:	0022e6c0 	call	22e6c <alt_get_errno>
   22ed8:	1007883a 	mov	r3,r2
   22edc:	00800584 	movi	r2,22
   22ee0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   22ee4:	00bffa84 	movi	r2,-22
   22ee8:	00001406 	br	22f3c <alt_dev_llist_insert+0x94>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   22eec:	e0bffd17 	ldw	r2,-12(fp)
   22ef0:	e0fffc17 	ldw	r3,-16(fp)
   22ef4:	e0ffff15 	stw	r3,-4(fp)
   22ef8:	e0bffe15 	stw	r2,-8(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   22efc:	e0bffe17 	ldw	r2,-8(fp)
   22f00:	e0ffff17 	ldw	r3,-4(fp)
   22f04:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   22f08:	e0bfff17 	ldw	r2,-4(fp)
   22f0c:	10c00017 	ldw	r3,0(r2)
   22f10:	e0bffe17 	ldw	r2,-8(fp)
   22f14:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   22f18:	e0bfff17 	ldw	r2,-4(fp)
   22f1c:	10800017 	ldw	r2,0(r2)
   22f20:	e0fffe17 	ldw	r3,-8(fp)
   22f24:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   22f28:	e0bfff17 	ldw	r2,-4(fp)
   22f2c:	e0fffe17 	ldw	r3,-8(fp)
   22f30:	10c00015 	stw	r3,0(r2)
}
   22f34:	0001883a 	nop

  return 0;  
   22f38:	0005883a 	mov	r2,zero
}
   22f3c:	e037883a 	mov	sp,fp
   22f40:	dfc00117 	ldw	ra,4(sp)
   22f44:	df000017 	ldw	fp,0(sp)
   22f48:	dec00204 	addi	sp,sp,8
   22f4c:	f800283a 	ret

00022f50 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   22f50:	defffd04 	addi	sp,sp,-12
   22f54:	dfc00215 	stw	ra,8(sp)
   22f58:	df000115 	stw	fp,4(sp)
   22f5c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   22f60:	008000b4 	movhi	r2,2
   22f64:	108fa804 	addi	r2,r2,16032
   22f68:	e0bfff15 	stw	r2,-4(fp)
   22f6c:	00000606 	br	22f88 <_do_ctors+0x38>
        (*ctor) (); 
   22f70:	e0bfff17 	ldw	r2,-4(fp)
   22f74:	10800017 	ldw	r2,0(r2)
   22f78:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   22f7c:	e0bfff17 	ldw	r2,-4(fp)
   22f80:	10bfff04 	addi	r2,r2,-4
   22f84:	e0bfff15 	stw	r2,-4(fp)
   22f88:	e0ffff17 	ldw	r3,-4(fp)
   22f8c:	008000b4 	movhi	r2,2
   22f90:	108fa904 	addi	r2,r2,16036
   22f94:	18bff62e 	bgeu	r3,r2,22f70 <_do_ctors+0x20>
}
   22f98:	0001883a 	nop
   22f9c:	0001883a 	nop
   22fa0:	e037883a 	mov	sp,fp
   22fa4:	dfc00117 	ldw	ra,4(sp)
   22fa8:	df000017 	ldw	fp,0(sp)
   22fac:	dec00204 	addi	sp,sp,8
   22fb0:	f800283a 	ret

00022fb4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   22fb4:	defffd04 	addi	sp,sp,-12
   22fb8:	dfc00215 	stw	ra,8(sp)
   22fbc:	df000115 	stw	fp,4(sp)
   22fc0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   22fc4:	008000b4 	movhi	r2,2
   22fc8:	108fa804 	addi	r2,r2,16032
   22fcc:	e0bfff15 	stw	r2,-4(fp)
   22fd0:	00000606 	br	22fec <_do_dtors+0x38>
        (*dtor) (); 
   22fd4:	e0bfff17 	ldw	r2,-4(fp)
   22fd8:	10800017 	ldw	r2,0(r2)
   22fdc:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   22fe0:	e0bfff17 	ldw	r2,-4(fp)
   22fe4:	10bfff04 	addi	r2,r2,-4
   22fe8:	e0bfff15 	stw	r2,-4(fp)
   22fec:	e0ffff17 	ldw	r3,-4(fp)
   22ff0:	008000b4 	movhi	r2,2
   22ff4:	108fa904 	addi	r2,r2,16036
   22ff8:	18bff62e 	bgeu	r3,r2,22fd4 <_do_dtors+0x20>
}
   22ffc:	0001883a 	nop
   23000:	0001883a 	nop
   23004:	e037883a 	mov	sp,fp
   23008:	dfc00117 	ldw	ra,4(sp)
   2300c:	df000017 	ldw	fp,0(sp)
   23010:	dec00204 	addi	sp,sp,8
   23014:	f800283a 	ret

00023018 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   23018:	deffff04 	addi	sp,sp,-4
   2301c:	df000015 	stw	fp,0(sp)
   23020:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   23024:	0001883a 	nop
   23028:	e037883a 	mov	sp,fp
   2302c:	df000017 	ldw	fp,0(sp)
   23030:	dec00104 	addi	sp,sp,4
   23034:	f800283a 	ret

00023038 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   23038:	defff904 	addi	sp,sp,-28
   2303c:	dfc00615 	stw	ra,24(sp)
   23040:	df000515 	stw	fp,20(sp)
   23044:	df000504 	addi	fp,sp,20
   23048:	e13fff15 	stw	r4,-4(fp)
   2304c:	e17ffe15 	stw	r5,-8(fp)
   23050:	e1bffd15 	stw	r6,-12(fp)
   23054:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   23058:	e0800217 	ldw	r2,8(fp)
   2305c:	d8800015 	stw	r2,0(sp)
   23060:	e1fffc17 	ldw	r7,-16(fp)
   23064:	e1bffd17 	ldw	r6,-12(fp)
   23068:	e17ffe17 	ldw	r5,-8(fp)
   2306c:	e13fff17 	ldw	r4,-4(fp)
   23070:	00231e80 	call	231e8 <alt_iic_isr_register>
}  
   23074:	e037883a 	mov	sp,fp
   23078:	dfc00117 	ldw	ra,4(sp)
   2307c:	df000017 	ldw	fp,0(sp)
   23080:	dec00204 	addi	sp,sp,8
   23084:	f800283a 	ret

00023088 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   23088:	defff904 	addi	sp,sp,-28
   2308c:	df000615 	stw	fp,24(sp)
   23090:	df000604 	addi	fp,sp,24
   23094:	e13ffb15 	stw	r4,-20(fp)
   23098:	e17ffa15 	stw	r5,-24(fp)
   2309c:	e0bffa17 	ldw	r2,-24(fp)
   230a0:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   230a4:	0005303a 	rdctl	r2,status
   230a8:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   230ac:	e0fffe17 	ldw	r3,-8(fp)
   230b0:	00bfff84 	movi	r2,-2
   230b4:	1884703a 	and	r2,r3,r2
   230b8:	1001703a 	wrctl	status,r2
  return context;
   230bc:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   230c0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
   230c4:	00c00044 	movi	r3,1
   230c8:	e0bfff17 	ldw	r2,-4(fp)
   230cc:	1884983a 	sll	r2,r3,r2
   230d0:	1007883a 	mov	r3,r2
   230d4:	d0a0c817 	ldw	r2,-31968(gp)
   230d8:	1884b03a 	or	r2,r3,r2
   230dc:	d0a0c815 	stw	r2,-31968(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   230e0:	d0a0c817 	ldw	r2,-31968(gp)
   230e4:	100170fa 	wrctl	ienable,r2
   230e8:	e0bffd17 	ldw	r2,-12(fp)
   230ec:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   230f0:	e0bffc17 	ldw	r2,-16(fp)
   230f4:	1001703a 	wrctl	status,r2
}
   230f8:	0001883a 	nop

  alt_irq_enable_all(status);

  return 0;
   230fc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
   23100:	e037883a 	mov	sp,fp
   23104:	df000017 	ldw	fp,0(sp)
   23108:	dec00104 	addi	sp,sp,4
   2310c:	f800283a 	ret

00023110 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   23110:	defff904 	addi	sp,sp,-28
   23114:	df000615 	stw	fp,24(sp)
   23118:	df000604 	addi	fp,sp,24
   2311c:	e13ffb15 	stw	r4,-20(fp)
   23120:	e17ffa15 	stw	r5,-24(fp)
   23124:	e0bffa17 	ldw	r2,-24(fp)
   23128:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
   2312c:	0005303a 	rdctl	r2,status
   23130:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23134:	e0fffe17 	ldw	r3,-8(fp)
   23138:	00bfff84 	movi	r2,-2
   2313c:	1884703a 	and	r2,r3,r2
   23140:	1001703a 	wrctl	status,r2
  return context;
   23144:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
   23148:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
   2314c:	00c00044 	movi	r3,1
   23150:	e0bfff17 	ldw	r2,-4(fp)
   23154:	1884983a 	sll	r2,r3,r2
   23158:	0084303a 	nor	r2,zero,r2
   2315c:	1007883a 	mov	r3,r2
   23160:	d0a0c817 	ldw	r2,-31968(gp)
   23164:	1884703a 	and	r2,r3,r2
   23168:	d0a0c815 	stw	r2,-31968(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2316c:	d0a0c817 	ldw	r2,-31968(gp)
   23170:	100170fa 	wrctl	ienable,r2
   23174:	e0bffd17 	ldw	r2,-12(fp)
   23178:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
   2317c:	e0bffc17 	ldw	r2,-16(fp)
   23180:	1001703a 	wrctl	status,r2
}
   23184:	0001883a 	nop
  return 0;
   23188:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
   2318c:	e037883a 	mov	sp,fp
   23190:	df000017 	ldw	fp,0(sp)
   23194:	dec00104 	addi	sp,sp,4
   23198:	f800283a 	ret

0002319c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   2319c:	defffc04 	addi	sp,sp,-16
   231a0:	df000315 	stw	fp,12(sp)
   231a4:	df000304 	addi	fp,sp,12
   231a8:	e13ffe15 	stw	r4,-8(fp)
   231ac:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   231b0:	000530fa 	rdctl	r2,ienable
   231b4:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   231b8:	00c00044 	movi	r3,1
   231bc:	e0bffd17 	ldw	r2,-12(fp)
   231c0:	1884983a 	sll	r2,r3,r2
   231c4:	1007883a 	mov	r3,r2
   231c8:	e0bfff17 	ldw	r2,-4(fp)
   231cc:	1884703a 	and	r2,r3,r2
   231d0:	1004c03a 	cmpne	r2,r2,zero
   231d4:	10803fcc 	andi	r2,r2,255
}
   231d8:	e037883a 	mov	sp,fp
   231dc:	df000017 	ldw	fp,0(sp)
   231e0:	dec00104 	addi	sp,sp,4
   231e4:	f800283a 	ret

000231e8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   231e8:	defff504 	addi	sp,sp,-44
   231ec:	dfc00a15 	stw	ra,40(sp)
   231f0:	df000915 	stw	fp,36(sp)
   231f4:	df000904 	addi	fp,sp,36
   231f8:	e13ffa15 	stw	r4,-24(fp)
   231fc:	e17ff915 	stw	r5,-28(fp)
   23200:	e1bff815 	stw	r6,-32(fp)
   23204:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
   23208:	00bffa84 	movi	r2,-22
   2320c:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   23210:	e0bff917 	ldw	r2,-28(fp)
   23214:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   23218:	e0bffe17 	ldw	r2,-8(fp)
   2321c:	10800808 	cmpgei	r2,r2,32
   23220:	1000251e 	bne	r2,zero,232b8 <alt_iic_isr_register+0xd0>
  NIOS2_READ_STATUS (context);
   23224:	0005303a 	rdctl	r2,status
   23228:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2322c:	e0fffc17 	ldw	r3,-16(fp)
   23230:	00bfff84 	movi	r2,-2
   23234:	1884703a 	and	r2,r3,r2
   23238:	1001703a 	wrctl	status,r2
  return context;
   2323c:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   23240:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
   23244:	e0bffe17 	ldw	r2,-8(fp)
   23248:	100890fa 	slli	r4,r2,3
   2324c:	e0fff817 	ldw	r3,-32(fp)
   23250:	008000b4 	movhi	r2,2
   23254:	2085883a 	add	r2,r4,r2
   23258:	10d24415 	stw	r3,18704(r2)
    alt_irq[id].context = isr_context;
   2325c:	e0bffe17 	ldw	r2,-8(fp)
   23260:	100890fa 	slli	r4,r2,3
   23264:	e0fff717 	ldw	r3,-36(fp)
   23268:	008000b4 	movhi	r2,2
   2326c:	2085883a 	add	r2,r4,r2
   23270:	10d24515 	stw	r3,18708(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   23274:	e0bff817 	ldw	r2,-32(fp)
   23278:	10000526 	beq	r2,zero,23290 <alt_iic_isr_register+0xa8>
   2327c:	e0bffe17 	ldw	r2,-8(fp)
   23280:	100b883a 	mov	r5,r2
   23284:	e13ffa17 	ldw	r4,-24(fp)
   23288:	00230880 	call	23088 <alt_ic_irq_enable>
   2328c:	00000406 	br	232a0 <alt_iic_isr_register+0xb8>
   23290:	e0bffe17 	ldw	r2,-8(fp)
   23294:	100b883a 	mov	r5,r2
   23298:	e13ffa17 	ldw	r4,-24(fp)
   2329c:	00231100 	call	23110 <alt_ic_irq_disable>
   232a0:	e0bfff15 	stw	r2,-4(fp)
   232a4:	e0bffd17 	ldw	r2,-12(fp)
   232a8:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
   232ac:	e0bffb17 	ldw	r2,-20(fp)
   232b0:	1001703a 	wrctl	status,r2
}
   232b4:	0001883a 	nop

    alt_irq_enable_all(status);
  }

  return rc; 
   232b8:	e0bfff17 	ldw	r2,-4(fp)
}
   232bc:	e037883a 	mov	sp,fp
   232c0:	dfc00117 	ldw	ra,4(sp)
   232c4:	df000017 	ldw	fp,0(sp)
   232c8:	dec00204 	addi	sp,sp,8
   232cc:	f800283a 	ret

000232d0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   232d0:	defff904 	addi	sp,sp,-28
   232d4:	dfc00615 	stw	ra,24(sp)
   232d8:	df000515 	stw	fp,20(sp)
   232dc:	df000504 	addi	fp,sp,20
   232e0:	e13ffe15 	stw	r4,-8(fp)
   232e4:	e17ffd15 	stw	r5,-12(fp)
   232e8:	e1bffc15 	stw	r6,-16(fp)
   232ec:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
   232f0:	e1bffb17 	ldw	r6,-20(fp)
   232f4:	e17ffc17 	ldw	r5,-16(fp)
   232f8:	e13ffd17 	ldw	r4,-12(fp)
   232fc:	00235380 	call	23538 <open>
   23300:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
   23304:	e0bfff17 	ldw	r2,-4(fp)
   23308:	10002016 	blt	r2,zero,2338c <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
   2330c:	e0ffff17 	ldw	r3,-4(fp)
   23310:	1805883a 	mov	r2,r3
   23314:	1085883a 	add	r2,r2,r2
   23318:	10c5883a 	add	r2,r2,r3
   2331c:	100490ba 	slli	r2,r2,2
   23320:	00c000b4 	movhi	r3,2
   23324:	10c7883a 	add	r3,r2,r3
   23328:	18d11817 	ldw	r3,17504(r3)
   2332c:	e0bffe17 	ldw	r2,-8(fp)
   23330:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   23334:	e0ffff17 	ldw	r3,-4(fp)
   23338:	1805883a 	mov	r2,r3
   2333c:	1085883a 	add	r2,r2,r2
   23340:	10c5883a 	add	r2,r2,r3
   23344:	100490ba 	slli	r2,r2,2
   23348:	00c000b4 	movhi	r3,2
   2334c:	10c7883a 	add	r3,r2,r3
   23350:	18d11917 	ldw	r3,17508(r3)
   23354:	e0bffe17 	ldw	r2,-8(fp)
   23358:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   2335c:	e0ffff17 	ldw	r3,-4(fp)
   23360:	1805883a 	mov	r2,r3
   23364:	1085883a 	add	r2,r2,r2
   23368:	10c5883a 	add	r2,r2,r3
   2336c:	100490ba 	slli	r2,r2,2
   23370:	00c000b4 	movhi	r3,2
   23374:	10c7883a 	add	r3,r2,r3
   23378:	18d11a17 	ldw	r3,17512(r3)
   2337c:	e0bffe17 	ldw	r2,-8(fp)
   23380:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   23384:	e13fff17 	ldw	r4,-4(fp)
   23388:	00236980 	call	23698 <alt_release_fd>
  }
} 
   2338c:	0001883a 	nop
   23390:	e037883a 	mov	sp,fp
   23394:	dfc00117 	ldw	ra,4(sp)
   23398:	df000017 	ldw	fp,0(sp)
   2339c:	dec00204 	addi	sp,sp,8
   233a0:	f800283a 	ret

000233a4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   233a4:	defffb04 	addi	sp,sp,-20
   233a8:	dfc00415 	stw	ra,16(sp)
   233ac:	df000315 	stw	fp,12(sp)
   233b0:	df000304 	addi	fp,sp,12
   233b4:	e13fff15 	stw	r4,-4(fp)
   233b8:	e17ffe15 	stw	r5,-8(fp)
   233bc:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   233c0:	01c07fc4 	movi	r7,511
   233c4:	01800044 	movi	r6,1
   233c8:	e17fff17 	ldw	r5,-4(fp)
   233cc:	010000b4 	movhi	r4,2
   233d0:	21111b04 	addi	r4,r4,17516
   233d4:	00232d00 	call	232d0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   233d8:	01c07fc4 	movi	r7,511
   233dc:	000d883a 	mov	r6,zero
   233e0:	e17ffe17 	ldw	r5,-8(fp)
   233e4:	010000b4 	movhi	r4,2
   233e8:	21111804 	addi	r4,r4,17504
   233ec:	00232d00 	call	232d0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   233f0:	01c07fc4 	movi	r7,511
   233f4:	01800044 	movi	r6,1
   233f8:	e17ffd17 	ldw	r5,-12(fp)
   233fc:	010000b4 	movhi	r4,2
   23400:	21111e04 	addi	r4,r4,17528
   23404:	00232d00 	call	232d0 <alt_open_fd>
}  
   23408:	0001883a 	nop
   2340c:	e037883a 	mov	sp,fp
   23410:	dfc00117 	ldw	ra,4(sp)
   23414:	df000017 	ldw	fp,0(sp)
   23418:	dec00204 	addi	sp,sp,8
   2341c:	f800283a 	ret

00023420 <alt_get_errno>:
{
   23420:	defffe04 	addi	sp,sp,-8
   23424:	dfc00115 	stw	ra,4(sp)
   23428:	df000015 	stw	fp,0(sp)
   2342c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23430:	d0a00717 	ldw	r2,-32740(gp)
   23434:	10000326 	beq	r2,zero,23444 <alt_get_errno+0x24>
   23438:	d0a00717 	ldw	r2,-32740(gp)
   2343c:	103ee83a 	callr	r2
   23440:	00000106 	br	23448 <alt_get_errno+0x28>
   23444:	d0a0c404 	addi	r2,gp,-31984
}
   23448:	e037883a 	mov	sp,fp
   2344c:	dfc00117 	ldw	ra,4(sp)
   23450:	df000017 	ldw	fp,0(sp)
   23454:	dec00204 	addi	sp,sp,8
   23458:	f800283a 	ret

0002345c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   2345c:	defffd04 	addi	sp,sp,-12
   23460:	df000215 	stw	fp,8(sp)
   23464:	df000204 	addi	fp,sp,8
   23468:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   2346c:	e0bffe17 	ldw	r2,-8(fp)
   23470:	10800217 	ldw	r2,8(r2)
   23474:	10d00034 	orhi	r3,r2,16384
   23478:	e0bffe17 	ldw	r2,-8(fp)
   2347c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   23480:	e03fff15 	stw	zero,-4(fp)
   23484:	00002306 	br	23514 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   23488:	e0ffff17 	ldw	r3,-4(fp)
   2348c:	1805883a 	mov	r2,r3
   23490:	1085883a 	add	r2,r2,r2
   23494:	10c5883a 	add	r2,r2,r3
   23498:	100490ba 	slli	r2,r2,2
   2349c:	00c000b4 	movhi	r3,2
   234a0:	10c7883a 	add	r3,r2,r3
   234a4:	18d11817 	ldw	r3,17504(r3)
   234a8:	e0bffe17 	ldw	r2,-8(fp)
   234ac:	10800017 	ldw	r2,0(r2)
   234b0:	1880151e 	bne	r3,r2,23508 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   234b4:	e0ffff17 	ldw	r3,-4(fp)
   234b8:	1805883a 	mov	r2,r3
   234bc:	1085883a 	add	r2,r2,r2
   234c0:	10c5883a 	add	r2,r2,r3
   234c4:	100490ba 	slli	r2,r2,2
   234c8:	00c000b4 	movhi	r3,2
   234cc:	10c7883a 	add	r3,r2,r3
   234d0:	18911a17 	ldw	r2,17512(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
   234d4:	10000c0e 	bge	r2,zero,23508 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
   234d8:	e0ffff17 	ldw	r3,-4(fp)
   234dc:	1805883a 	mov	r2,r3
   234e0:	1085883a 	add	r2,r2,r2
   234e4:	10c5883a 	add	r2,r2,r3
   234e8:	100490ba 	slli	r2,r2,2
   234ec:	00c000b4 	movhi	r3,2
   234f0:	18d11804 	addi	r3,r3,17504
   234f4:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   234f8:	e0fffe17 	ldw	r3,-8(fp)
   234fc:	18800226 	beq	r3,r2,23508 <alt_file_locked+0xac>
    {
      return -EACCES;
   23500:	00bffcc4 	movi	r2,-13
   23504:	00000806 	br	23528 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
   23508:	e0bfff17 	ldw	r2,-4(fp)
   2350c:	10800044 	addi	r2,r2,1
   23510:	e0bfff15 	stw	r2,-4(fp)
   23514:	d0a00617 	ldw	r2,-32744(gp)
   23518:	1007883a 	mov	r3,r2
   2351c:	e0bfff17 	ldw	r2,-4(fp)
   23520:	18bfd92e 	bgeu	r3,r2,23488 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   23524:	0005883a 	mov	r2,zero
}
   23528:	e037883a 	mov	sp,fp
   2352c:	df000017 	ldw	fp,0(sp)
   23530:	dec00104 	addi	sp,sp,4
   23534:	f800283a 	ret

00023538 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   23538:	defff604 	addi	sp,sp,-40
   2353c:	dfc00915 	stw	ra,36(sp)
   23540:	df000815 	stw	fp,32(sp)
   23544:	df000804 	addi	fp,sp,32
   23548:	e13ffa15 	stw	r4,-24(fp)
   2354c:	e17ff915 	stw	r5,-28(fp)
   23550:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   23554:	00bfffc4 	movi	r2,-1
   23558:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
   2355c:	00bffb44 	movi	r2,-19
   23560:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
   23564:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   23568:	d1600404 	addi	r5,gp,-32752
   2356c:	e13ffa17 	ldw	r4,-24(fp)
   23570:	00238d80 	call	238d8 <alt_find_dev>
   23574:	e0bfff15 	stw	r2,-4(fp)
   23578:	e0bfff17 	ldw	r2,-4(fp)
   2357c:	1000051e 	bne	r2,zero,23594 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   23580:	e13ffa17 	ldw	r4,-24(fp)
   23584:	00239680 	call	23968 <alt_find_file>
   23588:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
   2358c:	00800044 	movi	r2,1
   23590:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   23594:	e0bfff17 	ldw	r2,-4(fp)
   23598:	10002c26 	beq	r2,zero,2364c <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
   2359c:	e13fff17 	ldw	r4,-4(fp)
   235a0:	0023a700 	call	23a70 <alt_get_fd>
   235a4:	e0bffe15 	stw	r2,-8(fp)
   235a8:	e0bffe17 	ldw	r2,-8(fp)
   235ac:	1000030e 	bge	r2,zero,235bc <open+0x84>
    {
      status = index;
   235b0:	e0bffe17 	ldw	r2,-8(fp)
   235b4:	e0bffd15 	stw	r2,-12(fp)
   235b8:	00002606 	br	23654 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
   235bc:	e0fffe17 	ldw	r3,-8(fp)
   235c0:	1805883a 	mov	r2,r3
   235c4:	1085883a 	add	r2,r2,r2
   235c8:	10c5883a 	add	r2,r2,r3
   235cc:	100490ba 	slli	r2,r2,2
   235d0:	00c000b4 	movhi	r3,2
   235d4:	18d11804 	addi	r3,r3,17504
   235d8:	10c5883a 	add	r2,r2,r3
   235dc:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   235e0:	e0fff917 	ldw	r3,-28(fp)
   235e4:	00900034 	movhi	r2,16384
   235e8:	10bfffc4 	addi	r2,r2,-1
   235ec:	1886703a 	and	r3,r3,r2
   235f0:	e0bffb17 	ldw	r2,-20(fp)
   235f4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   235f8:	e0bffc17 	ldw	r2,-16(fp)
   235fc:	1000051e 	bne	r2,zero,23614 <open+0xdc>
   23600:	e13ffb17 	ldw	r4,-20(fp)
   23604:	002345c0 	call	2345c <alt_file_locked>
   23608:	e0bffd15 	stw	r2,-12(fp)
   2360c:	e0bffd17 	ldw	r2,-12(fp)
   23610:	10001016 	blt	r2,zero,23654 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   23614:	e0bfff17 	ldw	r2,-4(fp)
   23618:	10800317 	ldw	r2,12(r2)
   2361c:	10000826 	beq	r2,zero,23640 <open+0x108>
   23620:	e0bfff17 	ldw	r2,-4(fp)
   23624:	10800317 	ldw	r2,12(r2)
   23628:	e1fff817 	ldw	r7,-32(fp)
   2362c:	e1bff917 	ldw	r6,-28(fp)
   23630:	e17ffa17 	ldw	r5,-24(fp)
   23634:	e13ffb17 	ldw	r4,-20(fp)
   23638:	103ee83a 	callr	r2
   2363c:	00000106 	br	23644 <open+0x10c>
   23640:	0005883a 	mov	r2,zero
   23644:	e0bffd15 	stw	r2,-12(fp)
   23648:	00000206 	br	23654 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
   2364c:	00bffb44 	movi	r2,-19
   23650:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   23654:	e0bffd17 	ldw	r2,-12(fp)
   23658:	1000090e 	bge	r2,zero,23680 <open+0x148>
  {
    alt_release_fd (index);  
   2365c:	e13ffe17 	ldw	r4,-8(fp)
   23660:	00236980 	call	23698 <alt_release_fd>
    ALT_ERRNO = -status;
   23664:	00234200 	call	23420 <alt_get_errno>
   23668:	1007883a 	mov	r3,r2
   2366c:	e0bffd17 	ldw	r2,-12(fp)
   23670:	0085c83a 	sub	r2,zero,r2
   23674:	18800015 	stw	r2,0(r3)
    return -1;
   23678:	00bfffc4 	movi	r2,-1
   2367c:	00000106 	br	23684 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
   23680:	e0bffe17 	ldw	r2,-8(fp)
}
   23684:	e037883a 	mov	sp,fp
   23688:	dfc00117 	ldw	ra,4(sp)
   2368c:	df000017 	ldw	fp,0(sp)
   23690:	dec00204 	addi	sp,sp,8
   23694:	f800283a 	ret

00023698 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   23698:	defffe04 	addi	sp,sp,-8
   2369c:	df000115 	stw	fp,4(sp)
   236a0:	df000104 	addi	fp,sp,4
   236a4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   236a8:	e0bfff17 	ldw	r2,-4(fp)
   236ac:	108000d0 	cmplti	r2,r2,3
   236b0:	1000101e 	bne	r2,zero,236f4 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
   236b4:	e0ffff17 	ldw	r3,-4(fp)
   236b8:	1805883a 	mov	r2,r3
   236bc:	1085883a 	add	r2,r2,r2
   236c0:	10c5883a 	add	r2,r2,r3
   236c4:	100490ba 	slli	r2,r2,2
   236c8:	00c000b4 	movhi	r3,2
   236cc:	10c7883a 	add	r3,r2,r3
   236d0:	18111a15 	stw	zero,17512(r3)
    alt_fd_list[fd].dev      = 0;
   236d4:	e0ffff17 	ldw	r3,-4(fp)
   236d8:	1805883a 	mov	r2,r3
   236dc:	1085883a 	add	r2,r2,r2
   236e0:	10c5883a 	add	r2,r2,r3
   236e4:	100490ba 	slli	r2,r2,2
   236e8:	00c000b4 	movhi	r3,2
   236ec:	10c7883a 	add	r3,r2,r3
   236f0:	18111815 	stw	zero,17504(r3)
  }
}
   236f4:	0001883a 	nop
   236f8:	e037883a 	mov	sp,fp
   236fc:	df000017 	ldw	fp,0(sp)
   23700:	dec00104 	addi	sp,sp,4
   23704:	f800283a 	ret

00023708 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   23708:	defffa04 	addi	sp,sp,-24
   2370c:	df000515 	stw	fp,20(sp)
   23710:	df000504 	addi	fp,sp,20
   23714:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
   23718:	0005303a 	rdctl	r2,status
   2371c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23720:	e0fffc17 	ldw	r3,-16(fp)
   23724:	00bfff84 	movi	r2,-2
   23728:	1884703a 	and	r2,r3,r2
   2372c:	1001703a 	wrctl	status,r2
  return context;
   23730:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   23734:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
   23738:	e0bffb17 	ldw	r2,-20(fp)
   2373c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   23740:	e0bffd17 	ldw	r2,-12(fp)
   23744:	10800017 	ldw	r2,0(r2)
   23748:	e0fffd17 	ldw	r3,-12(fp)
   2374c:	18c00117 	ldw	r3,4(r3)
   23750:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   23754:	e0bffd17 	ldw	r2,-12(fp)
   23758:	10800117 	ldw	r2,4(r2)
   2375c:	e0fffd17 	ldw	r3,-12(fp)
   23760:	18c00017 	ldw	r3,0(r3)
   23764:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   23768:	e0bffd17 	ldw	r2,-12(fp)
   2376c:	e0fffd17 	ldw	r3,-12(fp)
   23770:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   23774:	e0bffd17 	ldw	r2,-12(fp)
   23778:	e0fffd17 	ldw	r3,-12(fp)
   2377c:	10c00015 	stw	r3,0(r2)
} 
   23780:	0001883a 	nop
   23784:	e0bfff17 	ldw	r2,-4(fp)
   23788:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
   2378c:	e0bffe17 	ldw	r2,-8(fp)
   23790:	1001703a 	wrctl	status,r2
}
   23794:	0001883a 	nop
  alt_irq_enable_all (irq_context);
}
   23798:	0001883a 	nop
   2379c:	e037883a 	mov	sp,fp
   237a0:	df000017 	ldw	fp,0(sp)
   237a4:	dec00104 	addi	sp,sp,4
   237a8:	f800283a 	ret

000237ac <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   237ac:	defffb04 	addi	sp,sp,-20
   237b0:	dfc00415 	stw	ra,16(sp)
   237b4:	df000315 	stw	fp,12(sp)
   237b8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   237bc:	d0a00917 	ldw	r2,-32732(gp)
   237c0:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   237c4:	d0a0ca17 	ldw	r2,-31960(gp)
   237c8:	10800044 	addi	r2,r2,1
   237cc:	d0a0ca15 	stw	r2,-31960(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   237d0:	00002e06 	br	2388c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   237d4:	e0bfff17 	ldw	r2,-4(fp)
   237d8:	10800017 	ldw	r2,0(r2)
   237dc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   237e0:	e0bfff17 	ldw	r2,-4(fp)
   237e4:	10800403 	ldbu	r2,16(r2)
   237e8:	10803fcc 	andi	r2,r2,255
   237ec:	10000426 	beq	r2,zero,23800 <alt_tick+0x54>
   237f0:	d0a0ca17 	ldw	r2,-31960(gp)
   237f4:	1000021e 	bne	r2,zero,23800 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   237f8:	e0bfff17 	ldw	r2,-4(fp)
   237fc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   23800:	e0bfff17 	ldw	r2,-4(fp)
   23804:	10800217 	ldw	r2,8(r2)
   23808:	d0e0ca17 	ldw	r3,-31960(gp)
   2380c:	18801d36 	bltu	r3,r2,23884 <alt_tick+0xd8>
   23810:	e0bfff17 	ldw	r2,-4(fp)
   23814:	10800403 	ldbu	r2,16(r2)
   23818:	10803fcc 	andi	r2,r2,255
   2381c:	1000191e 	bne	r2,zero,23884 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   23820:	e0bfff17 	ldw	r2,-4(fp)
   23824:	10800317 	ldw	r2,12(r2)
   23828:	e0ffff17 	ldw	r3,-4(fp)
   2382c:	18c00517 	ldw	r3,20(r3)
   23830:	1809883a 	mov	r4,r3
   23834:	103ee83a 	callr	r2
   23838:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   2383c:	e0bffd17 	ldw	r2,-12(fp)
   23840:	1000031e 	bne	r2,zero,23850 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   23844:	e13fff17 	ldw	r4,-4(fp)
   23848:	00237080 	call	23708 <alt_alarm_stop>
   2384c:	00000d06 	br	23884 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   23850:	e0bfff17 	ldw	r2,-4(fp)
   23854:	10c00217 	ldw	r3,8(r2)
   23858:	e0bffd17 	ldw	r2,-12(fp)
   2385c:	1887883a 	add	r3,r3,r2
   23860:	e0bfff17 	ldw	r2,-4(fp)
   23864:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   23868:	e0bfff17 	ldw	r2,-4(fp)
   2386c:	10c00217 	ldw	r3,8(r2)
   23870:	d0a0ca17 	ldw	r2,-31960(gp)
   23874:	1880032e 	bgeu	r3,r2,23884 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   23878:	e0bfff17 	ldw	r2,-4(fp)
   2387c:	00c00044 	movi	r3,1
   23880:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   23884:	e0bffe17 	ldw	r2,-8(fp)
   23888:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
   2388c:	e0ffff17 	ldw	r3,-4(fp)
   23890:	d0a00904 	addi	r2,gp,-32732
   23894:	18bfcf1e 	bne	r3,r2,237d4 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   23898:	0001883a 	nop
}
   2389c:	0001883a 	nop
   238a0:	e037883a 	mov	sp,fp
   238a4:	dfc00117 	ldw	ra,4(sp)
   238a8:	df000017 	ldw	fp,0(sp)
   238ac:	dec00204 	addi	sp,sp,8
   238b0:	f800283a 	ret

000238b4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   238b4:	deffff04 	addi	sp,sp,-4
   238b8:	df000015 	stw	fp,0(sp)
   238bc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   238c0:	000170fa 	wrctl	ienable,zero
}
   238c4:	0001883a 	nop
   238c8:	e037883a 	mov	sp,fp
   238cc:	df000017 	ldw	fp,0(sp)
   238d0:	dec00104 	addi	sp,sp,4
   238d4:	f800283a 	ret

000238d8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   238d8:	defffa04 	addi	sp,sp,-24
   238dc:	dfc00515 	stw	ra,20(sp)
   238e0:	df000415 	stw	fp,16(sp)
   238e4:	df000404 	addi	fp,sp,16
   238e8:	e13ffd15 	stw	r4,-12(fp)
   238ec:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
   238f0:	e0bffc17 	ldw	r2,-16(fp)
   238f4:	10800017 	ldw	r2,0(r2)
   238f8:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   238fc:	e13ffd17 	ldw	r4,-12(fp)
   23900:	0021e0c0 	call	21e0c <strlen>
   23904:	10800044 	addi	r2,r2,1
   23908:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2390c:	00000d06 	br	23944 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   23910:	e0bfff17 	ldw	r2,-4(fp)
   23914:	10800217 	ldw	r2,8(r2)
   23918:	e0fffe17 	ldw	r3,-8(fp)
   2391c:	180d883a 	mov	r6,r3
   23920:	e17ffd17 	ldw	r5,-12(fp)
   23924:	1009883a 	mov	r4,r2
   23928:	0023bf40 	call	23bf4 <memcmp>
   2392c:	1000021e 	bne	r2,zero,23938 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   23930:	e0bfff17 	ldw	r2,-4(fp)
   23934:	00000706 	br	23954 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   23938:	e0bfff17 	ldw	r2,-4(fp)
   2393c:	10800017 	ldw	r2,0(r2)
   23940:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
   23944:	e0ffff17 	ldw	r3,-4(fp)
   23948:	e0bffc17 	ldw	r2,-16(fp)
   2394c:	18bff01e 	bne	r3,r2,23910 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
   23950:	0005883a 	mov	r2,zero
}
   23954:	e037883a 	mov	sp,fp
   23958:	dfc00117 	ldw	ra,4(sp)
   2395c:	df000017 	ldw	fp,0(sp)
   23960:	dec00204 	addi	sp,sp,8
   23964:	f800283a 	ret

00023968 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   23968:	defffb04 	addi	sp,sp,-20
   2396c:	dfc00415 	stw	ra,16(sp)
   23970:	df000315 	stw	fp,12(sp)
   23974:	df000304 	addi	fp,sp,12
   23978:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   2397c:	d0a00217 	ldw	r2,-32760(gp)
   23980:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   23984:	00003106 	br	23a4c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   23988:	e0bfff17 	ldw	r2,-4(fp)
   2398c:	10800217 	ldw	r2,8(r2)
   23990:	1009883a 	mov	r4,r2
   23994:	0021e0c0 	call	21e0c <strlen>
   23998:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   2399c:	e0bfff17 	ldw	r2,-4(fp)
   239a0:	10c00217 	ldw	r3,8(r2)
   239a4:	e0bffe17 	ldw	r2,-8(fp)
   239a8:	10bfffc4 	addi	r2,r2,-1
   239ac:	1885883a 	add	r2,r3,r2
   239b0:	10800003 	ldbu	r2,0(r2)
   239b4:	10803fcc 	andi	r2,r2,255
   239b8:	1080201c 	xori	r2,r2,128
   239bc:	10bfe004 	addi	r2,r2,-128
   239c0:	10800bd8 	cmpnei	r2,r2,47
   239c4:	1000031e 	bne	r2,zero,239d4 <alt_find_file+0x6c>
    {
      len -= 1;
   239c8:	e0bffe17 	ldw	r2,-8(fp)
   239cc:	10bfffc4 	addi	r2,r2,-1
   239d0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   239d4:	e0bffe17 	ldw	r2,-8(fp)
   239d8:	e0fffd17 	ldw	r3,-12(fp)
   239dc:	1885883a 	add	r2,r3,r2
   239e0:	10800003 	ldbu	r2,0(r2)
   239e4:	10803fcc 	andi	r2,r2,255
   239e8:	1080201c 	xori	r2,r2,128
   239ec:	10bfe004 	addi	r2,r2,-128
   239f0:	10800be0 	cmpeqi	r2,r2,47
   239f4:	1000081e 	bne	r2,zero,23a18 <alt_find_file+0xb0>
   239f8:	e0bffe17 	ldw	r2,-8(fp)
   239fc:	e0fffd17 	ldw	r3,-12(fp)
   23a00:	1885883a 	add	r2,r3,r2
   23a04:	10800003 	ldbu	r2,0(r2)
   23a08:	10803fcc 	andi	r2,r2,255
   23a0c:	1080201c 	xori	r2,r2,128
   23a10:	10bfe004 	addi	r2,r2,-128
   23a14:	10000a1e 	bne	r2,zero,23a40 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   23a18:	e0bfff17 	ldw	r2,-4(fp)
   23a1c:	10800217 	ldw	r2,8(r2)
   23a20:	e0fffe17 	ldw	r3,-8(fp)
   23a24:	180d883a 	mov	r6,r3
   23a28:	e17ffd17 	ldw	r5,-12(fp)
   23a2c:	1009883a 	mov	r4,r2
   23a30:	0023bf40 	call	23bf4 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
   23a34:	1000021e 	bne	r2,zero,23a40 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
   23a38:	e0bfff17 	ldw	r2,-4(fp)
   23a3c:	00000706 	br	23a5c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   23a40:	e0bfff17 	ldw	r2,-4(fp)
   23a44:	10800017 	ldw	r2,0(r2)
   23a48:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
   23a4c:	e0ffff17 	ldw	r3,-4(fp)
   23a50:	d0a00204 	addi	r2,gp,-32760
   23a54:	18bfcc1e 	bne	r3,r2,23988 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
   23a58:	0005883a 	mov	r2,zero
}
   23a5c:	e037883a 	mov	sp,fp
   23a60:	dfc00117 	ldw	ra,4(sp)
   23a64:	df000017 	ldw	fp,0(sp)
   23a68:	dec00204 	addi	sp,sp,8
   23a6c:	f800283a 	ret

00023a70 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   23a70:	defffc04 	addi	sp,sp,-16
   23a74:	df000315 	stw	fp,12(sp)
   23a78:	df000304 	addi	fp,sp,12
   23a7c:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
   23a80:	00bffa04 	movi	r2,-24
   23a84:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   23a88:	e03fff15 	stw	zero,-4(fp)
   23a8c:	00001d06 	br	23b04 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   23a90:	e0ffff17 	ldw	r3,-4(fp)
   23a94:	1805883a 	mov	r2,r3
   23a98:	1085883a 	add	r2,r2,r2
   23a9c:	10c5883a 	add	r2,r2,r3
   23aa0:	100490ba 	slli	r2,r2,2
   23aa4:	00c000b4 	movhi	r3,2
   23aa8:	10c7883a 	add	r3,r2,r3
   23aac:	18911817 	ldw	r2,17504(r3)
   23ab0:	1000111e 	bne	r2,zero,23af8 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   23ab4:	e0ffff17 	ldw	r3,-4(fp)
   23ab8:	1805883a 	mov	r2,r3
   23abc:	1085883a 	add	r2,r2,r2
   23ac0:	10c5883a 	add	r2,r2,r3
   23ac4:	100490ba 	slli	r2,r2,2
   23ac8:	e13ffd17 	ldw	r4,-12(fp)
   23acc:	00c000b4 	movhi	r3,2
   23ad0:	10c7883a 	add	r3,r2,r3
   23ad4:	19111815 	stw	r4,17504(r3)
      if (i > alt_max_fd)
   23ad8:	d0e00617 	ldw	r3,-32744(gp)
   23adc:	e0bfff17 	ldw	r2,-4(fp)
   23ae0:	1880020e 	bge	r3,r2,23aec <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   23ae4:	e0bfff17 	ldw	r2,-4(fp)
   23ae8:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
   23aec:	e0bfff17 	ldw	r2,-4(fp)
   23af0:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   23af4:	00000706 	br	23b14 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
   23af8:	e0bfff17 	ldw	r2,-4(fp)
   23afc:	10800044 	addi	r2,r2,1
   23b00:	e0bfff15 	stw	r2,-4(fp)
   23b04:	e0bfff17 	ldw	r2,-4(fp)
   23b08:	10800810 	cmplti	r2,r2,32
   23b0c:	103fe01e 	bne	r2,zero,23a90 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
   23b10:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   23b14:	e0bffe17 	ldw	r2,-8(fp)
}
   23b18:	e037883a 	mov	sp,fp
   23b1c:	df000017 	ldw	fp,0(sp)
   23b20:	dec00104 	addi	sp,sp,4
   23b24:	f800283a 	ret

00023b28 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   23b28:	defffe04 	addi	sp,sp,-8
   23b2c:	df000115 	stw	fp,4(sp)
   23b30:	df000104 	addi	fp,sp,4
   23b34:	e13fff15 	stw	r4,-4(fp)
   23b38:	e0bfff17 	ldw	r2,-4(fp)
   23b3c:	10bffe84 	addi	r2,r2,-6
   23b40:	10c00428 	cmpgeui	r3,r2,16
   23b44:	1800191e 	bne	r3,zero,23bac <alt_exception_cause_generated_bad_addr+0x84>
   23b48:	100690ba 	slli	r3,r2,2
   23b4c:	008000b4 	movhi	r2,2
   23b50:	1885883a 	add	r2,r3,r2
   23b54:	108ed717 	ldw	r2,15196(r2)
   23b58:	1000683a 	jmp	r2
   23b5c:	00023b9c 	xori	zero,zero,2286
   23b60:	00023b9c 	xori	zero,zero,2286
   23b64:	00023bac 	andhi	zero,zero,2286
   23b68:	00023bac 	andhi	zero,zero,2286
   23b6c:	00023bac 	andhi	zero,zero,2286
   23b70:	00023b9c 	xori	zero,zero,2286
   23b74:	00023ba4 	muli	zero,zero,2286
   23b78:	00023bac 	andhi	zero,zero,2286
   23b7c:	00023b9c 	xori	zero,zero,2286
   23b80:	00023b9c 	xori	zero,zero,2286
   23b84:	00023bac 	andhi	zero,zero,2286
   23b88:	00023b9c 	xori	zero,zero,2286
   23b8c:	00023ba4 	muli	zero,zero,2286
   23b90:	00023bac 	andhi	zero,zero,2286
   23b94:	00023bac 	andhi	zero,zero,2286
   23b98:	00023b9c 	xori	zero,zero,2286
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   23b9c:	00800044 	movi	r2,1
   23ba0:	00000306 	br	23bb0 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   23ba4:	0005883a 	mov	r2,zero
   23ba8:	00000106 	br	23bb0 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
   23bac:	0005883a 	mov	r2,zero
  }
}
   23bb0:	e037883a 	mov	sp,fp
   23bb4:	df000017 	ldw	fp,0(sp)
   23bb8:	dec00104 	addi	sp,sp,4
   23bbc:	f800283a 	ret

00023bc0 <atexit>:
   23bc0:	200b883a 	mov	r5,r4
   23bc4:	000f883a 	mov	r7,zero
   23bc8:	000d883a 	mov	r6,zero
   23bcc:	0009883a 	mov	r4,zero
   23bd0:	0023c241 	jmpi	23c24 <__register_exitproc>

00023bd4 <exit>:
   23bd4:	defffe04 	addi	sp,sp,-8
   23bd8:	000b883a 	mov	r5,zero
   23bdc:	dc000015 	stw	r16,0(sp)
   23be0:	dfc00115 	stw	ra,4(sp)
   23be4:	2021883a 	mov	r16,r4
   23be8:	0023d400 	call	23d40 <__call_exitprocs>
   23bec:	8009883a 	mov	r4,r16
   23bf0:	0023e6c0 	call	23e6c <_exit>

00023bf4 <memcmp>:
   23bf4:	0007883a 	mov	r3,zero
   23bf8:	30c0021e 	bne	r6,r3,23c04 <memcmp+0x10>
   23bfc:	0005883a 	mov	r2,zero
   23c00:	f800283a 	ret
   23c04:	20c5883a 	add	r2,r4,r3
   23c08:	18c00044 	addi	r3,r3,1
   23c0c:	28cf883a 	add	r7,r5,r3
   23c10:	10800003 	ldbu	r2,0(r2)
   23c14:	39ffffc3 	ldbu	r7,-1(r7)
   23c18:	11fff726 	beq	r2,r7,23bf8 <memcmp+0x4>
   23c1c:	11c5c83a 	sub	r2,r2,r7
   23c20:	f800283a 	ret

00023c24 <__register_exitproc>:
   23c24:	008000b4 	movhi	r2,2
   23c28:	10917817 	ldw	r2,17888(r2)
   23c2c:	defff904 	addi	sp,sp,-28
   23c30:	dc000015 	stw	r16,0(sp)
   23c34:	14000d17 	ldw	r16,52(r2)
   23c38:	dd400515 	stw	r21,20(sp)
   23c3c:	dd000415 	stw	r20,16(sp)
   23c40:	dcc00315 	stw	r19,12(sp)
   23c44:	dc800215 	stw	r18,8(sp)
   23c48:	dfc00615 	stw	ra,24(sp)
   23c4c:	dc400115 	stw	r17,4(sp)
   23c50:	2025883a 	mov	r18,r4
   23c54:	2827883a 	mov	r19,r5
   23c58:	302b883a 	mov	r21,r6
   23c5c:	3829883a 	mov	r20,r7
   23c60:	8000081e 	bne	r16,zero,23c84 <__register_exitproc+0x60>
   23c64:	14000e04 	addi	r16,r2,56
   23c68:	00c00034 	movhi	r3,0
   23c6c:	14000d15 	stw	r16,52(r2)
   23c70:	18c00004 	addi	r3,r3,0
   23c74:	18000326 	beq	r3,zero,23c84 <__register_exitproc+0x60>
   23c78:	00c00034 	movhi	r3,0
   23c7c:	18c00017 	ldw	r3,0(r3)
   23c80:	10c03015 	stw	r3,192(r2)
   23c84:	84400117 	ldw	r17,4(r16)
   23c88:	88800810 	cmplti	r2,r17,32
   23c8c:	10000a1e 	bne	r2,zero,23cb8 <__register_exitproc+0x94>
   23c90:	00bfffc4 	movi	r2,-1
   23c94:	dfc00617 	ldw	ra,24(sp)
   23c98:	dd400517 	ldw	r21,20(sp)
   23c9c:	dd000417 	ldw	r20,16(sp)
   23ca0:	dcc00317 	ldw	r19,12(sp)
   23ca4:	dc800217 	ldw	r18,8(sp)
   23ca8:	dc400117 	ldw	r17,4(sp)
   23cac:	dc000017 	ldw	r16,0(sp)
   23cb0:	dec00704 	addi	sp,sp,28
   23cb4:	f800283a 	ret
   23cb8:	90001926 	beq	r18,zero,23d20 <__register_exitproc+0xfc>
   23cbc:	80802217 	ldw	r2,136(r16)
   23cc0:	1000091e 	bne	r2,zero,23ce8 <__register_exitproc+0xc4>
   23cc4:	00800034 	movhi	r2,0
   23cc8:	10800004 	addi	r2,r2,0
   23ccc:	103ff026 	beq	r2,zero,23c90 <__register_exitproc+0x6c>
   23cd0:	01004204 	movi	r4,264
   23cd4:	00000000 	call	0 <__alt_mem_nios_system_shared_memory-0x2000>
   23cd8:	103fed26 	beq	r2,zero,23c90 <__register_exitproc+0x6c>
   23cdc:	10004015 	stw	zero,256(r2)
   23ce0:	10004115 	stw	zero,260(r2)
   23ce4:	80802215 	stw	r2,136(r16)
   23ce8:	880890ba 	slli	r4,r17,2
   23cec:	00c00044 	movi	r3,1
   23cf0:	1c46983a 	sll	r3,r3,r17
   23cf4:	1109883a 	add	r4,r2,r4
   23cf8:	25400015 	stw	r21,0(r4)
   23cfc:	11404017 	ldw	r5,256(r2)
   23d00:	94800098 	cmpnei	r18,r18,2
   23d04:	28cab03a 	or	r5,r5,r3
   23d08:	11404015 	stw	r5,256(r2)
   23d0c:	25002015 	stw	r20,128(r4)
   23d10:	9000031e 	bne	r18,zero,23d20 <__register_exitproc+0xfc>
   23d14:	11004117 	ldw	r4,260(r2)
   23d18:	20c6b03a 	or	r3,r4,r3
   23d1c:	10c04115 	stw	r3,260(r2)
   23d20:	88800044 	addi	r2,r17,1
   23d24:	8c400084 	addi	r17,r17,2
   23d28:	882290ba 	slli	r17,r17,2
   23d2c:	80800115 	stw	r2,4(r16)
   23d30:	0005883a 	mov	r2,zero
   23d34:	8461883a 	add	r16,r16,r17
   23d38:	84c00015 	stw	r19,0(r16)
   23d3c:	003fd506 	br	23c94 <__register_exitproc+0x70>

00023d40 <__call_exitprocs>:
   23d40:	defff604 	addi	sp,sp,-40
   23d44:	008000b4 	movhi	r2,2
   23d48:	dd800615 	stw	r22,24(sp)
   23d4c:	15917817 	ldw	r22,17888(r2)
   23d50:	dd400515 	stw	r21,20(sp)
   23d54:	dd000415 	stw	r20,16(sp)
   23d58:	dfc00915 	stw	ra,36(sp)
   23d5c:	df000815 	stw	fp,32(sp)
   23d60:	ddc00715 	stw	r23,28(sp)
   23d64:	dcc00315 	stw	r19,12(sp)
   23d68:	dc800215 	stw	r18,8(sp)
   23d6c:	dc400115 	stw	r17,4(sp)
   23d70:	dc000015 	stw	r16,0(sp)
   23d74:	202b883a 	mov	r21,r4
   23d78:	2829883a 	mov	r20,r5
   23d7c:	b4400d17 	ldw	r17,52(r22)
   23d80:	88000726 	beq	r17,zero,23da0 <__call_exitprocs+0x60>
   23d84:	8c000117 	ldw	r16,4(r17)
   23d88:	8cc02217 	ldw	r19,136(r17)
   23d8c:	84bfffc4 	addi	r18,r16,-1
   23d90:	802090ba 	slli	r16,r16,2
   23d94:	9c2f883a 	add	r23,r19,r16
   23d98:	8c21883a 	add	r16,r17,r16
   23d9c:	90000c0e 	bge	r18,zero,23dd0 <__call_exitprocs+0x90>
   23da0:	dfc00917 	ldw	ra,36(sp)
   23da4:	df000817 	ldw	fp,32(sp)
   23da8:	ddc00717 	ldw	r23,28(sp)
   23dac:	dd800617 	ldw	r22,24(sp)
   23db0:	dd400517 	ldw	r21,20(sp)
   23db4:	dd000417 	ldw	r20,16(sp)
   23db8:	dcc00317 	ldw	r19,12(sp)
   23dbc:	dc800217 	ldw	r18,8(sp)
   23dc0:	dc400117 	ldw	r17,4(sp)
   23dc4:	dc000017 	ldw	r16,0(sp)
   23dc8:	dec00a04 	addi	sp,sp,40
   23dcc:	f800283a 	ret
   23dd0:	a0000726 	beq	r20,zero,23df0 <__call_exitprocs+0xb0>
   23dd4:	9800041e 	bne	r19,zero,23de8 <__call_exitprocs+0xa8>
   23dd8:	94bfffc4 	addi	r18,r18,-1
   23ddc:	bdffff04 	addi	r23,r23,-4
   23de0:	843fff04 	addi	r16,r16,-4
   23de4:	003fed06 	br	23d9c <__call_exitprocs+0x5c>
   23de8:	b8c01f17 	ldw	r3,124(r23)
   23dec:	1d3ffa1e 	bne	r3,r20,23dd8 <__call_exitprocs+0x98>
   23df0:	89000117 	ldw	r4,4(r17)
   23df4:	80c00117 	ldw	r3,4(r16)
   23df8:	213fffc4 	addi	r4,r4,-1
   23dfc:	24800f1e 	bne	r4,r18,23e3c <__call_exitprocs+0xfc>
   23e00:	8c800115 	stw	r18,4(r17)
   23e04:	183ff426 	beq	r3,zero,23dd8 <__call_exitprocs+0x98>
   23e08:	8f000117 	ldw	fp,4(r17)
   23e0c:	98000526 	beq	r19,zero,23e24 <__call_exitprocs+0xe4>
   23e10:	00800044 	movi	r2,1
   23e14:	148c983a 	sll	r6,r2,r18
   23e18:	99004017 	ldw	r4,256(r19)
   23e1c:	3108703a 	and	r4,r6,r4
   23e20:	2000081e 	bne	r4,zero,23e44 <__call_exitprocs+0x104>
   23e24:	183ee83a 	callr	r3
   23e28:	89000117 	ldw	r4,4(r17)
   23e2c:	b0c00d17 	ldw	r3,52(r22)
   23e30:	273fd21e 	bne	r4,fp,23d7c <__call_exitprocs+0x3c>
   23e34:	88ffe826 	beq	r17,r3,23dd8 <__call_exitprocs+0x98>
   23e38:	003fd006 	br	23d7c <__call_exitprocs+0x3c>
   23e3c:	80000115 	stw	zero,4(r16)
   23e40:	003ff006 	br	23e04 <__call_exitprocs+0xc4>
   23e44:	99404117 	ldw	r5,260(r19)
   23e48:	b93fff17 	ldw	r4,-4(r23)
   23e4c:	314c703a 	and	r6,r6,r5
   23e50:	3000041e 	bne	r6,zero,23e64 <__call_exitprocs+0x124>
   23e54:	200b883a 	mov	r5,r4
   23e58:	a809883a 	mov	r4,r21
   23e5c:	183ee83a 	callr	r3
   23e60:	003ff106 	br	23e28 <__call_exitprocs+0xe8>
   23e64:	183ee83a 	callr	r3
   23e68:	003fef06 	br	23e28 <__call_exitprocs+0xe8>

00023e6c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   23e6c:	defffd04 	addi	sp,sp,-12
   23e70:	df000215 	stw	fp,8(sp)
   23e74:	df000204 	addi	fp,sp,8
   23e78:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   23e7c:	0001883a 	nop
   23e80:	e0bffe17 	ldw	r2,-8(fp)
   23e84:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   23e88:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   23e8c:	10000226 	beq	r2,zero,23e98 <_exit+0x2c>
    ALT_SIM_FAIL();
   23e90:	002af070 	cmpltui	zero,zero,43969
  } else {
    ALT_SIM_PASS();
  }
#endif /* DEBUG_STUB */
}
   23e94:	00000106 	br	23e9c <_exit+0x30>
    ALT_SIM_PASS();
   23e98:	002af0b0 	cmpltui	zero,zero,43970
}
   23e9c:	0001883a 	nop
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   23ea0:	003fff06 	br	23ea0 <_exit+0x34>
